{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\performanceTable\\PerformanceBasicInfo.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\performanceTable\\PerformanceBasicInfo.vue","mtime":1694505521932},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\css-loader\\dist\\cjs.js","mtime":1696752946978},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnBlcmZvcm1hbmNlVGFibGUtYmFzaWNpbmZvLXRhYmxlew0KICAuVGl0YW5zLXRhYmxlICAudnhlLXRhYmxlLS1tYWluLXdyYXBwZXJ7DQogICAgICBib3JkZXI6bm9uZTsNCiAgfQ0KICAudnhlLXRhYmxlIC52eGUtdGFibGUtLWJvcmRlci1saW5lIHsNCiAgICBib3JkZXItYm90dG9tOiBub25lOw0KICB9DQogIC5UaXRhbnMtZm9ybXsNCiAgICAgaGVpZ2h0OjEwMCU7DQogIH0NCiAgLnZ4ZS1mb3Jtew0KICAgIGhlaWdodDoxMDAlOw0KICAgIC52eGUtY2VsbHsNCiAgICAudnhlLWZvcm0tLWl0ZW17DQogICAgICBwYWRkaW5nOiAwOw0KICAgICAgbGluZS1oZWlnaHQ6IDMwcHg7DQogICAgICBoZWlnaHQ6IGF1dG87DQogICAgICBkaXNwbGF5OiBibG9jazsNCiAgICB9DQoNCiAgICAucGVyZm9ybWFuY2VUYWJsZS1iYXNpY2luZm8tdGFibGUtaXRlbXsNCiAgICAgIC50ZXh0LA0KICAgICAgLmJsb2Nrew0KICAgICAgICBkaXNwbGF5OiBibG9jazsNCiAgICAgICAgcGFkZGluZzowIDVweDsNCiAgICAgIH0NCiAgICAgIC52YWxpZC1yZXF1aXJlZHsNCiAgICAgICAgZm9udC1zaXplOiAxNnB4Ow0KICAgICAgICBjb2xvcjogI2YwMDsNCiAgICAgIH0NCiAgICB9DQogICAgLnZhbGlkLWVycm9yew0KICAgICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgICAgLnZhbGlkLWl0ZW0tZXJyb3J7DQogICAgICAgIGNvbG9yOiAjZjAwOw0KICAgICAgICBmb250LXNpemU6IDEycHg7DQogICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4Ow0KICAgICAgICBoZWlnaHQ6IDIwcHg7DQogICAgICB9DQogICAgfQ0KICAgfQ0KICB9DQogIC52eGUtZ3JpZHsNCiAgICAudnhlLXRhYmxlIC52eGUtY2VsbCB7DQogICAgICBoZWlnaHQ6IGF1dG87DQogICAgICBsaW5lLWhlaWdodDogMzJweDsNCiAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgcGFkZGluZzogMDsNCiAgICB9DQogICAgLnZ4ZS10YWJsZSAudnhlLWVkaXRhYmxlIC52eGUtYm9keS0tY29sdW1uLA0KICAgIC52eGUtdGFibGUgLnZ4ZS1ib2R5LS1jb2x1bW4uY29sLS1lbGxpcHNpcywNCiAgICAudnhlLXRhYmxlIC52eGUtZm9vdGVyLS1jb2x1bW4uY29sLS1lbGxpcHNpcyB7DQogICAgICAgaGVpZ2h0OiBhdXRvOw0KICAgICAgIG1pbi1oZWlnaHQ6MzJweDsNCiAgICAgICBsaW5lLWhlaWdodDogMzJweDsNCiAgICAgICBwYWRkaW5nOiAwOw0KDQogICAgfQ0KICAgIC52eGUtdGFibGUgLnZ4ZS1ib2R5LS1jb2x1bW4uY29sLS1lbGxpcHNpcz4udnhlLWNlbGwsDQogICAgLnZ4ZS10YWJsZSAudnhlLWZvb3Rlci0tY29sdW1uLmNvbC0tZWxsaXBzaXM+LnZ4ZS1jZWxsLA0KICAgIC52eGUtdGFibGUgLnZ4ZS1oZWFkZXItLWNvbHVtbi5jb2wtLWVsbGlwc2lzPi52eGUtY2VsbCB7DQogICAgICAgIG1heC1oZWlnaHQ6IHVuc2V0Ow0KICAgICAgICB3aGl0ZS1zcGFjZTogdW5zZXQhaW1wb3J0YW50Ow0KICAgIH0NCiAgfQ0KfQ0KDQo="},{"version":3,"sources":["PerformanceBasicInfo.vue"],"names":[],"mappingslBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PerformanceBasicInfo.vue","sourceRoot":"src/components/performanceTable","sourcesContent":["<!--    Author:Titans@2396757591@qq.com -->\r\n<template>\r\n  <div :style=\"{ height: height + errorRules.length * 25 + 'px' }\" class=\"performanceTable-basicinfo-table\">\r\n    <BsForm ref=\"form\" :default-money-unit=\"10000\" :form-data-list=\"formDataIn\" :form-validation-config=\"editRules\" @itemChange=\"itemChange\">\r\n      <BsTable\r\n        :toolbar-config=\"false\"\r\n        :pager-config=\"false\"\r\n        :table-config=\"tableConfig\"\r\n        :table-global-config=\"tableGlobalConfig\"\r\n        :table-columns-config=\"colMapColumnsConfigIn\"\r\n        :table-data=\"tableDataIn\"\r\n        :merge-cells=\"mergeCellsIn\"\r\n      >\r\n        <template v-slot:celldefault=\"{ column,rowIndex }\">\r\n          <div class=\"performanceTable-basicinfo-table-item\">\r\n            <span v-if=\"!itemRenderMapIn[rowIndex + '_' + column.property]\" class=\"block\"></span>\r\n            <span v-if=\"itemRenderMapIn[rowIndex + '_' + column.property] && itemRenderMapIn[rowIndex + '_' + column.property].field === ''\" class=\"block\" :style=\"{ textAlign: itemRenderMapIn[rowIndex + '_' + column.property].align || 'left' }\">\r\n              <i v-show=\"hasRequired(itemRenderMapIn[rowIndex + '_' + column.property])\" class=\"valid-required\">*</i>\r\n              <span>{{ itemRenderMapIn[rowIndex + '_' + column.property].title }}</span>\r\n            </span>\r\n            <div v-if=\"itemRenderMapIn[rowIndex + '_' + column.property] && itemRenderMapIn[rowIndex + '_' + column.property].field\" :class=\"ruleErrorMap && ruleErrorMap[itemRenderMapIn[rowIndex + '_' + column.property].field] ? 'valid-error' : ''\">\r\n              <vxe-form-item\r\n                :span=\"24\"\r\n                :title-width=\"0\"\r\n                title=\"\"\r\n                :field=\"itemRenderMapIn[rowIndex + '_' + column.property].field\"\r\n                :item-render=\"itemRenderMapIn[rowIndex + '_' + column.property].itemRender\"\r\n                :align=\"(itemRenderMapIn[rowIndex + '_' + column.property].align) || 'left'\"\r\n              />\r\n              <div v-if=\"ruleErrorMap && ruleErrorMap[itemRenderMapIn[rowIndex + '_' + column.property].field]\" class=\"valid-item-error\">\r\n                {{ ruleErrorMap && ruleErrorMap[itemRenderMapIn[rowIndex + '_' + column.property].field] && ruleErrorMap[itemRenderMapIn[rowIndex + '_' + column.property].field].message }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </BsTable>\r\n    </BsForm>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport tools from './tools.js'\r\nexport default {\r\n  name: 'PerformanceBasicInfo',\r\n  components: {},\r\n  props: {\r\n    height: {\r\n      type: Number,\r\n      default: 370\r\n    },\r\n    colMapColumnsConfig: {\r\n      type: Array,\r\n      default() {\r\n        return [\r\n          {\r\n            title: '',\r\n            field: 'A',\r\n            width: 200,\r\n            align: 'right'\r\n          },\r\n          {\r\n            title: '',\r\n            width: 200,\r\n            field: 'B',\r\n            align: 'left',\r\n            filters: false\r\n          },\r\n          {\r\n            title: '',\r\n            field: 'C',\r\n            align: 'left'\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    itemRenderMap: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          '1_A': {\r\n            field: '',\r\n            title: '项目绩效目标表',\r\n            align: 'center',\r\n            merge: {\r\n              rowSpan: 1,\r\n              colSpan: 3\r\n            }\r\n          },\r\n          '2_A': {\r\n            field: '',\r\n            title: '项目编码',\r\n            align: 'left'\r\n          },\r\n          '2_B': {\r\n            field: 'projectCode',\r\n            title: '项目编码',\r\n            merge: {\r\n              rowSpan: 1,\r\n              colSpan: 2\r\n            },\r\n            itemRender: {\r\n              name: '$vxeInput',\r\n              props: {\r\n                type: 'text',\r\n                editable: false,\r\n                placeholder: '请录入项目编码'\r\n              }\r\n            }\r\n          },\r\n          '3_A': {\r\n            field: '',\r\n            title: '项目名称'\r\n          },\r\n          '3_B': {\r\n            field: 'projectName',\r\n            title: '项目名称',\r\n            merge: {\r\n              rowSpan: 1,\r\n              colSpan: 2\r\n            },\r\n            itemRender: {\r\n              name: '$vxeInput',\r\n              props: {\r\n                type: 'text',\r\n                editable: false,\r\n                placeholder: '请录入项目名称'\r\n              }\r\n            }\r\n          },\r\n          '4_A': {\r\n            field: '',\r\n            title: '主管部门'\r\n          },\r\n          '4_B': {\r\n            field: 'competentDepartment',\r\n            merge: {\r\n              rowSpan: 1,\r\n              colSpan: 2\r\n            },\r\n            itemRender: {\r\n              name: '$vxeInput',\r\n              props: {\r\n                type: 'text',\r\n                editable: false,\r\n                placeholder: '请录入主管部门'\r\n              }\r\n            }\r\n          },\r\n          '5_A': {\r\n            field: '',\r\n            title: '实施单位'\r\n          },\r\n          '5_B': {\r\n            field: 'implementingAgencies',\r\n            title: '实施单位',\r\n            merge: {\r\n              rowSpan: 1,\r\n              colSpan: 2\r\n            },\r\n            itemRender: {\r\n              name: '$vxeInput',\r\n              props: {\r\n                type: 'text',\r\n                editable: false,\r\n                placeholder: '请录入实施单位'\r\n              }\r\n            }\r\n          },\r\n          '6_A': {\r\n            field: '',\r\n            title: '资金金额',\r\n            merge: {\r\n              rowSpan: 4,\r\n              colSpan: 1\r\n            }\r\n          },\r\n          '6_B': {\r\n            field: '',\r\n            title: '实施期资金总额',\r\n            validReqiredField: 'amount'\r\n          },\r\n          '6_C': {\r\n            field: 'amount',\r\n            title: '实施期资金总额',\r\n            itemRender: {\r\n              name: '$vxeMoney',\r\n              props: {\r\n                type: 'float',\r\n                editable: true,\r\n                placeholder: '请录入实施期资金总额'\r\n              }\r\n            }\r\n          },\r\n          '7_B': {\r\n            field: '',\r\n            title: '财政拨款数',\r\n            validReqiredField: 'financialAllocation'\r\n          },\r\n          '7_C': {\r\n            field: 'financialAllocation',\r\n            title: '财政拨款数',\r\n            itemRender: {\r\n              name: '$vxeMoney',\r\n              props: {\r\n                type: 'float',\r\n                editable: true,\r\n                placeholder: '请录入财政拨款数'\r\n              }\r\n            }\r\n          },\r\n          '8_B': {\r\n            field: '',\r\n            title: '非财政拨款数',\r\n            validReqiredField: 'nonFinancialAllocations'\r\n          },\r\n          '8_C': {\r\n            field: 'nonFinancialAllocations',\r\n            title: '非财政拨款数',\r\n            itemRender: {\r\n              name: '$vxeMoney',\r\n              props: {\r\n                type: 'float',\r\n                editable: true,\r\n                placeholder: '请录入非财政拨款数'\r\n              }\r\n            }\r\n          },\r\n          '9_B': {\r\n            field: '',\r\n            title: '预算执行权重（%）'\r\n          },\r\n          '9_C': {\r\n            field: 'budgetExecutionWeight',\r\n            title: '财政预算执行权重（%）',\r\n            itemRender: {\r\n              name: '$vxeInput',\r\n              props: {\r\n                type: 'float',\r\n                editable: false,\r\n                placeholder: '请录入预算执行权重（%）'\r\n              }\r\n            }\r\n          },\r\n          '10_A': {\r\n            field: '',\r\n            title: '项目总体目标',\r\n            validReqiredField: 'overallProjectObjective'\r\n          },\r\n          '10_B': {\r\n            field: 'overallProjectObjective',\r\n            title: '项目总体目标',\r\n            align: 'left',\r\n            merge: {\r\n              rowSpan: 1,\r\n              colSpan: 2\r\n            },\r\n            itemRender: {\r\n              name: '$vxeEditDownTextarea',\r\n              props: {\r\n                type: 'text',\r\n                maxlength: 1000,\r\n                rows: 3,\r\n                placeholder: '请录入项目总体目标'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    editRules: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          nonFinancialAllocations: [\r\n            {\r\n              required: true,\r\n              message: '非财政拨款数',\r\n              type: 'number',\r\n              trigger: 'change',\r\n              min: 1000\r\n            }\r\n          ],\r\n          overallProjectObjective: [{\r\n            required: true,\r\n            message: '请录入项目总体目标',\r\n            trigger: 'change',\r\n            validator({ cellValue, rule, rules, row, rowIndex, column, columnIndex, $table }) {\r\n              return new Promise((resolve, reject) => {\r\n                let result = true\r\n                if (cellValue.length <= 10) {\r\n                  result = '长度至少为10个字符'\r\n                }\r\n                if (result === true) {\r\n                  resolve(true)\r\n                } else {\r\n                  reject(new Error(result))\r\n                }\r\n              })\r\n            }\r\n          }]\r\n        }\r\n      }\r\n    },\r\n    formData: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          projectCode: '1001', // 项目编码\r\n          projectName: 'test', // 项目名称\r\n          competentDepartment: '财政厅', // 主管部门\r\n          implementingAgencies: '财政预算一体化', // 主管部门\r\n          amount: '1111111', // 实施期资金总额\r\n          financialAllocation: '111111.11', // 财政拨款数\r\n          nonFinancialAllocations: '22222.22', // 非财政拨款数\r\n          budgetExecutionWeight: '30%', // 预算执行权重（%）,\r\n          overallProjectObjective: '' // 项目总体目标,\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      constrainDataMap: {\r\n\r\n      },\r\n      tableGlobalConfig: {\r\n        mouseConfig: {\r\n          selected: false\r\n        },\r\n        rowDrop: false, // 行拖拽\r\n        stripe: false, // 斑马纹\r\n        showHeader: false,\r\n        keepSource: true,\r\n        highlightCurrentRow: false,\r\n        highlightHoverRow: false\r\n      },\r\n      tableConfig: {\r\n        globalConfig: {\r\n          filters: false,\r\n          checkType: false,\r\n          seq: false\r\n        }\r\n      },\r\n      colMapColumnsConfigIn: [],\r\n      itemRenderMapIn: {},\r\n      tableDataIn: [],\r\n      mergeCellsIn: [],\r\n      formDataIn: {},\r\n      itemRenderDefault: {\r\n        name: '$vxeInput',\r\n        props: {\r\n          type: 'text',\r\n          editable: false,\r\n          placeholder: ''\r\n        }\r\n      },\r\n      errorRules: [],\r\n      ruleErrorMap: {}\r\n    }\r\n  },\r\n  methods: {\r\n    ...tools,\r\n    hasRequired(obj) {\r\n      if (obj.validReqiredField && this.editRules[obj.validReqiredField]) {\r\n        return this.editRules[obj.validReqiredField].some(rule => rule.required)\r\n      }\r\n      return false\r\n    },\r\n    itemChange(obj) {\r\n      this.$emit('itemChange', obj)\r\n    },\r\n    setColColumnsConfig(columns) {\r\n      this.colMapColumnsConfigIn = columns.map((item) => {\r\n        return Object.assign(item, {\r\n          filters: false,\r\n          sortable: false,\r\n          cellRender: undefined,\r\n          editRender: undefined,\r\n          slots: {\r\n            // default: 'expandDefault',\r\n            // content: 'expandContent'\r\n            // const { $rowIndex, $seq, $table, column, columnIndex, fixed, level, row, rowIndex, seq, type } = obj\r\n            default(obj, h, fixedType) {\r\n              const { $table } = obj\r\n              let $scopedSlots = $table.$parent.$parent.$scopedSlots\r\n              Object.assign(obj, { h })\r\n              if ($scopedSlots.celldefault) {\r\n                return $scopedSlots.celldefault(obj)\r\n              } else if ($scopedSlots.cellEdit) {\r\n                return $scopedSlots.cellEdit(obj)\r\n              } else {\r\n                return ''\r\n              }\r\n            },\r\n            edit(obj, h, fixedType) {\r\n              const { $table } = obj\r\n              let $scopedSlots = $table.$parent.$parent.$scopedSlots\r\n              Object.assign(obj, { h })\r\n              if ($scopedSlots.cellEdit) {\r\n                return $scopedSlots.cellEdit(obj)\r\n              } else if ($scopedSlots.celldefault) {\r\n                return $scopedSlots.celldefault(obj)\r\n              } else {\r\n                return ''\r\n              }\r\n            }\r\n          }\r\n        })\r\n      })\r\n    },\r\n    setTbodyAndMergeInfo(renderMap) {\r\n      this.itemRenderMapIn = renderMap\r\n      let { keyColIndexMap } = this.getColumnsMap(this.colMapColumnsConfigIn)\r\n      let mergeCells = []\r\n      let tableData = []\r\n      Object.keys(renderMap).forEach((item) => {\r\n        let maprowCol = item.split('_')\r\n        tableData[maprowCol[0]] = tableData[maprowCol[0]] || {}\r\n        tableData[maprowCol[0]][maprowCol[1]] = ''\r\n        if (renderMap[item].merge && (renderMap[item].merge.rowSpan !== 1 || renderMap[item].merge.colSpan !== 1)) {\r\n          mergeCells.push({\r\n            row: parseInt(maprowCol[0]),\r\n            col: keyColIndexMap[maprowCol[1]],\r\n            rowspan: renderMap[item].merge.rowSpan,\r\n            colspan: renderMap[item].merge.colSpan\r\n          })\r\n        }\r\n      })\r\n      this.tableDataIn = tableData.map(row => {\r\n        return row || {}\r\n      })\r\n      this.mergeCellsIn = mergeCells\r\n    },\r\n    validate(cb) {\r\n      return new Promise((resolve, reject) => {\r\n        this.beginValidate(cb).then((res) => {\r\n          resolve(res)\r\n        }).catch((errMap) => {\r\n          reject(errMap)\r\n        })\r\n      })\r\n    },\r\n    newRule(rule) { // 错误规则信息\r\n      return {\r\n        $options: rule,\r\n        required: rule.required,\r\n        min: rule.min,\r\n        max: rule.min,\r\n        type: rule.type,\r\n        property: rule.property,\r\n        pattern: rule.pattern,\r\n        validator: rule.validator,\r\n        maxWidth: rule.maxWidth,\r\n        message: rule.message\r\n      }\r\n    },\r\n    validCellRules({ data, cellValue, rules, property }) { // 校验单元格\r\n      let self = this\r\n      try {\r\n        const errorRules = []\r\n        const syncVailds = []\r\n        if (rules) {\r\n          rules.forEach(rule => {\r\n            if (typeof self.validateCb === 'function' && rule.asyncValidate) {\r\n              let customValid\r\n              customValid = self.validatorCb({\r\n                cellValue,\r\n                rule,\r\n                rules,\r\n                data,\r\n                property\r\n              })\r\n              if (customValid) {\r\n                if (self.getbasicDataType(customValid) === 'Error') {\r\n                  errorRules.push(self.newRule({ message: customValid.message, rule: self.newRule(rule) }))\r\n                } else if (customValid.catch) {\r\n                  // 如果为异步校验（注：异步校验是并发无序的）\r\n                  syncVailds.push(\r\n                    customValid.catch(e => {\r\n                      errorRules.push(self.newRule({ type: 'custom', message: e ? e.message : rule.message, rule: self.newRule(rule) }))\r\n                    })\r\n                  )\r\n                }\r\n              }\r\n            } else if (typeof rule.validator === 'function') {\r\n              let customValid\r\n              customValid = rule.validator({\r\n                cellValue,\r\n                rule,\r\n                rules,\r\n                data,\r\n                property\r\n              })\r\n              if (customValid) {\r\n                if (self.getbasicDataType(customValid) === 'Error') {\r\n                  errorRules.push(self.newRule({ property, message: customValid.message, rule: self.newRule(rule) }))\r\n                } else if (customValid.catch) {\r\n                  // 如果为异步校验（注：异步校验是并发无序的）\r\n                  syncVailds.push(\r\n                    customValid.catch(e => {\r\n                      errorRules.push(self.newRule({ property, type: 'custom', message: e ? e.message : rule.message, rule: self.newRule(rule) }))\r\n                    })\r\n                  )\r\n                }\r\n              }\r\n            } else {\r\n              const isNumber = rule.type === 'number'\r\n              const numVal = isNumber ? (isNaN(parseFloat(cellValue)) ? 0 : parseFloat(cellValue)) : String(cellValue || '').length\r\n              if (rule.required && (cellValue === null || cellValue === undefined || cellValue === '')) {\r\n                self.validRuleErr = true\r\n                errorRules.push(self.newRule(Object.assign(rule, { property })))\r\n              } else if (rule.required && ((isNumber && isNaN(cellValue)) || (!isNaN(rule.min) && numVal < parseFloat(rule.min)) || (!isNaN(rule.max) && numVal > parseFloat(rule.max)) || (rule.pattern && !(rule.pattern.test ? rule.pattern : new RegExp(rule.pattern)).test(cellValue)))) {\r\n                errorRules.push(self.newRule(Object.assign(rule, { property })))\r\n              }\r\n            }\r\n          })\r\n        }\r\n        return Promise.all(syncVailds).then(() => {\r\n          if (errorRules.length) {\r\n            const rest = { rules: errorRules, rule: errorRules[0] }\r\n            return Promise.reject(rest)\r\n          }\r\n        })\r\n      } catch (e) {\r\n      }\r\n    },\r\n    beginValidate () {\r\n      let self = this\r\n      this.clearRuleErrorMap()\r\n      const itemValids = []\r\n      let errorRules = []\r\n      let { editRules } = this\r\n      let data = this.$refs.form.getFormData()\r\n      Object.keys(editRules).forEach((key) => {\r\n        itemValids.push(self.validCellRules({ data, cellValue: data[key], rules: editRules[key], property: key }).then(() => {\r\n        }).catch(({ rule, rules }) => {\r\n          return Promise.reject(errorRules = errorRules.concat(rules))\r\n        }))\r\n      })\r\n      return Promise.all(itemValids).then(() => {\r\n      }).catch(() => {\r\n        this.updateErrorRules(errorRules)\r\n        return Promise.reject(errorRules)\r\n      })\r\n    },\r\n    updateErrorRules(errorRules) {\r\n      let errMap = {}\r\n      this.errorRules = errorRules\r\n      errorRules.forEach((item, index) => {\r\n        errMap[item.property] = item\r\n      })\r\n      this.ruleErrorMap = errMap\r\n    },\r\n    clearRuleErrorMap() {\r\n      this.errorRules = []\r\n      this.ruleErrorMap = null\r\n    },\r\n    setFormData(data) {\r\n      this.formDataIn = data\r\n    },\r\n    init() {\r\n      this.setColColumnsConfig(this.colMapColumnsConfig)\r\n      this.setTbodyAndMergeInfo(this.itemRenderMap)\r\n      this.setFormData(this.formData)\r\n    }\r\n  },\r\n  crated() {},\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  watch: {\r\n    height: {\r\n      handler() {},\r\n      immediate: true\r\n    },\r\n    colMapColumnsConfig: {\r\n      handler() {\r\n        this.setColColumnsConfig(this.colMapColumnsConfig)\r\n      },\r\n      immediate: true\r\n    },\r\n    itemRenderMap: {\r\n      handler() {\r\n        this.setTbodyAndMergeInfo(this.itemRenderMap)\r\n      },\r\n      immediate: true\r\n    },\r\n    editRules: {\r\n      handler() {},\r\n      immediate: true\r\n    },\r\n    formData: {\r\n      handler() {\r\n        this.setFormData(this.formData)\r\n      },\r\n      immediate: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n.performanceTable-basicinfo-table{\r\n  .Titans-table  .vxe-table--main-wrapper{\r\n      border:none;\r\n  }\r\n  .vxe-table .vxe-table--border-line {\r\n    border-bottom: none;\r\n  }\r\n  .Titans-form{\r\n     height:100%;\r\n  }\r\n  .vxe-form{\r\n    height:100%;\r\n    .vxe-cell{\r\n    .vxe-form--item{\r\n      padding: 0;\r\n      line-height: 30px;\r\n      height: auto;\r\n      display: block;\r\n    }\r\n\r\n    .performanceTable-basicinfo-table-item{\r\n      .text,\r\n      .block{\r\n        display: block;\r\n        padding:0 5px;\r\n      }\r\n      .valid-required{\r\n        font-size: 16px;\r\n        color: #f00;\r\n      }\r\n    }\r\n    .valid-error{\r\n      position: relative;\r\n      .valid-item-error{\r\n        color: #f00;\r\n        font-size: 12px;\r\n        line-height: 20px;\r\n        height: 20px;\r\n      }\r\n    }\r\n   }\r\n  }\r\n  .vxe-grid{\r\n    .vxe-table .vxe-cell {\r\n      height: auto;\r\n      line-height: 32px;\r\n      display: block;\r\n      padding: 0;\r\n    }\r\n    .vxe-table .vxe-editable .vxe-body--column,\r\n    .vxe-table .vxe-body--column.col--ellipsis,\r\n    .vxe-table .vxe-footer--column.col--ellipsis {\r\n       height: auto;\r\n       min-height:32px;\r\n       line-height: 32px;\r\n       padding: 0;\r\n\r\n    }\r\n    .vxe-table .vxe-body--column.col--ellipsis>.vxe-cell,\r\n    .vxe-table .vxe-footer--column.col--ellipsis>.vxe-cell,\r\n    .vxe-table .vxe-header--column.col--ellipsis>.vxe-cell {\r\n        max-height: unset;\r\n        white-space: unset!important;\r\n    }\r\n  }\r\n}\r\n\r\n</style>\r\n"]}]}