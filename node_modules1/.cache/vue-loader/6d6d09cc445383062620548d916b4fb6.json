{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\SelectTree.vue?vue&type=style&index=0&id=408d6bea&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\SelectTree.vue","mtime":1694505521442},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm9wdGlvbiB7DQogIGhlaWdodDogYXV0bzsNCiAgbGluZS1oZWlnaHQ6IDE7DQogIHBhZGRpbmc6IDA7DQogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQp9DQoNCi50cmVlIHsNCiAgcGFkZGluZzogNHB4IDIwcHg7DQogIGhlaWdodDogYXV0bzsNCiAgZm9udC13ZWlnaHQ6IDQwMDsNCn0NCg=="},{"version":3,"sources":["SelectTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6KA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"SelectTree.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <el-select\r\n    ref=\"selectRef\"\r\n    :value=\"value\"\r\n    placeholder=\"财政区划\"\r\n    clearable\r\n    :size=\"size\"\r\n    style=\"width: 100%;\"\r\n    @visible-change=\"visibleChange\"\r\n    @clear=\"clear\"\r\n  >\r\n    <el-option\r\n      ref=\"optionRef\"\r\n      class=\"option\"\r\n      :value=\"optionData.id\"\r\n      :label=\"optionData.name\"\r\n      @focus=\"inputFocus\"\r\n    >\r\n      <el-input\r\n        v-if=\"filter\"\r\n        v-model=\"filterText\"\r\n        placeholder=\"输入关键字进行过滤\"\r\n      />\r\n      <el-tree\r\n        ref=\"treeRef\"\r\n        class=\"tree\"\r\n        :node-key=\"nodeKey\"\r\n        :data=\"data\"\r\n        :props=\"props\"\r\n        :default-expanded-keys=\"[value]\"\r\n        highlight-current\r\n        :expand-on-click-node=\"false\"\r\n        :filter-node-method=\"filterNode\"\r\n        v-bind=\"treeProps\"\r\n        @node-click=\"handleNodeClick\"\r\n        v-on=\"$listeners\"\r\n      />\r\n    </el-option>\r\n  </el-select>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, reactive, watch, ref, unref, nextTick } from '@vue/composition-api'\r\nexport default defineComponent({\r\n  props: {\r\n    // v-model绑定\r\n    value: {\r\n      type: [String, Number],\r\n      default: ''\r\n    },\r\n    // 树形的数据\r\n    data: {\r\n      type: Array,\r\n      default: function () {\r\n        return []\r\n      }\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    // 每个树节点用来作为唯一标识的属性\r\n    nodeKey: {\r\n      type: [String, Number],\r\n      default: 'code'\r\n    },\r\n    filter: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // tree的props配置\r\n    props: {\r\n      type: Object,\r\n      default: function () {\r\n        return {\r\n          label: 'label',\r\n          children: 'children'\r\n        }\r\n      }\r\n    },\r\n    treeProps: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const filterText = ref('')\r\n    const optionData = reactive({\r\n      id: '',\r\n      name: ''\r\n    })\r\n    const [selectRef, optionRef, treeRef] = [ref(null), ref(null), ref(null)]\r\n    // 是否为空\r\n    const isEmpty = (val) => {\r\n      for (let key in val) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n    // 树节点点击\r\n    const handleNodeClick = (data) => {\r\n      emit('input', data[props.nodeKey])\r\n      selectRef.value.visible = false\r\n    }\r\n    // 过滤回调\r\n    const filterNode = (value, data) => {\r\n      if (!value) return true\r\n      return data.label.indexOf(value) !== -1\r\n    }\r\n    // 初始化\r\n    const init = (val) => {\r\n      if (val) {\r\n        nextTick(() => {\r\n          treeRef.value?.setCurrentKey(val)\r\n          const node = treeRef.value?.getNode(val)\r\n          optionData.id = val\r\n          optionData.name = node.label\r\n        })\r\n      } else {\r\n        treeRef.value?.setCurrentKey(null)\r\n      }\r\n    }\r\n    // 树的显隐改变\r\n    const visibleChange = (e) => {\r\n      if (e) {\r\n        let selectDom = treeRef.value?.$el.querySelector('.is-current')\r\n        setTimeout(() => {\r\n          selectRef.value?.scrollToOption({ $el: selectDom })\r\n        }, 0)\r\n      }\r\n    }\r\n    // 过滤数据框聚焦\r\n    const inputFocus = () => {\r\n      selectRef.value.visible = true\r\n    }\r\n    // 清除\r\n    const clear = () => {\r\n      emit('input', '')\r\n    }\r\n    // 监听默认值\r\n    watch(() => props.value, (val) => {\r\n      if (!isEmpty(props.data)) {\r\n        init(val)\r\n      }\r\n    }, { immediate: true })\r\n    // 监听数据源\r\n    watch(() => props.data, (val) => {\r\n      if (!isEmpty(val)) {\r\n        init(props.value)\r\n      }\r\n    }, { immediate: true })\r\n    // 监听过滤\r\n    watch(filterText, (val) => {\r\n      treeRef.value?.filter(unref(val))\r\n    })\r\n    return {\r\n      optionData,\r\n      selectRef,\r\n      optionRef,\r\n      treeRef,\r\n      visibleChange,\r\n      clear,\r\n      handleNodeClick,\r\n      filterNode,\r\n      filterText,\r\n      inputFocus\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.option {\r\n  height: auto;\r\n  line-height: 1;\r\n  padding: 0;\r\n  background-color: #fff;\r\n}\r\n\r\n.tree {\r\n  padding: 4px 20px;\r\n  height: auto;\r\n  font-weight: 400;\r\n}\r\n</style>\r\n"]}]}