{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\common\\BossTreeInputTest.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\common\\BossTreeInputTest.vue","mtime":1694505521710},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BossTreeInputTest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"BossTreeInputTest.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\r\n  <div class=\"boss-tree__input\" :style=\"{ 'background-color': backgroundColor }\">\r\n    <div v-if=\"showTitle\" class=\"boss-tree__input_title\">\r\n      <span v-if=\"title.require\" style=\"color: red;\">*</span>\r\n      <span :title=\"title.tip\">{{ title.tip }}:&nbsp;&nbsp;</span>\r\n    </div>\r\n    <el-select\r\n      ref=\"selectRef\"\r\n      class=\"boss-tree__input_select\"\r\n      :size=\"size\"\r\n      :disabled=\"selectDisabled\"\r\n      :popper-class=\"className\"\r\n      :filter-method=\"selectFilter\"\r\n      :value=\"valueTitle\"\r\n      clearable\r\n      filterable\r\n      @visible-change=\"showSelectBox\"\r\n      @click.native=\"selectFocus\"\r\n      @clear=\"clearHandle\"\r\n    >\r\n      <el-option v-loading=\"treeLoading\" :value=\"valueTitle\" :label=\"valueTitle\">\r\n        <el-tree\r\n          ref=\"selectTree\"\r\n          class=\"boss-tree__input_tree\"\r\n          :show-checkbox=\"checkbox\"\r\n          :data=\"data\"\r\n          :props=\"props\"\r\n          :node-key=\"props.value\"\r\n          :empty-text=\"emptyText\"\r\n          :default-expanded-keys=\"defaultExpandedKey\"\r\n          :filter-node-method=\"filterNode\"\r\n          @dblclick.native=\"dblNodeClick\"\r\n        />\r\n      </el-option>\r\n    </el-select>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters, mapMutations } from 'vuex'\r\nexport default {\r\n  name: 'BossTreeinput',\r\n  props: {\r\n    props: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          value: 'id', // ID字段名\r\n          label: 'label', // 显示名称\r\n          children: 'children' // 子级字段名\r\n        }\r\n      }\r\n    },\r\n    value: { // 双向绑定的值 支持对象和##拼接字符串\r\n      type: [Object, String],\r\n      default() {\r\n        return ' ## ## '\r\n      }\r\n    },\r\n    datas: { // 树数据\r\n      type: Array,\r\n      default: () => {\r\n        return []\r\n      }\r\n    },\r\n    size: { // select尺寸 medium/small/mini\r\n      type: String,\r\n      default: ''\r\n    },\r\n    disabled: { // select是否禁用  默认不禁用\r\n      type: Boolean\r\n    },\r\n    showcheckbox: { // 树是否多选，默认不是\r\n      type: Boolean\r\n    },\r\n    isleaf: { // 限制单选只能选底级  多选只显示底级\r\n      type: Boolean\r\n    },\r\n    isServer: { // 是否服务端加载 默认不是\r\n      type: Boolean\r\n    },\r\n    ajaxType: {\r\n      type: String,\r\n      default: 'post'\r\n    },\r\n    serverUri: { // 获取数据访问uri，可自定义[微服务/url]\r\n      type: String,\r\n      default: 'fiscal-config/queryTreeAssistData'\r\n    },\r\n    openFormatLabel: { // 是否启用格式化label\r\n      type: Boolean\r\n    },\r\n    formatter: { // 树显示label格式化\r\n      type: String,\r\n      default: '#code-#name'\r\n    },\r\n    reloaddata: { // 每次点击是否重新加载数据\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    dropdownmethod: { // 单选情况下双击选中事件后触发， 回调\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    aftercheckmethod: { // 多选情况下勾选触发，回调\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    afterloadmethod: { // 数据已经加载完， 回调\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    openQuerySeach: {\r\n      type: Boolean\r\n    },\r\n    queryparams: { // 查询条件获取方法\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    prefix: {\r\n      type: String,\r\n      default() {\r\n        return ''\r\n      }\r\n    },\r\n    openTreeCache: {\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    fromTableTreeInput: { // 调用是否来源于BsTable的renderEdit\r\n      type: Boolean\r\n    },\r\n    openLoading: { // 是否开启loading 默认开启\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    backgroundColor: {\r\n      type: String,\r\n      default() {\r\n        return '#ffffff'\r\n      }\r\n    },\r\n    titleConfig: { // 标题内容配置\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          require: false,\r\n          tip: ''\r\n\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      className: 'boss-tree__input_tree',\r\n      questUri: this.serverUri,\r\n      selectDisabled: this.disabled,\r\n      valueId: '', // 初始值\r\n      lineData: this.value, // 行数据\r\n      valueTitle: '',\r\n      inputval: '', // 记录一下文本框里面输入的值\r\n      emptyText: '',\r\n      defaultExpandedKey: [],\r\n      data: this.datas,\r\n      params: this.queryparams,\r\n      checkbox: this.showcheckbox,\r\n      curNode: { // 当前点击节点\r\n        id: '',\r\n        name: '',\r\n        code: ''\r\n      },\r\n      treePrefix: this.prefix,\r\n      cacheData: null,\r\n      treeLoading: false,\r\n      tempNode: null, // 临时的node值\r\n      useTreeCache: this.openTreeCache,\r\n      title: this.titleConfig\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters('basicInfo', ['cacheTree']),\r\n    treeParams() {\r\n      return {\r\n        ajaxType: this.ajaxType,\r\n        serverUri: this.serverUri,\r\n        params: this.queryparams\r\n      }\r\n    },\r\n    showTitle() {\r\n      return !!this.title.tip\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations('basicInfo', ['setBossTree']),\r\n\r\n    // 判断是否为对象\r\n    isObject(obj) {\r\n      return (Object.prototype.toString.call(obj) === '[object Object]')\r\n    },\r\n\r\n    // 监听value变化， value改变时改变valueId及curNode的值\r\n    initValue() {\r\n      if (this.isObject(this.value)) {\r\n        this.valueId = this.value[`${this.treePrefix}id`]\r\n        this.curNode.id = this.value[`${this.treePrefix}id`]\r\n        this.curNode.code = this.value[`${this.treePrefix}code`]\r\n        this.curNode.name = this.value[`${this.treePrefix}name`]\r\n      } else {\r\n        this.valueId = this.value.split('##')[0]\r\n        this.curNode.id = this.value.split('##')[0]\r\n        this.curNode.code = this.value.split('##')[1]\r\n        this.curNode.name = this.value.split('##')[2]\r\n      }\r\n\r\n      let node = {\r\n        code: (this.curNode.code && this.curNode.code !== ' ') ? this.curNode.code : '',\r\n        name: (this.curNode.name && this.curNode.name !== ' ') ? this.curNode.name : ''\r\n\r\n      }\r\n      if (this.openFormatLabel) {\r\n        let fmt = this.formatter\r\n        let fmtArr = this.formatter.split('-')\r\n        for (let j = 0; j < fmtArr.length; j++) {\r\n          fmt = fmt.replace(\r\n            fmtArr[j],\r\n            node[fmtArr[j].replace('#', '')] || ''\r\n          )\r\n        }\r\n        this.valueTitle = fmt\r\n      } else {\r\n        // 默认显示为code与name拼接\r\n        this.valueTitle = (node.name && node.code) ? node.code + '-' + node.name : ''\r\n      }\r\n\r\n      // console.log(111, this.valueTitle, this.value)\r\n    },\r\n\r\n    // 下拉框输入时触发,自定义搜索方法\r\n    selectFilter(val) {\r\n      this.$refs.selectTree && this.$refs.selectTree.filter(val)\r\n      this.inputval = val\r\n    },\r\n\r\n    // 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏\r\n    filterNode(value, data) {\r\n      // 搜索过滤\r\n      if (!value) return true\r\n      let valArr = value.split(',')\r\n      let isOk = false\r\n      for (let i = 0; i < valArr.length; i++) {\r\n        if (isOk) {\r\n          break\r\n        }\r\n        isOk = data.label.indexOf(valArr[i]) !== -1\r\n      }\r\n      return isOk\r\n    },\r\n\r\n    // 格式化树的label\r\n    formatLabel(data) {\r\n      if (data && data.length !== 0) {\r\n        for (let i = 0; i < data.length; i++) {\r\n          data[i].name = data[i].name || data[i].label\r\n          if (this.openFormatLabel) {\r\n            let fmt = this.formatter\r\n            let fmtArr = this.formatter.split('-')\r\n            for (let j = 0; j < fmtArr.length; j++) {\r\n              fmt = fmt.replace(\r\n                fmtArr[j],\r\n                data[i][fmtArr[j].replace('#', '')] || ''\r\n              )\r\n            }\r\n            data[i]['label'] = fmt\r\n          }\r\n          if (data[i].children) { // 非底级节点\r\n            data[i].isleaf = '0'\r\n            data[i].leaf = false\r\n            this.formatLabel(data[i].children)\r\n          } else { // 底级节点\r\n            data[i].isleaf = '1'\r\n            data[i].leaf = true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    selectFocus() {\r\n      if (this.reloaddata) {\r\n        this.initTree()\r\n      }\r\n      this.$refs.selectTree && this.$refs.selectTree.filter('') // 每次显示数据清除掉之前的过滤\r\n    },\r\n\r\n    setValue(val) {\r\n      this.valueId = val\r\n      if (!val) {\r\n        this.clearHandle()\r\n      }\r\n      this.setTreeData()\r\n    },\r\n\r\n    // 加载完后处理数据\r\n    dealDataAfterLoad() {\r\n      this.$nextTick(() => {\r\n        this.formatLabel(this.data)\r\n        this.setTreeData()\r\n        this.selectFilter('')\r\n        this.$nextTick(() => {\r\n          this.afterloadmethod(this.data)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取缓存数据\r\n    getCacheData() {\r\n      this.data = this.cacheData\r\n      this.dealDataAfterLoad()\r\n    },\r\n\r\n    // 获取请求数据\r\n    async getHttpData() {\r\n      let self = this\r\n      if (this.treeLoading) {\r\n        return\r\n      }\r\n      this.emptyText = ''\r\n      this.openLoading && (this.treeLoading = true)\r\n      await this.$http[this.ajaxType](this.questUri, this.params)\r\n        .then(res => {\r\n          self.data = (res && Array.isArray(res)) ? res : []\r\n          this.treeLoading = false\r\n          if (!Array.isArray(res)) {\r\n            console.log('树数据接口返回问题： ' + res)\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.treeLoading = false\r\n          console.log(err)\r\n        })\r\n      this.emptyText = '暂无数据'\r\n      this.dealDataAfterLoad()\r\n      // 缓存数据\r\n      this.setBossTree({\r\n        params: this.treeParams,\r\n        treeData: this.data\r\n      })\r\n    },\r\n    // 初始化值\r\n    async initTree() {\r\n      if (this.isServer) {\r\n        this.getHttpData()\r\n        // this.cacheData = this.cacheTree(this.treeParams)\r\n        // // console.log(55, this.useTreeCache, this.cacheData)\r\n        // if (this.useTreeCache && this.cacheData) {\r\n        //   // console.log('来自树缓存数据')\r\n        //   this.getCacheData()\r\n        // } else {\r\n        //   // console.log('来自树请求数据')\r\n        //   this.getHttpData()\r\n        // }\r\n      } else {\r\n        if (this.data.length) { // 说明是传入的树数据\r\n          this.dealDataAfterLoad()\r\n        }\r\n      }\r\n    },\r\n\r\n    // 下拉框出现/隐藏时触发 出现则为 true，隐藏则为 false\r\n    showSelectBox(isShow) {\r\n      if (!isShow) {\r\n        if (this.checkbox) {\r\n          let nodes = this.$refs.selectTree.getCheckedNodes()\r\n          let fileternodes = []\r\n          if (this.isleaf) {\r\n            for (let i = 0; i < nodes.length; i++) {\r\n              if (nodes[i].leaf) {\r\n                fileternodes.push(nodes[i])\r\n              }\r\n            }\r\n            nodes = fileternodes\r\n          }\r\n\r\n          if (nodes.length > 0) {\r\n            let allValueId = ''\r\n            let allValueTitle = ''\r\n            for (let i = 0; i < nodes.length; i++) {\r\n              if (i === nodes.length - 1) {\r\n                allValueId += nodes[i][this.props.value] + ''\r\n                allValueTitle += nodes[i][this.props.label] + ''\r\n              } else {\r\n                allValueId += nodes[i][this.props.value] + ','\r\n                allValueTitle += nodes[i][this.props.label] + ','\r\n              }\r\n            }\r\n            this.valueId = allValueId\r\n            this.valueTitle = allValueTitle\r\n          } else {\r\n            this.valueId = ''\r\n            this.valueTitle = ''\r\n          }\r\n          this.afterNodeChecked(nodes, this.valueId)\r\n        } else {\r\n          if (!this.valueId) {\r\n            // 当前不为空\r\n            let node = this.$refs.selectTree.getCurrentNode()\r\n\r\n            if (this.isleaf) {\r\n              // 如果必须底级\r\n              if (node && node.leaf) {\r\n                // 是底级就显示\r\n                this.valueTitle = node[this.props.label]\r\n                this.valueId = node[this.props.value]\r\n              } else {\r\n                // 不是底级就清楚树的选中\r\n                this.$refs.selectTree.setCurrentKey(null)\r\n                this.valueTitle = ''\r\n                this.$refs.selectTree.filter('')\r\n              }\r\n            } else {\r\n              if (node) {\r\n                this.valueTitle = node[this.props.label]\r\n                this.valueId = node[this.props.value]\r\n              } else {\r\n                this.$refs.selectTree.setCurrentKey(null)\r\n                this.valueTitle = ''\r\n                this.$refs.selectTree.filter('')\r\n              }\r\n            }\r\n          } else {\r\n            if (typeof this.valueId === 'string' && !String(this.valueId).includes('initId')) {\r\n              this.$refs.selectTree.setCurrentKey(this.valueId)\r\n            }\r\n          }\r\n        }\r\n        this.emitLineData()\r\n      }\r\n    },\r\n\r\n    afterNodeChecked(nodes, values) {\r\n      if (this.aftercheckmethod) {\r\n        this.aftercheckmethod(nodes, values)\r\n      }\r\n    },\r\n\r\n    // 树单击事件\r\n    handleNodeClick($event, node, curndoe, e) {\r\n      // window.event.stopPropagation()\r\n      // window.event.preventDefault()\r\n\r\n      if (this.isleaf) {\r\n        if (node['leaf']) {\r\n          this.curNode = node\r\n        } else {\r\n          this.throwWarn()\r\n        }\r\n      } else {\r\n        this.curNode = node\r\n      }\r\n      // this.$refs.selectRef.focus()\r\n      // if (this.$parent && this.$parent.$parent && (typeof this.$parent.$parent.clearActived === 'function')) {\r\n      //   this.$parent.$parent.clearActived()\r\n      // }\r\n    },\r\n\r\n    // 非底级节点提示\r\n    throwWarn() {\r\n      this.$message({ message: '非底级节点不能选中!', type: 'warning' })\r\n    },\r\n\r\n    // 树双击事件【只有checkbox为false情况下触发】\r\n    dblNodeClickBak(event) {\r\n      window.event.stopPropagation()\r\n      if (!this.checkbox) {\r\n        if (this.isleaf) {\r\n          if (this.curNode['leaf']) {\r\n            this.valueTitle = this.curNode[this.props.label]\r\n            this.valueId = this.curNode[this.props.value]\r\n            this.defaultExpandedKey = [this.valueId]\r\n            this.$refs.selectRef.blur()\r\n            this.onDropdownMenuClosed(this.curNode, event)\r\n          }\r\n        } else {\r\n          this.valueTitle = this.curNode[this.props.label]\r\n          this.valueId = this.curNode[this.props.value]\r\n          this.defaultExpandedKey = [this.valueId]\r\n          this.$refs.selectRef.blur()\r\n          this.onDropdownMenuClosed(this.curNode, event)\r\n        }\r\n\r\n        this.inputval = ''\r\n        // 值修改监控事件\r\n        this.emitLineData()\r\n      }\r\n    },\r\n\r\n    // 树双击事件【只有checkbox为false情况下触发】\r\n    dblNodeClick(event) {\r\n      window.event.stopPropagation()\r\n      if (!this.checkbox) {\r\n        const node = this.$refs.selectTree.getCurrentNode()\r\n        if (this.isleaf && !node['leaf']) {\r\n          this.throwWarn()\r\n          return\r\n        }\r\n\r\n        this.$refs.selectRef.blur()\r\n        this.onDropdownMenuClosed(node, event)\r\n        this.inputval = ''\r\n        // 值修改监控事件\r\n        this.emitLineData()\r\n      }\r\n    },\r\n\r\n    // 双击选中后触发\r\n    onDropdownMenuClosed(data, event) {\r\n      this.dropdownmethod(data, event)\r\n    },\r\n\r\n    // 清除选中\r\n    clearHandle() {\r\n      this.valueTitle = ''\r\n      this.valueId = null\r\n      this.inputval = ''\r\n      this.defaultExpandedKey = []\r\n      if (this.checkbox) {\r\n        this.$refs.selectTree.setCheckedKeys([])\r\n      } else {\r\n        this.$refs.selectTree.setCurrentKey(null)\r\n      }\r\n      this.emitClearLineData()\r\n    },\r\n\r\n    dealCss() {\r\n      var uldiv = this.$el.getElementsByClassName(\r\n        'el-select-dropdown__wrap el-scrollbar__wrap'\r\n      )\r\n      var ul = this.$el.getElementsByClassName(\r\n        'el-scrollbar__view el-select-dropdown__list'\r\n      )\r\n      if (uldiv.length) {\r\n        uldiv[0].style.marginBottom = '0px'\r\n        uldiv[0].style.marginRight = '0px'\r\n        uldiv[0].style.overflow = 'auto'\r\n      }\r\n      if (ul.length) {\r\n        ul[0].style.padding = 0\r\n      }\r\n    },\r\n\r\n    // 设置树数据【input显示  默认选中  默认展开】\r\n    setTreeData() {\r\n      if (!this.checkbox) {\r\n        if (this.valueId && !String(this.valueId).includes('initId')) {\r\n          let node = this.$refs.selectTree && this.$refs.selectTree.getNode(this.valueId)\r\n          this.valueTitle = (node && node.data[this.props.label]) || ''// 初始化显示\r\n          this.$refs.selectTree && this.$refs.selectTree.setCurrentKey(this.valueId) // 设置默认选中\r\n          this.defaultExpandedKey = [this.valueId] // 设置默认展开\r\n        }\r\n      } else {\r\n        if (this.valueId) {\r\n          let valArr = this.valueId.split(',')\r\n          this.valueTitle = ''\r\n          this.defaultExpandedKey = []\r\n          for (let i = 0; i < valArr.length; i++) {\r\n            if (i === valArr.length - 1) {\r\n              if (this.$refs.selectTree.getNode(valArr[i])) {\r\n                this.valueTitle += this.$refs.selectTree.getNode(valArr[i]).data[this.props.label] // 初始化显示\r\n                this.defaultExpandedKey.push(valArr[i])\r\n              }\r\n            } else {\r\n              if (this.$refs.selectTree.getNode(valArr[i])) {\r\n                this.valueTitle +=\r\n                  this.$refs.selectTree.getNode(valArr[i]).data[this.props.label] + ',' // 初始化显示\r\n                this.defaultExpandedKey.push(valArr[i])\r\n              }\r\n            }\r\n            this.$refs.selectTree.setCheckedKeys(this.defaultExpandedKey)\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    // select  双击  清空，影响了lineData改变\r\n    emitLineData() {\r\n      const curVal = this.getData()\r\n      if (this.isObject(this.value)) {\r\n        this.lineData[`${this.treePrefix}id`] = curVal.id\r\n        this.lineData[`${this.treePrefix}code`] = curVal.code\r\n        this.lineData[`${this.treePrefix}name`] = curVal.name\r\n      } else {\r\n        this.lineData = `${curVal.id}##${curVal.code}##${curVal.name}`\r\n      }\r\n      // console.log(77, this.lineData)\r\n      this.$emit('input', this.lineData)\r\n    },\r\n\r\n    emitClearLineData() {\r\n      let timeStamp = +new Date()\r\n      if (this.isObject(this.value)) {\r\n        this.lineData[`${this.treePrefix}id`] = 'initId' + timeStamp\r\n        this.lineData[`${this.treePrefix}code`] = ' '\r\n        this.lineData[`${this.treePrefix}name`] = ' '\r\n      } else {\r\n        this.lineData = `initId${timeStamp}## ## `\r\n      }\r\n\r\n      // console.log(78, this.lineData)\r\n      this.$emit('input', this.lineData)\r\n    },\r\n\r\n    splitLineData() {\r\n      let lineDataObj = Object.create(null)\r\n      if (this.isObject(this.value)) {\r\n        lineDataObj.id = this.lineData[`${this.treePrefix}id`]\r\n        lineDataObj.code = this.lineData[`${this.treePrefix}code`]\r\n        lineDataObj.name = this.lineData[`${this.treePrefix}name`]\r\n      } else {\r\n        [lineDataObj.id, lineDataObj.code, lineDataObj.name] = this.lineData.split('##')\r\n      }\r\n\r\n      return lineDataObj\r\n    },\r\n\r\n    //= =============================给调用者暴露的方法==============================//\r\n\r\n    // 返回select对象和树对象\r\n    treeInputOptionFn() {\r\n      return {\r\n        selectRef: this.$refs.selectRef,\r\n        selectTree: this.$refs.selectTree\r\n      }\r\n    },\r\n\r\n    // 刷新树\r\n    refreshTree() {\r\n      this.initTree()\r\n    },\r\n\r\n    // 获取树数据\r\n    getData() {\r\n      let rdata\r\n      let timeStamp = +new Date()\r\n      const defaultObj = {\r\n        id: 'initId' + timeStamp,\r\n        code: ' ',\r\n        name: ' '\r\n      }\r\n      if (this.checkbox) {\r\n        rdata = this.$refs.selectTree.getCheckedNodes()\r\n      } else {\r\n        // console.log(44, this.$refs.selectTree.getCurrentNode())\r\n        rdata = this.$refs.selectTree.getCurrentNode() || this.splitLineData()\r\n      }\r\n      return rdata || defaultObj\r\n    }\r\n\r\n    //= =============================给调用者暴露的方法==============================//\r\n\r\n  },\r\n  mounted() {\r\n    this.initTree()\r\n    this.initValue()\r\n    this.$nextTick(() => {\r\n      this.dealCss()\r\n    })\r\n  },\r\n  created() {\r\n\r\n  },\r\n  watch: {\r\n    showcheckbox(val) {\r\n      this.checkbox = val\r\n    },\r\n    disabled(val) {\r\n      this.selectDisabled = val\r\n    },\r\n    prefix(val) {\r\n      this.treePrefix = val\r\n    },\r\n    openTreeCache(val) {\r\n      this.useTreeCache = val\r\n    },\r\n    questUri(val) {\r\n      this.questUri = val\r\n    },\r\n    datas: { // 表格配置监听\r\n      handler(newvalue, oldValue) {\r\n        this.data = newvalue\r\n      },\r\n      immediate: true\r\n    },\r\n    titleConfig: {\r\n      handler(newValue, oldValue) {\r\n        this.title = newValue\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    queryparams: {\r\n      handler(newValue, oldValue) {\r\n        const flag = JSON.stringify(newValue) === JSON.stringify(oldValue)\r\n        if (!flag) {\r\n          this.params = newValue\r\n        }\r\n\r\n        if (this.openQuerySeach && !flag && oldValue) {\r\n          this.initTree()\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    value: {\r\n      handler(newValue, oldValue) {\r\n        const val = this.isObject(this.value) ? this.value[`${this.treePrefix}id`] : this.value.split('##')[0]\r\n        if (this.value && val) {\r\n          this.initValue()\r\n          this.lineData = this.value\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    // curNode: {\r\n    //   handler() { // 解决table加载树时，双击树上节点无法触击树上双选导致最新数据无法回显问题\r\n    //     if (this.fromTableTreeInput && this.curNode.id && !String(this.curNode.id).includes('initId') && this.curNode.code && this.curNode.name) {\r\n    //       if (this.isObject(this.value)) {\r\n    //         this.lineData[`${this.treePrefix}id`] = this.curNode.id\r\n    //         this.lineData[`${this.treePrefix}code`] = this.curNode.code\r\n    //         this.lineData[`${this.treePrefix}name`] = this.curNode.name\r\n    //       } else {\r\n    //         this.lineData = `${this.curNode.id}##${this.curNode.code}##${this.curNode.name}`\r\n    //       }\r\n\r\n    //       this.$emit('input', this.lineData)\r\n    //       // console.log(88, this.lineData)\r\n    //     }\r\n    //   },\r\n    //   deep: true,\r\n    //   immediate: true\r\n    // },\r\n    valueTitle(val) { // 解决from加载树时，只有一个id没有code和name时需要回显名称问题\r\n      let data = Object.create(null)\r\n      if (this.isObject(this.value)) {\r\n        data = this.lineData\r\n      } else {\r\n        const arr = this.lineData.split('##')\r\n        data[this.treePrefix + 'id'] = arr[0]\r\n        data[this.treePrefix + 'code'] = arr[1]\r\n        data[this.treePrefix + 'name'] = arr[2]\r\n      }\r\n\r\n      let _id = data[this.treePrefix + 'id'].trim()\r\n      let _code = data[this.treePrefix + 'code'].trim()\r\n      let _name = data[this.treePrefix + 'name'].trim()\r\n      if (_id && !String(_id).includes('initId') && !_code && !_name) {\r\n        let timeStamp = +new Date()\r\n        const defaultObj = {\r\n          id: 'initId' + timeStamp,\r\n          code: ' ',\r\n          name: ' '\r\n        }\r\n        const curVal = this.$refs.selectTree.getCurrentNode() || defaultObj\r\n        if (this.isObject(this.value)) {\r\n          this.lineData[`${this.treePrefix}id`] = curVal.id\r\n          this.lineData[`${this.treePrefix}code`] = curVal.code\r\n          this.lineData[`${this.treePrefix}name`] = curVal.name\r\n        } else {\r\n          this.lineData = `${curVal.id}##${curVal.code}##${curVal.name}`\r\n        }\r\n        this.$emit('input', this.lineData)\r\n        // console.log(99, this.lineData)\r\n      }\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scope>\r\n  .boss-tree__input{\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    .boss-tree__input_title{\r\n      line-height: 40px;\r\n      flex-shrink: 0;\r\n      max-width: 320px;\r\n      text-align: right;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      /* padding-right: .8em; */\r\n      font-size: 14px;\r\n      vertical-align: middle;\r\n      display: inline-block;\r\n    }\r\n    .el-select{\r\n      display:block;\r\n      height: 40px;\r\n      display: inline-block;\r\n      position: relative;\r\n      -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n      flex-grow: 1;\r\n    }\r\n  }\r\n  .boss-tree__input_tree{\r\n    min-height: 200px;\r\n  }\r\n</style>\r\n"]}]}