{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\bossTreeScollLoad\\TreeScollLoad.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\bossTreeScollLoad\\TreeScollLoad.vue","mtime":1695716044957},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\css-loader\\dist\\cjs.js","mtime":1696752946978},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLm5vX21vcmV7DQogIC8vIGNvbG9yOiNmOTkNCn0NCi50cmVlX3Njb2xsTG9hZHsNCiAgaGVpZ2h0OiAxMDAlOw0KICB3aWR0aDogMTAwJTsNCiAgYmFja2dyb3VuZDojZmZmOw0KICAudHJlZV9zY29sbExvYWRfX2Jhc2VfX2lucHV0ew0KICAgIGhlaWdodDogNDBweDsNCiAgICB3aWR0aDogY2FsYygxMDAlIC0gMzBweCk7DQogICAgLy8gbWFyZ2luOiAxMHB4IDE1cHg7DQogIH0NCiAgLnRyZWVfc2NvbGxMb2FkX19iYXNlX190cmVlew0KICAgIGhlaWdodDpjYWxjKDEwMCUgLSA0MHB4KTsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBvdmVyZmxvdzogYXV0bzsNCiAgICAuZWwtdHJlZSB7DQogICAgICBtaW4td2lkdGg6IGNhbGMoMTAwJSAtIDIwcHgpOw0KICAgICAgZm9udC1zaXplOiAxNHB4Ow0KICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQogIH0NCn0NCg=="},{"version":3,"sources":["TreeScollLoad.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeScollLoad.vue","sourceRoot":"src/components/bossTreeScollLoad","sourcesContent":["<!--树： 滚动加载-->\r\n<template>\r\n  <div class=\"tree_scollLoad\">\r\n    <div v-if=\"isShowInput\" class=\"tree_scollLoad__base__input\">\r\n      <el-input v-model=\"filterText\" :size=\"size\" placeholder=\"输入关键字进行过滤\" @input=\"searchTreeList(filterText)\" />\r\n    </div>\r\n    <div v-loading=\"treeLoading\" class=\"tree_scollLoad__base__tree\">\r\n      <el-tree\r\n        ref=\"treeLeft\"\r\n        :style=\"eltreestyle\"\r\n        :empty-text=\"emptyTip\"\r\n        :node-key=\"treeid\"\r\n        :data=\"data\"\r\n        :show-checkbox=\"checkbox\"\r\n        :highlight-current=\"highlightCurrent\"\r\n        :default-expanded-keys=\"expandedkeys\"\r\n        :default-checked-keys=\"checkedkeys\"\r\n        :accordion=\"accordion\"\r\n        :filter-node-method=\"filterNode\"\r\n        @check=\"nodecheckmethod\"\r\n        @node-click=\"nodeClickmethod\"\r\n        @check-change=\"checkChange\"\r\n      />\r\n      <InfiniteLoading ref=\"infiniteLoading\" spinner=\"spiral\" @infinite=\"infiniteHandler\">\r\n        <p slot=\"spinner\">加载中...</p>\r\n        <p slot=\"no-results\">{{ noResults }}</p>\r\n        <p slot=\"no-more\" class=\"no_more\">{{ noMore }}</p>\r\n      </InfiniteLoading>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import api from '@/api/components/test/tree/treeScroll'\r\nimport { mapGetters, mapMutations } from 'vuex'\r\nimport InfiniteLoading from 'vue-infinite-loading'\r\nexport default {\r\n  name: 'TreeScollLoad',\r\n  components: {\r\n    InfiniteLoading\r\n  },\r\n  props: {\r\n    globalConfig: {\r\n      // 全局配置\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          openLoading: false,\r\n          emptyText: '暂无数据',\r\n          isNeedRoot: false,\r\n          rootname: '全部',\r\n          isShowInput: true,\r\n          isCheckbox: false\r\n        }\r\n      }\r\n    },\r\n    queryparams: {\r\n      // 查询条件获取方法\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          limit: 40,\r\n          offset: 0,\r\n          province: this.$store.state.userInfo.province,\r\n          strReg: ''\r\n        }\r\n      }\r\n    },\r\n    server: {\r\n      // 查询条件获取方法\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          isServer: true,\r\n          ajaxType: 'get',\r\n          // serverUri: 'plan-service/queryTreeAssistData'\r\n          serverUri: 'mp-b-user-service/v2/users/fuzzy/page'\r\n        }\r\n      }\r\n    },\r\n    clickmethod: { // 节点被点击时的回调\r\n      type: Function,\r\n      default: function(obj, node, vess) {}\r\n    },\r\n    checkChange: { // 节点选中状态发生变化时的回调\r\n      type: Function,\r\n      default: function(obj, isChecked, ischildChecked) {}\r\n    },\r\n    nodecheckmethod: { // 当复选框被点击的时候触发\r\n      type: Function,\r\n      default: function(obj, checksObj) {}\r\n    },\r\n    afterloadmethod: { // 数据已经加载完\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    highlightCurrent: { // 选中节点高亮\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    eltreestyle: {\r\n      type: [Object, String],\r\n      default: () => ({})\r\n    },\r\n    treeid: { // 树node key同一页面要保持唯一，否则报错，如页面只有一个树可以不设置\r\n      type: String,\r\n      default: 'id'\r\n    },\r\n    noResults: {\r\n      type: String,\r\n      default: '已经到底了'\r\n    },\r\n    noMore: {\r\n      type: String,\r\n      default: '没有更多了'\r\n    },\r\n    size: { // 输入框尺寸 medium/small/mini\r\n      type: String,\r\n      default: ''\r\n    },\r\n    accordion: { // 是否每次只打开一个同级树节点展开\r\n      type: Boolean\r\n    },\r\n    defaultexpandedkeys: {\r\n      type: Array,\r\n      default() {\r\n        return ['root']\r\n      }\r\n    },\r\n    defaultcheckedkeys: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      treeLoading: false,\r\n      cacheData: null,\r\n      emptyTip: '',\r\n      data: [],\r\n      filterText: '',\r\n      params: this.queryparams,\r\n      isShowInput: this.globalConfig.isShowInput,\r\n      noResult: this.noResults,\r\n      pageNum: 1,\r\n      checkbox: this.globalConfig.isCheckbox,\r\n      expandedkeys: [...this.defaultexpandedkeys],\r\n      checkedkeys: [...this.defaultcheckedkeys]\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations('basicInfo', ['setBossTree']),\r\n    nodeClickmethod(obj, node, vess) {\r\n      this.$parent.$parent.$parent.$parent.treeNodeClick(obj, node, vess)\r\n    },\r\n    // 树内容过滤\r\n    filterNode(value, data) {\r\n      // 搜索过滤\r\n      if (!value) return true\r\n      return data.label.indexOf(value) !== -1\r\n    },\r\n    // 格式化树形结构\r\n    treeFormat(treeArray) {\r\n      treeArray.forEach(item => {\r\n        this.$set(item, 'children', [])\r\n        this.$set(item, 'id', item.guid)\r\n        this.$set(item, 'label', item.code + '-' + item.name)\r\n      })\r\n      return treeArray\r\n    },\r\n    // 左侧树模糊搜索\r\n    searchTreeList(val) {\r\n      let self = this\r\n      this.params = {\r\n        limit: 40,\r\n        offset: 0,\r\n        province: this.$store.state.userInfo.province,\r\n        fiscalYear: this.$store.state.userInfo.fiscalYear,\r\n        strReg: val || ''\r\n      }\r\n      this.data = []\r\n      this.$http.get('mp-b-user-service/v2/users/fuzzy/page', this.params).then(res => {\r\n        let result = res\r\n        if (result?.data?.length) {\r\n          this.data = this.treeFormat(result.data)\r\n          console.log('self.data', self.data)\r\n          this.$parent.$parent.$parent.$parent.onUserTreeLoadFinish(this.data)\r\n        } else if (typeof res === 'string') {\r\n          this.data = JSON.parse(result).data || []\r\n          this.data.length && (this.data = this.treeFormat(this.data))\r\n          this.$parent.$parent.$parent.$parent.onUserTreeLoadFinish(this.data)\r\n        }\r\n      })\r\n    },\r\n    async infiniteHandler($state) {\r\n      this.treeLoading = true\r\n      let self = this\r\n      await this.$http[this.server.ajaxType](this.server.serverUri, this.params).then(res => {\r\n        self.treeLoading = false\r\n        let result = res\r\n        if (typeof res === 'string') {\r\n          this.data = JSON.parse(result).data || []\r\n          this.data.length && (this.data = this.treeFormat(this.data))\r\n          this.$parent.$parent.$parent.$parent.onUserTreeLoadFinish(this.data)\r\n          return\r\n        }\r\n        if (result.rscode === '100000') {\r\n          if (result?.data.length) {\r\n            self.data = self.data.concat(this.treeFormat(result.data))\r\n            self.params.offset += 40\r\n            self.$parent.$parent.$parent.$parent.onUserTreeLoadFinish(self.data)\r\n            $state.loaded()\r\n          } else {\r\n            $state.complete()\r\n          }\r\n        } else {\r\n          $state.complete()\r\n        }\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n    // 获取请求数据\r\n    // async getHttpData() {\r\n    //   let self = this\r\n    //   if (this.treeLoading) {\r\n    //     return\r\n    //   }\r\n    //   this.emptyTip = ''\r\n    //   this.openLoading && (this.treeLoading = true)\r\n    //   self.data = []\r\n    //   await this.$http[this.server.ajaxType](this.server.serverUri, this.params).then(res => {\r\n    //     self.data = (res && Array.isArray(res)) ? res : ((res.rscode === '100000' || res.rscode === '200') ? res.data : [])\r\n    //     if (self.isNeedRoot) {\r\n    //       const result = [\r\n    //         {\r\n    //           id: 'root',\r\n    //           label: self.rootname,\r\n    //           code: 'root',\r\n    //           isleaf: '0',\r\n    //           children: self.data\r\n    //         }\r\n    //       ]\r\n    //       self.data = result\r\n    //     }\r\n\r\n    //     // 关闭模态框\r\n    //     self.treeLoading = false\r\n\r\n    //     // 缓存数据\r\n    //     self.setBossTree({\r\n    //       params: self.treeParams,\r\n    //       treeData: self.data\r\n    //     })\r\n\r\n    //     this.emptyTip = this.emptyTxt\r\n    //     // 树加载完，回调数据\r\n    //     self.$nextTick(() => {\r\n    //       self.afterloadmethod(self.data)\r\n    //     })\r\n    //   }).catch(err => {\r\n    //     console.log(err)\r\n    //   })\r\n    // },\r\n    // // 获取缓存数据\r\n    // getCacheData() {\r\n    //   this.data = this.cacheData\r\n    //   this.$nextTick(() => {\r\n    //     this.afterloadmethod(this.data)\r\n    //   })\r\n    // },\r\n    // // 加载树\r\n    // initTree() { // 使用异步调用，返回结果后再执行\r\n    //   if (this.isServer) {\r\n    //     // this.getHttpData()\r\n    //     this.cacheData = this.cacheTree(this.treeParams)\r\n    //     // console.log(55, this.useTreeCache, this.cacheData)\r\n    //     if (this.useTreeCache && this.cacheData) {\r\n    //       // console.log('来自树缓存数据')\r\n    //       this.getCacheData()\r\n    //     } else {\r\n    //       // console.log('来自树请求数据')\r\n    //       this.getHttpData()\r\n    //     }\r\n    //   }\r\n    // }\r\n  },\r\n  computed: {\r\n    ...mapGetters('basicInfo', ['cacheTree']),\r\n    treeParams() {\r\n      return {\r\n        ajaxType: this.ajaxType,\r\n        serverUri: this.serverUri,\r\n        params: this.queryparams\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // this.initTree()\r\n  },\r\n  mounted() {\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.no_more{\r\n  // color:#f99\r\n}\r\n.tree_scollLoad{\r\n  height: 100%;\r\n  width: 100%;\r\n  background:#fff;\r\n  .tree_scollLoad__base__input{\r\n    height: 40px;\r\n    width: calc(100% - 30px);\r\n    // margin: 10px 15px;\r\n  }\r\n  .tree_scollLoad__base__tree{\r\n    height:calc(100% - 40px);\r\n    width: 100%;\r\n    overflow: auto;\r\n    .el-tree {\r\n      min-width: calc(100% - 20px);\r\n      font-size: 14px;\r\n      display: inline-block;\r\n      padding: 10px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}