{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\basicInfoTable\\BasicGradeInfoTable.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\basicInfoTable\\BasicGradeInfoTable.vue","mtime":1694505521695},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYmFzaWMtaW5mby10YWJsZXsNCiAudnhlLWdyaWQgew0KICAgLnZ4ZS10YWJsZS5ib3JkZXItLWRlZmF1bHQgLnZ4ZS10YWJsZS0taGVhZGVyLXdyYXBwZXIsDQogICAudnhlLXRhYmxlLmJvcmRlci0tZnVsbCAudnhlLXRhYmxlLS1oZWFkZXItd3JhcHBlciwNCiAgIC52eGUtdGFibGUuYm9yZGVyLS1vdXRlciAudnhlLXRhYmxlLS1oZWFkZXItd3JhcHBlcnsNCiAgICAgIGJhY2tncm91bmQ6IHZhcigtLWhpZ2h0bGlnaHQtY29sb3IpOw0KICAgfQ0KICAgLnZ4ZS10YWJsZSAudnhlLWJvZHktLXJvdyB7DQogICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmOw0KICAgICAmLnJvdy0tc3RyaXBlIHsNCiAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS16ZWJyYS1jb2xvcik7DQogICAgIH0NCiAgICAgIC52eGUtYm9keS0tY29sdW1uew0KICAgICAgICBoZWlnaHQ6MzRweDsNCiAgICAgIH0NCiAgICAgIC5yZXF1aXJlZHsNCiAgICAgICAgY29sb3I6ICNmMDA7DQogICAgICAgIGZvbnQtc2l6ZTogMThweDsNCiAgICAgICAgcGFkZGluZzogMCAwIDAgNXB4Ow0KICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgICAgIHRvcDogM3B4Ow0KICAgICAgfQ0KICAgICAudnhlLWJvZHktLWNvbHVtbiAqIHsNCiAgICAgICBib3JkZXI6IG5vbmU7DQogICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7DQogICAgICAgJi5pcy0tZGlzYWJsZWQgew0KICAgICAgICAgYmFja2dyb3VuZDogI2Y3ZmFmZDsNCiAgICAgICB9DQogICAgIH0NCiAgICB9DQogIH0NCiB9DQouYmFzaWMtaW5mby10YWJsZS5kZXRhaWx7DQogIC52eGUtZ3JpZCAudnhlLXRhYmxlIC52eGUtYm9keS0tcm93IHsNCiAgICAucmVxdWlyZWR7DQogICAgIGRpc3BsYXk6bm9uZTsNCiAgICB9DQogIH0NCn0NCi52eGUtc2VsZWN0LW9wdGlvbnsNCiAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQo="},{"version":3,"sources":["BasicGradeInfoTable.vue"],"names":[],"mappingsyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BasicGradeInfoTable.vue","sourceRoot":"src/components/basicInfoTable","sourcesContent":["<!--  基础分级信息表  Author:Titans@2396757591@qq.com -->\r\n<template>\r\n  <div :class=\"mode\" class=\"basic-info-table\" :style=\"{ height: tableRenderData.length * 34 + 40 + 'px' }\">\r\n    <BsTable\r\n      :id=\"id\"\r\n      ref=\"basicInfoTable\"\r\n      :auto-resize=\"false\"\r\n      :table-global-config=\"tableGlobalConfig\"\r\n      :footer-config=\"{ showFooter: false }\"\r\n      :keyboard-config=\"{ isArrow: false }\"\r\n      :table-config=\"tableConfig\"\r\n      :table-columns-config=\"tableRenderColumnsConfig\"\r\n      :table-data=\"tableRenderData\"\r\n      :expand-config=\"false\"\r\n      :tree-config=\"false\"\r\n      :edit-config=\"mode !== 'detail' ? editConfig : false\"\r\n      :toolbar-config=\"toolbarConfig\"\r\n      :edit-rules=\"renderEditRules\"\r\n      :pager-config=\"false\"\r\n      :default-money-unit=\"defaultMoneyUnit\"\r\n      :calculate-constraint-config=\"calculateConstraintConfigIn\"\r\n      @editClosed=\"editClosed\"\r\n      @editActived=\"editActived\"\r\n      @cellClick=\"cellClick\"\r\n      @cellOptionCallBack=\"cellOptionCallBack\"\r\n    >\r\n      <template v-slot:titleRequired=\"{ row, column }\">\r\n        <span> <span calss=\"fn-inline\">{{ row[column.property] }}</span><span class=\"required\">{{ row.required ? '*' : '' }}</span></span>\r\n      </template>\r\n    </bsTable>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'BasicGradeInforTable',\r\n  components: {},\r\n  props: {\r\n    id: { // 表格id\r\n      type: String,\r\n      default () {\r\n        return 'gradeInfor'\r\n      }\r\n    },\r\n    defaultMoneyUnit: {\r\n      type: Number,\r\n      default () {\r\n        return 1\r\n      }\r\n    },\r\n    itemsConfig: { // 项配置，可以是嵌套数据结构\r\n      type: [Array],\r\n      default() {\r\n        return [\r\n          {\r\n            title: '基础信息',\r\n            children: [\r\n              {\r\n                title: '姓名',\r\n                field: 'name',\r\n                width: 150,\r\n                align: 'center',\r\n                filters: false,\r\n                editRender: {\r\n                  name: '$vxeInput',\r\n                  defaultValue: '默认的名字',\r\n                  props: {\r\n                    type: 'string',\r\n                    redonly: true,\r\n                    placeholder: '请输入姓名'\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                title: '年龄',\r\n                field: 'age',\r\n                sortable: true,\r\n                width: 120,\r\n                filters: false,\r\n                align: 'center',\r\n                combinedType: ['average'],\r\n                editRender: {\r\n                  name: '$vxeInput',\r\n                  defaultValue: 1,\r\n                  props: {\r\n                    min: 0,\r\n                    type: 'number',\r\n                    placeholder: '抢输入年龄',\r\n                    redonly: true\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                title: '类别',\r\n                field: 'category',\r\n                width: 150,\r\n                editRender: {\r\n                  name: '$vxeSelect',\r\n                  defaultValue: '前端',\r\n                  options: [\r\n                    { value: '前端', label: '前端' },\r\n                    { value: '后端', label: '后端' },\r\n                    { value: '运维', label: '测试' },\r\n                    { value: '实施', label: '实施' },\r\n                    { value: '测试', label: '测试' }\r\n                  ],\r\n                  props: {\r\n                    multiple: true,\r\n                    placeholder: '请输入角色'\r\n                  }\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            title: '收入统计',\r\n            children: [\r\n              {\r\n                title: '收入',\r\n                field: 'income',\r\n                fieldType: 'money',\r\n                formula: '{age}>=18?Math.pow({age},4)/2:0',\r\n                width: 150,\r\n                align: 'right',\r\n                cellRender: {\r\n                  name: '$vxeMoney',\r\n                  defaultValue: 0,\r\n                  props: {\r\n                    min: -1111111111,\r\n                    type: 'float'\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                title: '扣除',\r\n                field: 'deduction',\r\n                width: 150,\r\n                align: 'right',\r\n                editRender: {\r\n                  name: '$vxeMoney',\r\n                  defaultValue: 0,\r\n                  props: {\r\n                    min: -1111111111,\r\n                    type: 'float'\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                title: '奖金',\r\n                width: 150,\r\n                align: 'right',\r\n                field: 'bonus',\r\n                editRender: {\r\n                  name: '$vxeMoney',\r\n                  defaultValue: 0,\r\n                  props: {\r\n                    min: -1111111111,\r\n                    type: 'float'\r\n                  }\r\n                }\r\n              },\r\n              {\r\n                title: '实际收入',\r\n                width: 180,\r\n                align: 'right',\r\n                field: 'actualIncome',\r\n                editRender: {\r\n                  name: '$vxeMoney',\r\n                  defaultValue: 0,\r\n                  props: {\r\n                    min: -1111111111,\r\n                    type: 'float'\r\n                  }\r\n                }\r\n              }]\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    mode: { // 模式\r\n      type: [String],\r\n      default() {\r\n        return 'edit' // edit(一直保持编辑状态),detail(展示状态),activeEdit(激活编辑)\r\n      }\r\n    },\r\n    editConfig: { // 编辑配置\r\n      type: [Object],\r\n      default() {\r\n        return {\r\n        }\r\n      }\r\n    },\r\n    editRules: { // 校验规则\r\n      type: [Object],\r\n      default() {\r\n        return {\r\n          name: [\r\n            {\r\n              required: true,\r\n              type: 'string',\r\n              // message: '名称长度需在 3 到 5 个字符',\r\n              message() {\r\n                return '名称长度需在 2 到 20 个字符'\r\n              },\r\n              min: 2,\r\n              max: 20,\r\n              pattern: /^[a-zA-Z0-9_\\s\\u4e00-\\u9fa5]+$/i,\r\n              trigger: 'change'\r\n            },\r\n            {\r\n              required: true,\r\n              type: 'string',\r\n              message: '请输入昵称',\r\n              trigger: 'change',\r\n              // eslint-disable-next-line no-useless-escape\r\n              // pattern: /^[a-zA-Z0-9_\\(\\)\\{\\}·.、\\[\\]\\（\\）\\【\\】\\u4e00-\\u9fa5]+$/i\r\n              // pattern: /^[a-zA-Z0-9_\\(\\)\\{\\}·.、\\[\\]\\（\\）\\【\\】\\u4e00-\\u9fa5]+$/i\r\n              validator({ cellValue, rule, rules, row, rowIndex, column, columnIndex, $table }) {\r\n                return new Promise((resolve, reject) => {\r\n                  let result = false\r\n                  if (cellValue.length >= 10) {\r\n                    // eslint-disable-next-line no-useless-escape\r\n                    result = /^[a-zA-Z0-9_\\(\\)\\{\\}·.、\\[\\]\\（\\）\\【\\】\\u4e00-\\u9fa5]+$/i.test(cellValue)\r\n                  } else {\r\n                    result = false\r\n                  }\r\n                  if (result) {\r\n                    resolve(true)\r\n                  } else {\r\n                    reject(new Error(\r\n                      '名称必须不能有特殊字符，且字数数不能少于10个！'\r\n                    ))\r\n                  }\r\n                })\r\n              }\r\n            }\r\n          ],\r\n          sex: [\r\n            {\r\n              required: true,\r\n              message: '请选择性别',\r\n              trigger: 'change'\r\n            }\r\n          ],\r\n          age: [\r\n            {\r\n              required: true,\r\n              message: '请输入年龄',\r\n              min: 1,\r\n              max: 150,\r\n              type: 'number',\r\n              trigger: 'change'\r\n            }\r\n          ],\r\n          income: [\r\n            {\r\n              required: true,\r\n              message: '请输入收入',\r\n              trigger: 'change'\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    renderColumnsConfig: { // 实际渲染列\r\n      type: Array,\r\n      default() {\r\n        return [\r\n          { // 序号\r\n            title: '序号',\r\n            type: 'seq',\r\n            width: 80,\r\n            align: 'center',\r\n            className: 'table-sep',\r\n            sortable: false\r\n          },\r\n          { // 序号\r\n            title: '基本信息名称',\r\n            align: 'left',\r\n            className: 'table-title',\r\n            field: 'renderTitle',\r\n            sortable: false,\r\n            cellRender: {\r\n              name: '$vxeInput',\r\n              props: {\r\n                type: 'text'\r\n              }\r\n            }\r\n          },\r\n          // {\r\n          //   title: '基本信息名称',\r\n          //   className: 'table-title',\r\n          //   align: 'left',\r\n          //   titleAlign: 'left',\r\n          //   field: 'renderTitle',\r\n          //   slots: {\r\n          //     // default: 'expandContent',\r\n          //     // content: 'expand'\r\n          //     // const { $rowIndex, $seq, $table, column, columnIndex, fixed, level, row, rowIndex, seq, type } = obj\r\n          //     default(obj, h, fixedType) {\r\n          //       const { $table } = obj\r\n          //       let $scopedSlots = $table.$parent.$parent.$scopedSlots\r\n          //       if ($scopedSlots.titleRequired) {\r\n          //         return $scopedSlots.titleRequired(obj)\r\n          //       } else {\r\n          //         return obj.row[obj.column.property]\r\n          //       }\r\n          //     }\r\n          //   }\r\n          //   // <template v-if=\"ifRenderExpandContentTable\" v-slot:expandContent=\"{ row, $rowIndex, rowIndex ,fixed }\">\r\n          //   //  <vue :ref=\"'expandContentTableRef' + (fixed ? fixed + rowIndex : rowIndex)\"></vue>\r\n          //   // </template>\r\n          // },\r\n          { // 序号\r\n            title: '基本信息值',\r\n            align: 'left',\r\n            titleAlign: 'left',\r\n            className: 'table-value',\r\n            field: 'renderValue',\r\n            sortable: false,\r\n            editRender: {\r\n              name: '$vxeBasicInfoRenderer',\r\n              props: {\r\n                type: 'text'\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    data: { // 数据包\r\n      type: [Object],\r\n      default() {\r\n        return {\r\n          actualIncome: '52000',\r\n          age: '27',\r\n          bonus: '10000',\r\n          category: '前端',\r\n          deduction: '3000',\r\n          income: 50000,\r\n          name: '张三'\r\n        }\r\n      }\r\n    },\r\n    cellStyle: { // 单元格样式\r\n      type: [Object, Function],\r\n      default() {\r\n        return {\r\n        }\r\n      }\r\n    },\r\n    toolbarConfig: {\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          moneyInputSwich: true,\r\n          visible: false }\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      calculateConstraintConfigIn: {\r\n        calcAndConstraintItemCodeField: 'mapid', // 配置了rowCodeFormulaConfig时使用的itemcode字段名\r\n        enabledType: { // 执行开关\r\n          performGetData: false, // 取数\r\n          performColFormula: true, // 列公式\r\n          gradedSummary: false, // 分级汇总\r\n          performRowCodeFormula: true, // 单元格交叉计算\r\n          performColConstraint: false, // 列约束\r\n          performCellConstraint: false// 单元格约束\r\n        },\r\n        colFormulaConfig: { // 公式配置\r\n          // rowFormulaMap= { \"colfield\":\"{colfield}[运算符]\" }\r\n          // profit: '{income}-{tax}-{deduction}',\r\n        },\r\n        rowCodeFormulaConfig: {\r\n          // 单元格交叉计算\r\n          // rowFormulaMap= { \"colField:itemcode\":\"{tableId:colField:itemcode}[运算符]\" }\r\n          // '1001:bonus': '{1001:1002:income}+{1001:1003:bonus}',\r\n        },\r\n        constraintConfig: { // 约束配置\r\n\r\n        }\r\n      },\r\n      tableGlobalConfig: {\r\n        mouseConfig: { selected: false },\r\n        tooltipConfig: { showAll: false }\r\n      },\r\n      tableConfig: {\r\n        globalConfig: { // 全局默认渲染列配置\r\n          // 全局配置\r\n          checkType: '', // hasCheckbox 可选值 ''||checkbox||radio\r\n          seq: false, // 序号列\r\n          cellClickCheck: false, // 是否开启点击行任意单元格选择\r\n          filters: false,\r\n          sortable: false,\r\n          rowDrop: false, //  是否开启列拖拽\r\n          optionSort: false //  是否添加并开启行手动上移下移排序\r\n        }\r\n      },\r\n      tableRenderMap: { // 渲染数据\r\n        curmap: {\r\n          mapid: '',\r\n          editable: true,\r\n          index: 0,\r\n          nestIndex: 0,\r\n          itemConfig: {},\r\n          render: {},\r\n          level: 0,\r\n          formula: '',\r\n          renderTitle: ''.padEnd(4 * (2 - 1)) + '',\r\n          title: '', // 标题\r\n          renderField: 'renderValue', // 渲染数据\r\n          isTree: 'render.name $vxeTree', // 是不是下拉树，\r\n          field: '', // 原本字段\r\n          needmap: '' // 是否需要反响映射\r\n        },\r\n        map: {},\r\n        mapSource: {},\r\n        renderMap: {}\r\n      },\r\n      editRulesMap: {},\r\n      tableRenderData: {}, // table渲染数据\r\n      renderEditRules: {},\r\n      tableRenderColumnsConfig: []\r\n    }\r\n  },\r\n  methods: {\r\n    getbasicDataType(obj) {\r\n      // 获取数据类型\r\n      return Object.prototype.toString.call(obj).slice(8, -1)\r\n    },\r\n    getUuid(hexDigits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') { // 获取mapid\r\n      let s = []\r\n      for (let i = 0; i < 36; i++) {\r\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)\r\n      }\r\n      s[14] = '4'\r\n      s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1)\r\n      s[8] = s[13] = s[18] = s[23] = ''\r\n      let uuid = s.join('')\r\n      return uuid\r\n    },\r\n    chunk(arr, size) { // 分组\r\n      var arr2 = []\r\n      for (var i = 0; i < arr.length; i = i + size) {\r\n        arr2.push(arr.slice(i, i + size))\r\n      }\r\n      return arr2\r\n    },\r\n    editClosed(obj, $bstable, $grid) { // 结束编辑事件\r\n      const { map } = this.tableRenderMap\r\n      this.$emit('editClosed', obj, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n      this.$emit('ProxyEvent', 'editClosed', obj, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n    },\r\n    editActived(obj, $bstable, $grid) { // 开始编辑事件\r\n      const { map } = this.tableRenderMap\r\n      this.$emit('editActived', obj, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n      this.$emit('ProxyEvent', 'editActived', obj, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n    },\r\n    cellClick(obj, $bstable, $grid) { // 行点击事件\r\n      // this.initData(this.getData().data) // 强制触发更新和重计算\r\n      const { map } = this.tableRenderMap\r\n      this.$emit('cellClick', obj, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n      this.$emit('ProxyEvent', 'cellClick', obj, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n    },\r\n    cellOptionCallBack(obj, option, $bstable, $grid) { // 单元格操作其他回调\r\n      // this.initData(this.getData().data) // 强制触发更新和重计算\r\n      const { map } = this.tableRenderMap\r\n      this.$emit('cellOptionCallBack', obj, option, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n      this.$emit('ProxyEvent', 'cellOptionCallBack', obj, option, { $bstable, $grid, basicInfoTable: this }, { itemMap: map[obj.row.mapid], data: this.getData() })\r\n    },\r\n    cellStyleIn({ row, rowIndex, $rowIndex, column, columnIndex, $columnIndex }) { // 单元格样式\r\n      const { map } = this.tableRenderMap\r\n      if (typeof this.cellStyle === 'function') {\r\n        return this.cellStyle({ row, rowIndex, $rowIndex, column, columnIndex, $columnIndex }, map[row.mapid], this.getData())\r\n      } else {\r\n        if ($columnIndex % 2 !== 0 || $columnIndex === 0) {\r\n          return { backgroundColor: 'var(--zebra-color)' }\r\n        }\r\n      }\r\n    },\r\n    initEditRules(editRules) { // 添加校验\r\n      const { mapSource } = this.tableRenderMap\r\n      let editRulesMap = {}\r\n      Object.keys(editRules).forEach((item, index) => {\r\n        if (mapSource[item]) {\r\n          editRulesMap[mapSource[item].mapid] = editRules[item]\r\n          if (editRules[item] && editRules[item][0].required) {\r\n            mapSource[item].required = true\r\n          } else {\r\n            mapSource[item].required = false\r\n          }\r\n        }\r\n      })\r\n      this.editRulesMap = editRulesMap\r\n      let self = this\r\n      this.renderEditRules = {\r\n        renderValue: [{\r\n          validator(obj) {\r\n            return new Promise((resolve, reject) => {\r\n              self.validator(obj).then(res => {\r\n                resolve(true)\r\n              }).catch(e => {\r\n                reject(e)\r\n              })\r\n            })\r\n          }\r\n        }]\r\n      }\r\n    },\r\n    newRule(rule) { // 错误规则信息\r\n      return Object.assign({}, {\r\n        $options: rule,\r\n        required: rule.required,\r\n        min: rule.min,\r\n        max: rule.min,\r\n        type: rule.type,\r\n        pattern: rule.pattern,\r\n        validator: rule.validator,\r\n        maxWidth: rule.maxWidth,\r\n        message: rule.message\r\n      })\r\n    },\r\n    validCellRules({ row, cellValue, rowIndex, column, columnIndex }) { // 校验单元格\r\n      let self = this\r\n      const { map } = this.tableRenderMap\r\n      const errorRules = []\r\n      const syncVailds = []\r\n      const rules = this.editRulesMap[row.mapid]\r\n      if (rules) {\r\n        rules.forEach(rule => {\r\n          if (typeof rule.validator === 'function') {\r\n            let customValid\r\n            customValid = rule.validator({\r\n              cellValue,\r\n              rule,\r\n              rules,\r\n              row,\r\n              rowIndex,\r\n              column,\r\n              columnIndex,\r\n              itemMap: map[row.mapid]\r\n            })\r\n            if (customValid) {\r\n              if (self.getbasicDataType(customValid) === 'Error') {\r\n                self.validRuleErr = true\r\n                errorRules.push(self.newRule({ type: 'custom', message: customValid.message, rule: self.newRule(rule) }))\r\n              } else if (customValid.catch) {\r\n                // 如果为异步校验（注：异步校验是并发无序的）\r\n                syncVailds.push(\r\n                  customValid.catch(e => {\r\n                    self.validRuleErr = true\r\n                    errorRules.push(self.newRule({ type: 'custom', message: e ? e.message : rule.message, rule: self.newRule(rule) }))\r\n                  })\r\n                )\r\n              }\r\n            }\r\n          } else {\r\n            const isNumber = rule.type === 'number'\r\n            const numVal = isNumber ? (isNaN(parseFloat(cellValue)) ? 0 : parseFloat(cellValue)) : String(cellValue).length\r\n            if (rule.required && (cellValue === null || cellValue === undefined || cellValue === '')) {\r\n              self.validRuleErr = true\r\n              errorRules.push(self.newRule(rule))\r\n            } else if (\r\n              (isNumber && isNaN(cellValue)) ||\r\n              (!isNaN(rule.min) && numVal < parseFloat(rule.min)) ||\r\n              (!isNaN(rule.max) && numVal > parseFloat(rule.max)) ||\r\n              (rule.pattern && !(rule.pattern.test ? rule.pattern : new RegExp(rule.pattern)).test(cellValue))\r\n            ) {\r\n              self.validRuleErr = true\r\n              errorRules.push(self.newRule(rule))\r\n            }\r\n          }\r\n        })\r\n      }\r\n      return Promise.all(syncVailds).then(() => {\r\n        if (errorRules.length) {\r\n          const rest = { rules: errorRules, rule: errorRules[0] }\r\n          return Promise.reject(rest)\r\n        }\r\n      })\r\n    },\r\n    validator(obj) { // 校验器\r\n      let self = this\r\n      return new Promise((resolve, reject) => {\r\n        return self.validCellRules(obj).then(() => {\r\n          resolve(true)\r\n        }).catch((error) => {\r\n          reject(new Error(typeof error.rule.message === 'function' ? error.rule.message(error.rule) : error.rule.message))\r\n        })\r\n      })\r\n    },\r\n    validateRow(row) { // 校验一条或多条数据\r\n      let self = this\r\n      return new Promise((resolve, reject) => {\r\n        self.$refs.basicInfoTable.tableOptionFn().validate(row).then(res => {\r\n          resolve(res)\r\n        }).catch(e => {\r\n          reject(e)\r\n        })\r\n      })\r\n    },\r\n    validateAll() { // 校验全表\r\n      let self = this\r\n      return new Promise((resolve, reject) => {\r\n        self.$refs.basicInfoTable.tableOptionFn().fullValidate(self.$refs.basicInfoTable.getTableData().fullData).then(res => {\r\n          resolve(res)\r\n        }).catch(e => {\r\n          reject(e)\r\n        })\r\n      })\r\n    },\r\n    getData() { // 获取表格数据\r\n      const { map } = this.tableRenderMap\r\n      let { fullData } = this.$refs.basicInfoTable.getPureTableData()\r\n      let resultData = {}\r\n      fullData.forEach((item, index) => {\r\n        if (map[item.mapid].needmap) {\r\n          Object.assign(resultData, {\r\n            [item.renderField]: item.renderValue\r\n          })\r\n        }\r\n        if (map[item.mapid].isTree) {\r\n          let { isHump } = (map[item.mapid].render && map[item.mapid].render.props && map[item.mapid].render.props.config) || { isHump: false }\r\n          let fieldkeys = isHump ? ['Code', 'Name', 'Id'] : (item.renderField.endsWith('_') ? ['code', 'name', 'id'] : ['_code', '_name', '_id'])\r\n          Object.assign(resultData, {\r\n            [map[item.mapid].field + fieldkeys[0]]: item[map[item.mapid].renderField + fieldkeys[0]] || '',\r\n            [map[item.mapid].field + fieldkeys[1]]: item[map[item.mapid].renderField + fieldkeys[1]] || '',\r\n            [map[item.mapid].field + fieldkeys[2]]: item[map[item.mapid].renderField + fieldkeys[2]] || ''\r\n          })\r\n        }\r\n      })\r\n      return {\r\n        viewData: resultData, // 渲染的可视数据\r\n        data: Object.assign({}, this.data, resultData), // 全量数据，\r\n        originalData: Object.assign({}, this.data) // 原始数据\r\n      }\r\n    },\r\n    generateSingItemRenderMap(column, level, columnIndex, nestIndex, map) { // 生成单条数据映射\r\n      let uuid = this.getUuid()\r\n      let renderField = nestIndex.split('.').join('_')\r\n      let render = column.cellRender || column.editRender\r\n      let curmap = {\r\n        mapid: uuid,\r\n        editable: !!column.editRender,\r\n        index: map.list.length + 1,\r\n        nestIndex: nestIndex,\r\n        itemConfig: column,\r\n        render: render,\r\n        level: level,\r\n        formula: column.formula ? column.formula + '' : '',\r\n        renderTitle: ''.padEnd(4 * (level - 1)) + column.title,\r\n        title: column.title, // 标题\r\n        renderField: 'renderValue', // 渲染数据\r\n        isTree: render && render.name === '$vxeTree', // 是不是下拉树，\r\n        field: column.field || renderField, // 原本字段\r\n        needmap: !!column.field // 是否需要反响映射\r\n      }\r\n      map.list.push(curmap)\r\n      map.map[uuid] = curmap\r\n      map.mapSource[column.field || renderField] = curmap\r\n      map.renderMap[renderField] = curmap\r\n    },\r\n    generateRenderMap(columns, level = 1, nestIndex = '', map = { list: [], renderMap: {}, map: {}, mapSource: {} }) { // 生成渲染项映射\r\n      columns.forEach((column, columnIndex) => {\r\n        if (column.visible !== false) {\r\n          this.generateSingItemRenderMap(column, level, columnIndex, nestIndex ? (nestIndex + '.' + columnIndex) : (columnIndex + ''), map)\r\n        }\r\n        if (Array.isArray(column.children) && column.children.length) {\r\n          this.generateRenderMap(column.children, level + 1, columnIndex, map)\r\n        }\r\n      })\r\n      return map\r\n    },\r\n    initItems(columns) { // 初始化table项\r\n      this.tableRenderMap = this.generateRenderMap(columns || this.itemsConfig)\r\n      this.tableRenderColumnsConfig = this.renderColumnsConfig\r\n      this.tableRenderColumnsGroups = Math.floor(this.tableRenderColumnsConfig / 2)\r\n    },\r\n    initData(obj) { // 初始化表格数据\r\n      obj = obj || this.data\r\n      const { list } = this.tableRenderMap\r\n      this.tableRenderData = list.map((item, index) => {\r\n        let resultData = {\r\n          index: item.index, // 行索引\r\n          nestIndex: item.nestIndex, // 嵌套关系\r\n          renderTitle: item.required ? item.renderTitle + '<span class=\"required\">*</span>' : item.renderTitle, // 渲染标题\r\n          editable: item.editable, // 是否可编辑\r\n          mapid: item.mapid, // 反向映射唯一id\r\n          required: item.required,\r\n          renderField: item.field, // 渲染字段\r\n          renderValue: obj[item.field] // 渲染值\r\n        }\r\n        if (item.isTree) {\r\n          let { isHump } = (item.render && item.render.props && item.render.props.config) || { isHump: false }\r\n          let fieldkeys = isHump ? ['Code', 'Name', 'Id'] : (item.renderField.endsWith('_') ? ['code', 'name', 'id'] : ['_code', '_name', '_id'])\r\n          Object.assign(resultData, {\r\n            [item.renderField + fieldkeys[0]]: obj[item.field + fieldkeys[0]],\r\n            [item.renderField + fieldkeys[1]]: obj[item.field + fieldkeys[1]],\r\n            [item.renderField + fieldkeys[2]]: obj[item.field + fieldkeys[2]]\r\n          })\r\n        }\r\n        return resultData\r\n      })\r\n    },\r\n    initFormula() { // 初始化公式 转化成渲染格式\r\n      let self = this\r\n      const { list, mapSource } = this.tableRenderMap\r\n      let resultData = {}\r\n      list.forEach((item, index) => {\r\n        if (item.formula) {\r\n          resultData[item.mapid + ':' + item.renderField] = self.transColFormulaToCellFomula(item.formula, item, mapSource)\r\n          item.renderFormule = resultData[item.renderField + ':' + item.mapid]\r\n        }\r\n      })\r\n      this.calculateConstraintConfigIn = Object.assign(\r\n        this.calculateConstraintConfigIn,\r\n        {\r\n          rowCodeCalcItemCodeField: 'mapid', // 配置了rowCodeFormulaConfig时使用的itemcode字段名\r\n          rowCodeFormulaConfig: resultData // { \"colField:itemcode\":\"{tableId:colField:itemcode}[运算符]\" }\r\n        })\r\n      return resultData\r\n    },\r\n    transColFormulaToCellFomula(formula, map, mapSource) { // 转化单条数据映射\r\n      let regR = new RegExp('({[a-zA-Z0-9_]*})', 'ig')\r\n      let rowsKey = formula.match(regR) === null ? [] : formula.match(regR)\r\n      if (rowsKey.length) {\r\n        for (let keyCF in rowsKey) {\r\n          let keyC = rowsKey[keyCF].replace(/\\{|\\}/g, '')\r\n          let reg = new RegExp('({' + keyC + '})', 'ig')\r\n          if (mapSource[keyC]) {\r\n            formula = formula.replace(reg, '{' + this.id + ':' + map.renderField + ':' + mapSource[keyC].mapid + '}')\r\n          } else {\r\n            if (this.data[keyC]) {\r\n              formula = formula.replace(reg, isNaN(parseFloat(this.data[keyC])) ? 0 : parseFloat(this.data[keyC]))\r\n            } else {\r\n              formula = formula.replace(reg, '{' + this.id + ':' + keyC + ':' + null + '}')\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return formula\r\n    },\r\n    init() { // 初始化\r\n      this.initItems()\r\n      this.initFormula()\r\n      this.initEditRules(this.editRules)\r\n      this.initData(this.data)\r\n    }\r\n  },\r\n  crated() {},\r\n  mounted() {\r\n    this.init()\r\n  },\r\n  watch: {\r\n    toolbarConfig: {\r\n      handler() {\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    itemsConfig: {\r\n      handler() {\r\n        this.initItems()\r\n        this.initFormula()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    defaultMoneyUnit: {\r\n      handler() {},\r\n      immediate: true\r\n    },\r\n    id: {\r\n      handler() {},\r\n      immediate: true\r\n    },\r\n    mode: {\r\n      handler() {},\r\n      immediate: true\r\n    },\r\n    editConfig: {\r\n      handler() {},\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    renderColumnsConfig: {\r\n      handler() {},\r\n      immediate: true\r\n    },\r\n    editRules: {\r\n      handler() {\r\n        this.initEditRules(this.editRules)\r\n        this.initData(this.data)\r\n      },\r\n      immediate: true\r\n    },\r\n    data: {\r\n      handler() {\r\n        this.initData(this.data)\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n.basic-info-table{\r\n .vxe-grid {\r\n   .vxe-table.border--default .vxe-table--header-wrapper,\r\n   .vxe-table.border--full .vxe-table--header-wrapper,\r\n   .vxe-table.border--outer .vxe-table--header-wrapper{\r\n      background: var(--hightlight-color);\r\n   }\r\n   .vxe-table .vxe-body--row {\r\n      background: #ffffff;\r\n     &.row--stripe {\r\n       background: var(--zebra-color);\r\n     }\r\n      .vxe-body--column{\r\n        height:34px;\r\n      }\r\n      .required{\r\n        color: #f00;\r\n        font-size: 18px;\r\n        padding: 0 0 0 5px;\r\n        position: relative;\r\n        top: 3px;\r\n      }\r\n     .vxe-body--column * {\r\n       border: none;\r\n       background: transparent;\r\n       &.is--disabled {\r\n         background: #f7fafd;\r\n       }\r\n     }\r\n    }\r\n  }\r\n }\r\n.basic-info-table.detail{\r\n  .vxe-grid .vxe-table .vxe-body--row {\r\n    .required{\r\n     display:none;\r\n    }\r\n  }\r\n}\r\n.vxe-select-option{\r\n   max-width: unset;\r\n}\r\n</style>\r\n"]}]}