{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\treeinput\\BossTreeInput.vue?vue&type=style&index=0&lang=scss&scope=true&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\treeinput\\BossTreeInput.vue","mtime":1694505521962},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJvc3MtdHJlZV9faW5wdXR7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAuYm9zcy10cmVlX19pbnB1dF90aXRsZXsKICAgIGxpbmUtaGVpZ2h0OiA0MHB4OwogICAgZmxleC1zaHJpbms6IDA7CiAgICBtYXgtd2lkdGg6IDMyMHB4OwogICAgdGV4dC1hbGlnbjogcmlnaHQ7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgLyogcGFkZGluZy1yaWdodDogLjhlbTsgKi8KICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgfQogIC5lbC1zZWxlY3R7CiAgICBkaXNwbGF5OmJsb2NrOwogICAgaGVpZ2h0OiA0MHB4OwogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgLXdlYmtpdC1ib3gtZmxleDogMTsKICAgIC1tcy1mbGV4LXBvc2l0aXZlOiAxOwogICAgZmxleC1ncm93OiAxOwogIH0KfQouYm9zcy10cmVlX19pbnB1dF90cmVlewogIG1pbi1oZWlnaHQ6IDEyMHB4OwogIC5lbC1zY3JvbGxiYXIgLmVsLXNjcm9sbGJhcl9fdmlldyAuZWwtc2VsZWN0LWRyb3Bkb3duX19pdGVtIHsKICAgIGhlaWdodDogYXV0bzsKICAgIG1heC1oZWlnaHQ6IDI3NHB4OwogICAgcGFkZGluZzogMDsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICBvdmVyZmxvdy15OiBhdXRvOwogIH0KICAuZWwtc2VsZWN0LWRyb3Bkb3duX19pdGVtLnNlbGVjdGVkewogICAgZm9udC13ZWlnaHQ6IDQwMCAhaW1wb3J0YW50OwogIH0KfQo="},{"version":3,"sources":["BossTreeInput.vue"],"names":[],"mappingsu7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BossTreeInput.vue","sourceRoot":"src/components/treeinput","sourcesContent":["<template>\r\n  <div class=\"boss-tree__input\" :style=\"{ 'background-color': backgroundColor }\">\r\n    <div v-if=\"showTitle\" class=\"boss-tree__input_title\">\r\n      <span v-if=\"title.require\" style=\"color: red;\">*</span>\r\n      <span :title=\"title.tip\">{{ title.tip }}:&nbsp;&nbsp;</span>\r\n    </div>\r\n    <el-select\r\n      ref=\"selectRef\"\r\n      class=\"boss-tree__input_select\"\r\n      :size=\"size\"\r\n      :disabled=\"selectDisabled\"\r\n      :popper-class=\"className\"\r\n      :filter-method=\"selectFilter\"\r\n      :value=\"valueTitle\"\r\n      clearable\r\n      filterable\r\n      :placeholder=\"editConfigIn.placeholder\"\r\n      @visible-change=\"showSelectBox\"\r\n      @click.native=\"selectFocus\"\r\n      @clear=\"clearHandle\"\r\n      @keyup.native.enter=\"enterFilter\"\r\n    >\r\n      <el-option v-loading=\"treeLoading\" :value=\"valueTitle\" :label=\"valueTitle\">\r\n        <el-tree\r\n          ref=\"selectTree\"\r\n          class=\"boss-tree__input_tree\"\r\n          :show-checkbox=\"checkbox\"\r\n          :data=\"data\"\r\n          :props=\"props\"\r\n          :node-key=\"props.value\"\r\n          :empty-text=\"emptyText\"\r\n          :default-expanded-keys=\"defaultExpandedKey\"\r\n          :filter-node-method=\"filterNode\"\r\n          @dblclick.native=\"dblNodeClick\"\r\n        />\r\n      </el-option>\r\n    </el-select>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters, mapMutations } from 'vuex'\r\nimport check from './config/check'\r\nimport {\r\n  defaultEditConfig\r\n} from './config/config'\r\nexport default {\r\n  name: 'BossTreeinput',\r\n  mixins: [check],\r\n  props: {\r\n    props: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          value: 'id', // ID字段名\r\n          label: 'label', // 显示名称\r\n          children: 'children' // 子级字段名\r\n        }\r\n      }\r\n    },\r\n    value: { // 双向绑定的值 支持对象和##拼接字符串\r\n      type: [Object, String],\r\n      default() {\r\n        return ' ## ## '\r\n      }\r\n    },\r\n    datas: { // 树数据\r\n      type: Array,\r\n      default: () => {\r\n        return []\r\n      }\r\n    },\r\n    size: { // select尺寸 medium/small/mini\r\n      type: String,\r\n      default: ''\r\n    },\r\n    disabled: { // select是否禁用  默认不禁用\r\n      type: Boolean\r\n    },\r\n    showcheckbox: { // 树是否多选，默认不是\r\n      type: Boolean\r\n    },\r\n    isleaf: { // 是否开启选择某一级别，默认不开启：全可选\r\n      type: Boolean\r\n    },\r\n    isServer: { // 是否服务端加载 默认不是\r\n      type: Boolean\r\n    },\r\n    ajaxType: {\r\n      type: String,\r\n      default: 'post'\r\n    },\r\n    serverUri: { // 获取数据访问uri，可自定义[微服务/url]\r\n      type: String,\r\n      default: 'plan-service/queryTreeAssistData'\r\n    },\r\n    openFormatLabel: { // 是否启用格式化label\r\n      type: Boolean\r\n    },\r\n    formatter: { // 树显示label格式化\r\n      type: String,\r\n      default: '#code-#name'\r\n    },\r\n    reloaddata: { // 每次点击是否重新加载数据\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    dropdownmethod: { // 单选情况下双击选中事件后触发， 回调\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    aftercheckmethod: { // 多选情况下勾选触发，回调\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    afterloadmethod: { // 数据已经加载完， 回调\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    openQuerySeach: {\r\n      type: Boolean\r\n    },\r\n    queryparams: { // 查询条件获取方法\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    prefix: {\r\n      type: String,\r\n      default() {\r\n        return ''\r\n      }\r\n    },\r\n    openTreeCache: {\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    openLoading: { // 是否开启loading 默认开启\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    backgroundColor: {\r\n      type: String,\r\n      default() {\r\n        return '#ffffff'\r\n      }\r\n    },\r\n    titleConfig: { // 标题内容配置\r\n      type: Object,\r\n      default() {\r\n        return {\r\n          require: false,\r\n          tip: ''\r\n\r\n        }\r\n      }\r\n    },\r\n    editConfig: { // 树配置\r\n      // 树编辑配置项\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    queryByInput: { // 根据用户输入来重新获取数据\r\n      type: Boolean,\r\n      default() {\r\n        return false\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      className: 'boss-tree__input_tree',\r\n      questUri: this.serverUri,\r\n      selectDisabled: this.disabled,\r\n      valueId: '', // 初始值\r\n      lineData: this.value, // 行数据\r\n      valueTitle: '',\r\n      inputval: '', // 记录一下文本框里面输入的值\r\n      emptyText: '',\r\n      defaultExpandedKey: [],\r\n      data: this.datas,\r\n      params: this.queryparams,\r\n      checkbox: this.showcheckbox,\r\n      curNode: { // 当前点击节点\r\n        id: '',\r\n        name: '',\r\n        code: ''\r\n      },\r\n      treePrefix: this.prefix,\r\n      cacheData: null,\r\n      treeLoading: false,\r\n      tempNode: null, // 临时的node值\r\n      useTreeCache: this.openTreeCache,\r\n      title: this.titleConfig,\r\n      editConfigIn: { ...defaultEditConfig }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters('basicInfo', ['cacheTree']),\r\n    treeParams() {\r\n      return {\r\n        ajaxType: this.ajaxType,\r\n        serverUri: this.serverUri,\r\n        params: this.queryparams\r\n      }\r\n    },\r\n    showTitle() { // 是否显示title\r\n      return !!this.title.tip\r\n    },\r\n    levelno() { // 树节点级别\r\n      return (this.editConfigIn && this.editConfigIn.levelno) || '-1'\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations('basicInfo', ['setBossTree']),\r\n    // 初始化参数\r\n    initData() {\r\n      this.initEditConfig()\r\n    },\r\n\r\n    // 初始化api服务数据\r\n    initEditConfig() {\r\n      this.editConfigIn = Object.assign(\r\n        {},\r\n        this.editConfigIn,\r\n        this.editConfig\r\n      )\r\n    },\r\n\r\n    // 判断是否为对象\r\n    isObject(obj) {\r\n      return (Object.prototype.toString.call(obj) === '[object Object]')\r\n    },\r\n    // 监听value变化， value改变时改变valueId及curNode的值\r\n    initValue() {\r\n      if (this.checkbox) {\r\n        this.initCheckValue()\r\n        return\r\n      }\r\n      if (this.isObject(this.value)) {\r\n        this.valueId = this.value[`${this.treePrefix}id`]\r\n        this.curNode.id = this.value[`${this.treePrefix}id`]\r\n        this.curNode.code = this.value[`${this.treePrefix}code`]\r\n        this.curNode.name = this.value[`${this.treePrefix}name`]\r\n      } else {\r\n        this.valueId = this.value.split('##')[0]\r\n        this.curNode.id = this.value.split('##')[0]\r\n        this.curNode.code = this.value.split('##')[1]\r\n        this.curNode.name = this.value.split('##')[2]\r\n      }\r\n      let node = {\r\n        id: (this.curNode.id && this.curNode.id !== ' ') ? this.curNode.id : '',\r\n        code: (this.curNode.code && this.curNode.code !== ' ') ? this.curNode.code : '',\r\n        name: (this.curNode.name && this.curNode.name !== ' ') ? this.curNode.name : ''\r\n      }\r\n      if (this.openFormatLabel && this.curNode.name !== ' ') {\r\n        let fmt = this.formatter\r\n        let fmtArr = this.formatter.split('-')\r\n        for (let j = 0; j < fmtArr.length; j++) {\r\n          fmt = fmt.replace(\r\n            fmtArr[j],\r\n            node[fmtArr[j].replace('#', '')] || ''\r\n          )\r\n        }\r\n        this.valueTitle = fmt\r\n      } else {\r\n        // 默认显示为code与name拼接\r\n        this.valueTitle = (node.name && node.code) ? node.code + '-' + node.name : ''\r\n      }\r\n    },\r\n\r\n    // 下拉框输入时时时触发自动过滤,如果树是支持录入，则不支持时时过滤，只支持enter过滤\r\n    selectFilter(newVal) {\r\n      this.inputval = newVal\r\n      if (this.editConfigIn.allowInput) {\r\n        this.lineData = `${newVal}## ##${newVal}`\r\n        this.$emit('input', this.lineData)\r\n        return\r\n      }\r\n\r\n      this.filterTree(newVal)\r\n    },\r\n\r\n    // enter进行过滤查询\r\n    enterFilter(e) {\r\n      if (!this.editConfigIn.allowInput) {\r\n        return\r\n      }\r\n      const newVal = e.target.value\r\n      this.filterTree(newVal)\r\n    },\r\n\r\n    filterTree(newVal) {\r\n      this.$refs.selectTree && this.$refs.selectTree.filter(newVal)\r\n    },\r\n\r\n    // 对树节点进行筛选时执行的方法，返回 true 表示这个节点可以显示，返回 false 则表示这个节点会被隐藏\r\n    filterNode(value, data) {\r\n      // 搜索过滤\r\n      if (!value) return true\r\n      let valArr = value.split(',')\r\n      let isOk = false\r\n      for (let i = 0; i < valArr.length; i++) {\r\n        if (isOk) {\r\n          break\r\n        }\r\n        isOk = data.label.indexOf(valArr[i]) !== -1\r\n      }\r\n      return isOk\r\n    },\r\n\r\n    // 格式化树的label\r\n    formatLabel(data) {\r\n      if (data && data.length !== 0) {\r\n        for (let i = 0; i < data.length; i++) {\r\n          data[i].name = data[i].name || data[i].label\r\n          if (this.openFormatLabel) {\r\n            let fmt = this.formatter\r\n            let fmtArr = this.formatter.split('-')\r\n            for (let j = 0; j < fmtArr.length; j++) {\r\n              fmt = fmt.replace(\r\n                fmtArr[j],\r\n                data[i][fmtArr[j].replace('#', '')] || ''\r\n              )\r\n            }\r\n            data[i]['label'] = fmt\r\n          }\r\n          if (data[i].children && data[i].children !== undefined && data[i].children.length > 0) { // 非底级节点\r\n            data[i].isleaf = '0'\r\n            data[i].leaf = false\r\n            this.formatLabel(data[i].children)\r\n          } else { // 底级节点\r\n            data[i].isleaf = '1'\r\n            data[i].leaf = true\r\n          }\r\n          // 节点级别，如果没有则为0\r\n          data[i].levels = data[i].levelno || 0\r\n        }\r\n      }\r\n    },\r\n\r\n    // input框单击，查询树数据，支持关闭\r\n    selectFocus() {\r\n      if (this.selectDisabled) {\r\n        return\r\n      }\r\n\r\n      if (this.reloaddata) {\r\n        this.initTree()\r\n      }\r\n      this.$refs.selectTree && this.$refs.selectTree.filter('') // 每次显示数据清除掉之前的过滤\r\n    },\r\n\r\n    setValue(val) {\r\n      this.valueId = val\r\n      if (!val) {\r\n        this.clearHandle()\r\n      }\r\n      this.setTreeData()\r\n    },\r\n    // 加载完后处理数据\r\n    dealDataAfterLoad() {\r\n      this.$nextTick(() => {\r\n        this.formatLabel(this.data)\r\n        this.setTreeData()\r\n        if (!this.editConfigIn.allowInput && !this.queryByInput) {\r\n          this.selectFilter('')\r\n        }\r\n        this.$nextTick(() => {\r\n          this.afterloadmethod(this.data)\r\n        })\r\n      })\r\n    },\r\n\r\n    // 获取缓存数据\r\n    getCacheData() {\r\n      this.data = this.cacheData\r\n      this.dealDataAfterLoad()\r\n    },\r\n\r\n    // 获取请求数据\r\n    async getHttpData() {\r\n      let self = this\r\n      if (this.treeLoading) {\r\n        return\r\n      }\r\n      this.emptyText = ''\r\n      self.openLoading && (self.treeLoading = true)\r\n      await this.$http[this.ajaxType](this.questUri, this.params)\r\n        .then(res => {\r\n          res.data.map(v => {\r\n            v.label = v.label || v.name\r\n          })\r\n          self.data = (res && Array.isArray(res)) ? res : ((res.rscode === '100000' || res.rscode === '200' || res.code === '100000' || res.code === '200') ? res.data : [])\r\n          this.treeLoading = false\r\n        })\r\n        .catch(err => {\r\n          this.treeLoading = false\r\n          console.log(err)\r\n        })\r\n      this.emptyText = '暂无数据'\r\n      this.dealDataAfterLoad()\r\n      // 缓存数据\r\n      this.setBossTree({\r\n        params: this.treeParams,\r\n        treeData: this.data\r\n      })\r\n    },\r\n    // 初始化值\r\n    async initTree() {\r\n      if (this.isServer) {\r\n        this.getHttpData()\r\n        // this.cacheData = this.cacheTree(this.treeParams)\r\n        // // console.log(55, this.useTreeCache, this.cacheData)\r\n        // if (this.useTreeCache && this.cacheData) {\r\n        //   // console.log('来自树缓存数据')\r\n        //   this.getCacheData()\r\n        // } else {\r\n        //   // console.log('来自树请求数据')\r\n        //   this.getHttpData()\r\n        // }\r\n      } else {\r\n        if (this.data.length) { // 说明是传入的树数据\r\n          this.dealDataAfterLoad()\r\n        }\r\n      }\r\n    },\r\n\r\n    // 下拉框出现/隐藏时触发 出现则为 true，隐藏则为 false\r\n    showSelectBox(isShow) {\r\n      if (!isShow) {\r\n        if (this.checkbox) {\r\n          this.changeSelectBoxMultiSelect()\r\n        } else {\r\n          (this.editConfigIn && this.editConfigIn.allowInput) ? this.changeSelectBoxEditInput() : this.changeSelectBoxNoEditInput()\r\n        }\r\n        this.emitLineData()\r\n      }\r\n    },\r\n\r\n    // 多选时，下拉框改变时处理逻辑\r\n    changeSelectBoxMultiSelect() {\r\n      let nodes = this.$refs.selectTree.getCheckedNodes()\r\n      nodes = this.dealCheckDataByisLeaf(nodes)\r\n      if (nodes.length > 0) {\r\n        let allValueId = ''\r\n        let allValueTitle = ''\r\n        for (let i = 0; i < nodes.length; i++) {\r\n          if (i === nodes.length - 1) {\r\n            allValueId += nodes[i][this.props.value] + ''\r\n            allValueTitle += nodes[i][this.props.label] + ''\r\n          } else {\r\n            allValueId += nodes[i][this.props.value] + ','\r\n            allValueTitle += nodes[i][this.props.label] + ','\r\n          }\r\n        }\r\n        this.valueId = allValueId\r\n        this.valueTitle = allValueTitle\r\n      } else {\r\n        this.valueId = ''\r\n        this.valueTitle = ''\r\n      }\r\n      this.afterNodeChecked(nodes, this.valueId)\r\n    },\r\n\r\n    // 树不支持录入时， 下拉框改变时处理逻辑\r\n    changeSelectBoxNoEditInput() {\r\n      if (!this.strTrim(this.valueId)) {\r\n        // 当前不为空\r\n        let node = this.$refs.selectTree.getCurrentNode()\r\n\r\n        if (this.isleaf) {\r\n          this.changeSelectByisLeaf(node)\r\n        } else {\r\n          if (node) {\r\n            this.valueTitle = node[this.props.label]\r\n            this.valueId = node[this.props.value]\r\n          } else {\r\n            this.$refs.selectTree.setCurrentKey(null)\r\n            this.valueTitle = ''\r\n            this.$refs.selectTree.filter('')\r\n          }\r\n        }\r\n      } else {\r\n        if (typeof this.valueId === 'string' && !String(this.valueId).includes('initId')) {\r\n          this.$refs.selectTree.setCurrentKey(this.valueId)\r\n        }\r\n      }\r\n    },\r\n\r\n    // 改变选择的树节点，当开启级别后，数据处理\r\n    changeSelectByisLeaf(node) {\r\n      // 如果是底级\r\n      if (node && this.levelno === -1) {\r\n        if (node.leaf) {\r\n          // 是底级就显示\r\n          this.valueTitle = node[this.props.label]\r\n          this.valueId = node[this.props.value]\r\n        } else {\r\n          // 不是底级就清楚树的选中\r\n          this.$refs.selectTree.setCurrentKey(null)\r\n          this.valueTitle = ''\r\n          this.$refs.selectTree.filter('')\r\n        }\r\n      }\r\n\r\n      if (node && this.levelno !== -1) {\r\n        if (this.levelno === node.levels) {\r\n          // 是选择的级别就显示\r\n          this.valueTitle = node[this.props.label]\r\n          this.valueId = node[this.props.value]\r\n        } else {\r\n          // 不是选择的级别就清除树的选中\r\n          this.$refs.selectTree.setCurrentKey(null)\r\n          this.valueTitle = ''\r\n          this.$refs.selectTree.filter('')\r\n        }\r\n      }\r\n    },\r\n\r\n    // 树支持录入时，下拉框改变时处理逻辑\r\n    changeSelectBoxEditInput() {\r\n      if (!this.valueId) {\r\n        // 当前不为空\r\n        let node = this.$refs.selectTree.getCurrentNode()\r\n        if (node) {\r\n          if (this.inputval && this.inputval !== '' && this.inputval !== node.label\r\n          ) {\r\n            this.valueTitle = this.inputval\r\n            this.valueId = this.inputval\r\n            this.$refs.selectTree.setCurrentKey(null)\r\n          } else {\r\n            if (this.isleaf) {\r\n              this.changeSelectByisLeaf(node)\r\n            } else {\r\n              if (node) {\r\n                this.valueTitle = node[this.props.label]\r\n                this.valueId = node[this.props.value]\r\n              } else {\r\n                this.$refs.selectTree.setCurrentKey(null)\r\n                this.valueTitle = ''\r\n                this.$refs.selectTree.filter('')\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          if (this.inputval && this.inputval !== '') {\r\n            this.valueTitle = this.inputval\r\n            this.valueId = this.inputval\r\n            this.$refs.selectTree.setCurrentKey(null)\r\n          }\r\n        }\r\n      } else {\r\n        let node = this.$refs.selectTree.getCurrentNode()\r\n        if (!node) {\r\n          this.valueTitle = this.inputval\r\n          this.valueId = this.inputval\r\n          this.$refs.selectTree.setCurrentKey(null)\r\n        } else {\r\n          if (this.inputval && this.inputval !== '' && this.inputval !== node.label) {\r\n            this.valueTitle = this.inputval\r\n            this.valueId = this.inputval\r\n            this.$refs.selectTree.setCurrentKey(null)\r\n          } else {\r\n            if (this.isleaf) {\r\n              this.changeSelectByisLeaf(node)\r\n            } else {\r\n              if (node) {\r\n                this.valueTitle = node[this.props.label]\r\n                this.valueId = node[this.props.value]\r\n              } else {\r\n                this.$refs.selectTree.setCurrentKey(null)\r\n                this.valueTitle = ''\r\n                this.$refs.selectTree.filter('')\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    afterNodeChecked(nodes, values) {\r\n      if (this.aftercheckmethod) {\r\n        this.aftercheckmethod(nodes, values)\r\n      }\r\n    },\r\n\r\n    // 树单击事件\r\n    handleNodeClick($event, node, curndoe, e) {\r\n      // window.event.stopPropagation()\r\n      // window.event.preventDefault()\r\n      if (this.isleaf) {\r\n        if (this.levelno === -1) {\r\n          if (node.leaf) {\r\n            this.curNode = node\r\n          } else {\r\n            this.throwWarn()\r\n          }\r\n        }\r\n\r\n        if (this.levelno !== -1) {\r\n          if (this.levelno === node.levels) {\r\n            this.curNode = node\r\n          } else {\r\n            this.throwErroWarn()\r\n          }\r\n        }\r\n      } else {\r\n        this.curNode = node\r\n      }\r\n    },\r\n\r\n    // 非底级节点提示\r\n    throwWarn() {\r\n      this.$message({ message: '非底级节点不能选中!', type: 'warning' })\r\n    },\r\n    // 非传入的级别节点提示\r\n    throwErroWarn() {\r\n      this.$message({ message: '非期望的节点不能选中!', type: 'warning' })\r\n    },\r\n\r\n    // 树双击事件【只有checkbox为false情况下触发】\r\n    dblNodeClick(event) {\r\n      if (!this.checkbox) {\r\n        const node = this.$refs.selectTree.getCurrentNode()\r\n\r\n        if (this.isleaf) {\r\n          if (this.levelno === -1 && !node.leaf) {\r\n            this.throwWarn()\r\n            return\r\n          }\r\n\r\n          if (this.levelno !== -1 && this.levelno !== node.levels) {\r\n            this.throwErroWarn()\r\n            return\r\n          }\r\n        }\r\n\r\n        this.$refs.selectRef.blur()\r\n        this.onDropdownMenuClosed(node, event)\r\n        this.inputval = ''\r\n        // 值修改监控事件\r\n        this.emitLineData()\r\n      }\r\n    },\r\n\r\n    // 双击选中后触发\r\n    onDropdownMenuClosed(data, event) {\r\n      this.dropdownmethod(data, event, this.queryparams)\r\n    },\r\n\r\n    // 清除选中\r\n    clearHandle() {\r\n      this.valueTitle = ''\r\n      this.valueId = null\r\n      this.inputval = ''\r\n      this.defaultExpandedKey = []\r\n      if (this.checkbox) {\r\n        this.$refs.selectTree.setCheckedKeys([])\r\n      } else {\r\n        this.$refs.selectTree.setCurrentKey(null)\r\n      }\r\n      this.emitClearLineData()\r\n    },\r\n\r\n    dealCss() {\r\n      var uldiv = this.$el.getElementsByClassName(\r\n        'el-select-dropdown__wrap el-scrollbar__wrap'\r\n      )\r\n      var ul = this.$el.getElementsByClassName(\r\n        'el-scrollbar__view el-select-dropdown__list'\r\n      )\r\n      if (uldiv.length) {\r\n        uldiv[0].style.marginBottom = '0px'\r\n        uldiv[0].style.marginRight = '0px'\r\n        uldiv[0].style.overflow = 'auto'\r\n      }\r\n      if (ul.length) {\r\n        ul[0].style.padding = 0\r\n      }\r\n    },\r\n\r\n    // 设置树数据【input显示  默认选中  默认展开】\r\n    setTreeData() {\r\n      if (!this.checkbox) {\r\n        if (this.valueId && !String(this.valueId).includes('initId')) {\r\n          let node = this.$refs.selectTree && this.$refs.selectTree.getNode(this.valueId)\r\n          if (this.editConfigIn.allowInput) {\r\n            const name = this.lineData[this.prefix + 'name']\r\n            if (name) {\r\n              this.inputval = name\r\n            }\r\n            this.valueTitle = (node && node.data[this.props.label]) || this.inputval || name || ''\r\n          } else {\r\n            this.valueTitle = (node && node.data[this.props.label]) || ''// 初始化显示\r\n          }\r\n\r\n          this.$refs.selectTree && this.$refs.selectTree.setCurrentKey(this.valueId) // 设置默认选中\r\n          this.defaultExpandedKey = [this.valueId] // 设置默认展开\r\n        }\r\n      } else {\r\n        if (this.valueId) {\r\n          let valArr = this.valueId.split(',')\r\n          this.valueTitle = ''\r\n          this.defaultExpandedKey = []\r\n          for (let i = 0; i < valArr.length; i++) {\r\n            if (i === valArr.length - 1) {\r\n              if (this.$refs.selectTree.getNode(valArr[i])) {\r\n                this.valueTitle += this.$refs.selectTree.getNode(valArr[i]).data[this.props.label] // 初始化显示\r\n                this.defaultExpandedKey.push(valArr[i])\r\n              }\r\n            } else {\r\n              if (this.$refs.selectTree.getNode(valArr[i])) {\r\n                this.valueTitle +=\r\n                  this.$refs.selectTree.getNode(valArr[i]).data[this.props.label] + ',' // 初始化显示\r\n                this.defaultExpandedKey.push(valArr[i])\r\n              }\r\n            }\r\n            this.$refs.selectTree.setCheckedKeys(this.defaultExpandedKey)\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    // select  双击  清空，影响了lineData改变\r\n    emitLineData() {\r\n      const curVal = this.getData()\r\n      if (this.checkbox) {\r\n        this.emitLineDataChecks(curVal)\r\n        return\r\n      }\r\n      if (this.isObject(this.value)) {\r\n        this.lineData[`${this.treePrefix}id`] = curVal.id\r\n        this.lineData[`${this.treePrefix}code`] = curVal.code\r\n        this.lineData[`${this.treePrefix}name`] = curVal.name\r\n      } else {\r\n        this.lineData = `${curVal.id}##${curVal.code}##${curVal.name}`\r\n      }\r\n      // console.log(77, this.lineData)\r\n      this.$emit('input', this.lineData)\r\n    },\r\n\r\n    // 清空 回调\r\n    emitClearLineData() {\r\n      let timeStamp = +new Date()\r\n      if (this.isObject(this.value)) {\r\n        this.lineData[`${this.treePrefix}id`] = 'initId' + timeStamp\r\n        this.lineData[`${this.treePrefix}code`] = ' '\r\n        this.lineData[`${this.treePrefix}name`] = ' '\r\n      } else {\r\n        this.lineData = `initId${timeStamp}## ## `\r\n      }\r\n\r\n      // console.log(78, this.lineData)\r\n      this.$emit('input', this.lineData)\r\n    },\r\n\r\n    splitLineData() {\r\n      let lineDataObj = Object.create(null)\r\n      if (this.isObject(this.value)) {\r\n        lineDataObj.id = this.lineData[`${this.treePrefix}id`]\r\n        lineDataObj.code = this.lineData[`${this.treePrefix}code`]\r\n        lineDataObj.name = this.lineData[`${this.treePrefix}name`]\r\n      } else {\r\n        [lineDataObj.id, lineDataObj.code, lineDataObj.name] = this.lineData.split('##')\r\n      }\r\n\r\n      return lineDataObj\r\n    },\r\n\r\n    strTrim(str) {\r\n      let strCp = typeof str !== 'string' ? String(str) : str\r\n      return (strCp || '').trim()\r\n    },\r\n\r\n    //= =============================给调用者暴露的方法==============================//\r\n\r\n    // 返回select对象和树对象\r\n    treeInputOptionFn() {\r\n      return {\r\n        selectRef: this.$refs.selectRef,\r\n        selectTree: this.$refs.selectTree\r\n      }\r\n    },\r\n\r\n    // 刷新树\r\n    refreshTree() {\r\n      this.initTree()\r\n    },\r\n\r\n    // 获取树数据\r\n    getData() {\r\n      let rdata\r\n      let timeStamp = +new Date()\r\n      const defaultObj = {\r\n        id: 'initId' + timeStamp,\r\n        code: ' ',\r\n        name: ' '\r\n      }\r\n      if (this.checkbox) {\r\n        rdata = this.$refs.selectTree.getCheckedNodes() || this.splitLineDataChecks()\r\n      } else {\r\n        // console.log(44, this.$refs.selectTree.getCurrentNode())\r\n        rdata = this.$refs.selectTree.getCurrentNode() || this.splitLineData()\r\n      }\r\n      return rdata || defaultObj\r\n    }\r\n\r\n    //= =============================给调用者暴露的方法==============================//\r\n\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n    if (this.editConfigIn.initLoadTree) {\r\n      this.initTree()\r\n    }\r\n    this.initValue()\r\n    this.$nextTick(() => {\r\n      this.dealCss()\r\n    })\r\n  },\r\n  created() {\r\n\r\n  },\r\n  watch: {\r\n    editConfig: {\r\n      handler(newValue, oldValue) {\r\n        this.initEditConfig()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    showcheckbox(val) {\r\n      this.checkbox = val\r\n    },\r\n    disabled(val) {\r\n      this.selectDisabled = val\r\n    },\r\n    prefix(val) {\r\n      this.treePrefix = val\r\n    },\r\n    openTreeCache(val) {\r\n      this.useTreeCache = val\r\n    },\r\n    questUri(val) {\r\n      this.questUri = val\r\n    },\r\n    datas: { // 表格配置监听\r\n      handler(newvalue, oldValue) {\r\n        this.data = newvalue\r\n      },\r\n      immediate: true\r\n    },\r\n    titleConfig: {\r\n      handler(newValue, oldValue) {\r\n        this.title = newValue\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    queryparams: {\r\n      handler(newValue, oldValue) {\r\n        const flag = JSON.stringify(newValue) === JSON.stringify(oldValue)\r\n        if (!flag) {\r\n          this.params = newValue\r\n        }\r\n        if (this.openQuerySeach && !flag && oldValue) {\r\n          this.initTree()\r\n        }\r\n        if (this.queryByInput) {\r\n          this.params = newValue\r\n          this.initTree()\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    value: {\r\n      handler(newValue, oldValue) {\r\n        const val = this.isObject(this.value) ? this.value[`${this.treePrefix}id`] : (this.checkbox ? this.value.split(',').length : this.value.split('##')[0])\r\n        if (this.value && val) {\r\n          this.initValue()\r\n          this.lineData = this.value\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    valueTitle(val) { // 解决from加载树时，只有一个id没有code和name时需要回显名称问题\r\n      if (!this.editConfigIn.allowInput) {\r\n        if (this.checkbox) {\r\n          return\r\n        }\r\n        let data = Object.create(null)\r\n        if (this.isObject(this.value)) {\r\n          data = this.lineData\r\n        } else {\r\n          const arr = this.lineData.split('##')\r\n          data[this.treePrefix + 'id'] = arr[0]\r\n          data[this.treePrefix + 'code'] = arr[1]\r\n          data[this.treePrefix + 'name'] = arr[2]\r\n        }\r\n\r\n        let _id = this.strTrim(data[this.treePrefix + 'id'])\r\n        let _code = this.strTrim(data[this.treePrefix + 'code'])\r\n        let _name = this.strTrim(data[this.treePrefix + 'name'])\r\n        if (_id && !String(_id).includes('initId') && !_code && !_name) {\r\n          let timeStamp = +new Date()\r\n          const defaultObj = {\r\n            id: 'initId' + timeStamp,\r\n            code: ' ',\r\n            name: ' '\r\n          }\r\n          const curVal = this.$refs.selectTree.getCurrentNode() || defaultObj\r\n          if (this.isObject(this.value)) {\r\n            this.lineData[`${this.treePrefix}id`] = curVal.id\r\n            this.lineData[`${this.treePrefix}code`] = curVal.code\r\n            this.lineData[`${this.treePrefix}name`] = curVal.name\r\n          } else {\r\n            this.lineData = `${curVal.id}##${curVal.code}##${curVal.name}`\r\n          }\r\n          this.$emit('input', this.lineData)\r\n        // console.log(99, this.lineData)\r\n        }\r\n      }\r\n    },\r\n    inputval: { // 监听用户输入\r\n      handler(newvalue, oldValue) {\r\n        // 如果配置为true则改变查询条件\r\n        if (this.queryByInput) { // && newvalue !== ''\r\n          // 把用户输入拼接到查询条件上\r\n          this.queryparams.condition[this.treePrefix] = {\r\n            'all': newvalue\r\n          }\r\n        }\r\n      },\r\n      immediate: true\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scope>\r\n  .boss-tree__input{\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    .boss-tree__input_title{\r\n      line-height: 40px;\r\n      flex-shrink: 0;\r\n      max-width: 320px;\r\n      text-align: right;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      /* padding-right: .8em; */\r\n      font-size: 14px;\r\n      vertical-align: middle;\r\n      display: inline-block;\r\n    }\r\n    .el-select{\r\n      display:block;\r\n      height: 40px;\r\n      display: inline-block;\r\n      position: relative;\r\n      -webkit-box-flex: 1;\r\n      -ms-flex-positive: 1;\r\n      flex-grow: 1;\r\n    }\r\n  }\r\n  .boss-tree__input_tree{\r\n    min-height: 120px;\r\n    .el-scrollbar .el-scrollbar__view .el-select-dropdown__item {\r\n      height: auto;\r\n      max-height: 274px;\r\n      padding: 0;\r\n      overflow: hidden;\r\n      overflow-y: auto;\r\n    }\r\n    .el-select-dropdown__item.selected{\r\n      font-weight: 400 !important;\r\n    }\r\n  }\r\n</style>\r\n"]}]}