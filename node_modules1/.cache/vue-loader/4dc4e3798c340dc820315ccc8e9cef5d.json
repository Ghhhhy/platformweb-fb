{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\mofDivTree\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\mofDivTree\\index.vue","mtime":1694505521820},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHdhdGNoLCByZWFjdGl2ZSwgcmVmIH0gZnJvbSAnQHZ1ZS9jb21wb3NpdGlvbi1hcGknDQppbXBvcnQgeyBkZWVwTWVyZ2VPYmplY3QgfSBmcm9tICdAL3V0aWxzL2RlZXBNZXJnZU9iamVjdCcNCmltcG9ydCB7IGdldFRyZWVEYXRhIH0gZnJvbSAnQC9hcGkvZnJhbWUvbWFpbi9jb21tb24nDQppbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnZWxlbWVudC11aScNCg0KZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHsNCiAgcHJvcHM6IHsNCiAgICAvLyBCc1RyZWXphY3nva7vvIzor6bnu4blj4LmlbDop4FCc1RyZWXlhoXpg6jor7TmmI4NCiAgICBjb25maWc6IHsNCiAgICAgIHR5cGU6IE9iamVjdCwNCiAgICAgIGRlZmF1bHQ6IG51bGwNCiAgICB9LA0KICAgIC8vIOivt+axguWJjeeahOmSqeWtkO+8muWPr+S7peWvueivt+axguWPguaVsOWBmuS/ruaUuQ0KICAgIGJlZm9yZUZldGNoOiB7DQogICAgICB0eXBlOiBGdW5jdGlvbiwNCiAgICAgIGRlZmF1bHQ6IG51bGwNCiAgICB9LA0KICAgIC8vIOWTjeW6lOWQjueahOmSqeWtkO+8muWPr+S7peWvueWTjeW6lOe7k+aenOWBmuS/ruaUuQ0KICAgIGFmdGVyRmV0Y2g6IHsNCiAgICAgIHR5cGU6IEZ1bmN0aW9uLA0KICAgICAgZGVmYXVsdDogbnVsbA0KICAgIH0NCiAgfSwNCiAgc2V0dXAocHJvcHMsIHsgcm9vdCB9KSB7DQogICAgY29uc3Qgc3RvcmUgPSByb290LiRzdG9yZQ0KDQogICAgLy8g5qCRcmVm5a6e5L6LDQogICAgY29uc3QgbW9mRGl2VHJlZVJlZiA9IHJlZihudWxsKQ0KDQogICAgLy8g5qCR55qE5pWw5o2u5rqQDQogICAgY29uc3QgdHJlZURhdGEgPSByZWYoW10pDQoNCiAgICAvLyDlhoXpg6jliJ3lp4vljJbpu5jorqTphY3nva7lj4LmlbDvvJvmm7TlpJrlsZ7mgKfphY3nva7lsZ7mgKflj6/lj4LogINCc1RyZWXlhoXpg6hjb25maWcNCiAgICBjb25zdCB0cmVlQ29uZmlnID0gcmVhY3RpdmUoew0KICAgICAgc2hvd0ZpbHRlcjogZmFsc2UsDQogICAgICB2YWx1ZUtleXM6IFsnY29kZScsICduYW1lJywgJ2lkJ10sDQogICAgICBmb3JtYXQ6ICd7Y29kZX0te25hbWV9JywNCiAgICAgIHRyZWVQcm9wczogew0KICAgICAgICAvLyDmoJHphY3nva7pgInpobkNCiAgICAgICAgbGFiZWxGb3JtYXQ6ICd7Y29kZX0te25hbWV9JywgLy8ge2NvZGV9LXtuYW1lfQ0KICAgICAgICBub2RlS2V5OiAnY29kZScsIC8vIOagkeeahOS4u+mUrg0KICAgICAgICBsYWJlbDogJ25hbWUnLCAvLyDmoJHnmoTmmL7npLpsYWxlbOWtl+autQ0KICAgICAgICBjaGlsZHJlbjogJ2NoaWxkcmVuJyAvLyDmoJHnmoTltYzlpZflrZfmrrUNCiAgICAgIH0NCiAgICB9KQ0KDQogICAgLy8g5o6l5Y+j6K+35rGC5omA6ZyA5Y+C5pWwDQogICAgbGV0IHRyZWVRdWVyeXBhcmFtcyA9IHsNCiAgICAgIGVsZW1lbnRDb2RlOiAnYWRtZGl2JywNCiAgICAgIHByb3ZpbmNlOiBzdG9yZS5zdGF0ZS51c2VySW5mby5wcm92aW5jZSwNCiAgICAgIHllYXI6IHN0b3JlLnN0YXRlLnVzZXJJbmZvLnllYXIsDQogICAgICB3aGVyZXNxbDogJ2FuZCBwcm92aW5jZSA9JyArIHN0b3JlLnN0YXRlLnVzZXJJbmZvLnByb3ZpbmNlDQogICAgfQ0KDQogICAgLyoqDQogICAgICog5Yi35paw5qCR77yI5Li76KaB5o+Q5L6b54i257uE5Lu26LCD55So77yJDQogICAgICogQGRlc2NyaXB0aW9uIOWboOW9k+WJjee7hOS7tuWcqEJzVHJlZee7hOS7tuS6jOasoeWwgeijhe+8jOmhueebruS4reWQhOS4qumhtemdoumcgOimgeiwg+eUqEJzVHJlZS5yZWZyZXNoVHJlZSgp77yM6YG/5YWN6L6D5aSa55qE5L615YWl5oCn5L+u5pS55ZCE5Liq6aG16Z2i6YC76L6R6YOo5YiG77ybDQogICAgICog5pWF5q2k5YGa5LiA5qyh5Luj55CG77yM5q2k5pa55rOV5YaF6YOo6LCD55SoQnNUcmVlLnJlZnJlc2hUcmVlKCkNCiAgICAgKi8NCiAgICBmdW5jdGlvbiByZWZyZXNoVHJlZSgpIHsNCiAgICAgIG1vZkRpdlRyZWVSZWYudmFsdWU/LnJlZnJlc2hUcmVlKCkNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiDojrflj5ZCc1RyZWXnu4Tku7blrp7kvosNCiAgICAgKiBAcmV0dXJucyB7Kn0NCiAgICAgKi8NCiAgICBmdW5jdGlvbiBnZXRUcmVlSW5zdGFuY2UoKSB7DQogICAgICByZXR1cm4gbW9mRGl2VHJlZVJlZi52YWx1ZQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIOabtOaWsOagkeeahOaVsOaNrua6kA0KICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fQ0KICAgICAqLw0KICAgIGFzeW5jIGZ1bmN0aW9uIGdldE1vZkRpdlRyZWVEYXRhKCkgew0KICAgICAgY29uc3QgeyBiZWZvcmVGZXRjaCwgYWZ0ZXJGZXRjaCB9ID0gcHJvcHMNCiAgICAgIHRyeSB7DQogICAgICAgIGlmIChiZWZvcmVGZXRjaCAmJiBiZWZvcmVGZXRjaCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7DQogICAgICAgICAgdHJlZVF1ZXJ5cGFyYW1zID0gKGF3YWl0IGJlZm9yZUZldGNoKHRyZWVRdWVyeXBhcmFtcykpIHx8IHRyZWVRdWVyeXBhcmFtcw0KICAgICAgICB9DQoNCiAgICAgICAgbGV0IHsgZGF0YSB9ID0gYXdhaXQgZ2V0VHJlZURhdGEodHJlZVF1ZXJ5cGFyYW1zKQ0KICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHJldHVybg0KDQogICAgICAgIGlmIChhZnRlckZldGNoICYmIGJlZm9yZUZldGNoIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsNCiAgICAgICAgICBkYXRhID0gKGF3YWl0IGFmdGVyRmV0Y2goZGF0YSkpIHx8IGRhdGENCiAgICAgICAgfQ0KICAgICAgICB0cmVlRGF0YS52YWx1ZSA9IGRhdGENCiAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgTWVzc2FnZS5lcnJvcign6I635Y+W5qCR5byC5bi477yM6K+36YeN6K+VJykNCiAgICAgIH0NCiAgICB9DQogICAgZ2V0TW9mRGl2VHJlZURhdGEoKQ0KDQogICAgd2F0Y2goKCkgPT4gcHJvcHMuY29uZmlnLCAoKSA9PiB7DQogICAgICBpZiAoIXByb3BzLmNvbmZpZykgcmV0dXJuDQogICAgICBkZWVwTWVyZ2VPYmplY3QodHJlZUNvbmZpZywgcHJvcHMuY29uZmlnKQ0KICAgIH0sIHsgZGVlcDogdHJ1ZSwgaW1tZWRpYXRlOiB0cnVlIH0pDQoNCiAgICByZXR1cm4gew0KICAgICAgdHJlZUNvbmZpZywNCiAgICAgIG1vZkRpdlRyZWVSZWYsDQogICAgICB0cmVlRGF0YSwNCiAgICAgIHJlZnJlc2hUcmVlLA0KICAgICAgZ2V0VHJlZUluc3RhbmNlDQogICAgfQ0KICB9DQp9KQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/mofDivTree","sourcesContent":["<template>\r\n  <BsTree\r\n    ref=\"mofDivTreeRef\"\r\n    open-loading\r\n    :config=\"treeConfig\"\r\n    :tree-data=\"treeData\"\r\n    v-bind=\"$attrs\"\r\n    v-on=\"$listeners\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, watch, reactive, ref } from '@vue/composition-api'\r\nimport { deepMergeObject } from '@/utils/deepMergeObject'\r\nimport { getTreeData } from '@/api/frame/main/common'\r\nimport { Message } from 'element-ui'\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    // BsTree配置，详细参数见BsTree内部说明\r\n    config: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // 请求前的钩子：可以对请求参数做修改\r\n    beforeFetch: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    // 响应后的钩子：可以对响应结果做修改\r\n    afterFetch: {\r\n      type: Function,\r\n      default: null\r\n    }\r\n  },\r\n  setup(props, { root }) {\r\n    const store = root.$store\r\n\r\n    // 树ref实例\r\n    const mofDivTreeRef = ref(null)\r\n\r\n    // 树的数据源\r\n    const treeData = ref([])\r\n\r\n    // 内部初始化默认配置参数；更多属性配置属性可参考BsTree内部config\r\n    const treeConfig = reactive({\r\n      showFilter: false,\r\n      valueKeys: ['code', 'name', 'id'],\r\n      format: '{code}-{name}',\r\n      treeProps: {\r\n        // 树配置选项\r\n        labelFormat: '{code}-{name}', // {code}-{name}\r\n        nodeKey: 'code', // 树的主键\r\n        label: 'name', // 树的显示lalel字段\r\n        children: 'children' // 树的嵌套字段\r\n      }\r\n    })\r\n\r\n    // 接口请求所需参数\r\n    let treeQueryparams = {\r\n      elementCode: 'admdiv',\r\n      province: store.state.userInfo.province,\r\n      year: store.state.userInfo.year,\r\n      wheresql: 'and province =' + store.state.userInfo.province\r\n    }\r\n\r\n    /**\r\n     * 刷新树（主要提供父组件调用）\r\n     * @description 因当前组件在BsTree组件二次封装，项目中各个页面需要调用BsTree.refreshTree()，避免较多的侵入性修改各个页面逻辑部分；\r\n     * 故此做一次代理，此方法内部调用BsTree.refreshTree()\r\n     */\r\n    function refreshTree() {\r\n      mofDivTreeRef.value?.refreshTree()\r\n    }\r\n\r\n    /**\r\n     * 获取BsTree组件实例\r\n     * @returns {*}\r\n     */\r\n    function getTreeInstance() {\r\n      return mofDivTreeRef.value\r\n    }\r\n\r\n    /**\r\n     * 更新树的数据源\r\n     * @returns {Promise<void>}\r\n     */\r\n    async function getMofDivTreeData() {\r\n      const { beforeFetch, afterFetch } = props\r\n      try {\r\n        if (beforeFetch && beforeFetch instanceof Function) {\r\n          treeQueryparams = (await beforeFetch(treeQueryparams)) || treeQueryparams\r\n        }\r\n\r\n        let { data } = await getTreeData(treeQueryparams)\r\n        if (!Array.isArray(data)) return\r\n\r\n        if (afterFetch && beforeFetch instanceof Function) {\r\n          data = (await afterFetch(data)) || data\r\n        }\r\n        treeData.value = data\r\n      } catch (e) {\r\n        Message.error('获取树异常，请重试')\r\n      }\r\n    }\r\n    getMofDivTreeData()\r\n\r\n    watch(() => props.config, () => {\r\n      if (!props.config) return\r\n      deepMergeObject(treeConfig, props.config)\r\n    }, { deep: true, immediate: true })\r\n\r\n    return {\r\n      treeConfig,\r\n      mofDivTreeRef,\r\n      treeData,\r\n      refreshTree,\r\n      getTreeInstance\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>\r\n"]}]}