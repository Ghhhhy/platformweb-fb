{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\functionalComponent\\import\\importTable\\importTableUtil.js","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\functionalComponent\\import\\importTable\\importTableUtil.js","mtime":1694505521773},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\babel.config.js","mtime":1694505520209},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["XlsxTool","Import","gloabelConfig","arguments","length","undefined","_classCallCheck","self","importGlobleConf","onlyParsingFirstSheet","maxSize","acceptType","theadRowIndexStart","theadRowIndexEnd","filename","fieldName","columnConfig","inputTag","document","createElement","setAttribute","addEventListener","e","files","target","readWorkbookFromLocalFile","importHistory","_createClass","key","value","importExcel","_ref","cb","config","configSource","curImportGlobleConf","Object","assign","importcallback","selectFile","workbook","click","getUuid","hexDigits","s","i","substr","Math","floor","random","uuid","join","smallHump","str","split","map","item","index","toLowerCase","replace","$1","$2","$3","toUpperCase","columnLabelToIndex","label","test","toLocaleUpperCase","Error","chars","charCodeAt","pow","getExcelColumnLabel","num","ordA","ordZ","len","result","String","fromCharCode","transByteToSize","unitArr","srcsize","parseFloat","log","size","toFixed","listToTreeByNestCodeLength","data","nestCodeKey","forEach","children","treeData","pnestCodeKey","slice","mapItem","push","getSheetEffectiveCellInfo","refArea","refAreaArr","sheetEffectiveCellInfo","startColLabel","endColLabel","startRowIndex","endRowIndex","colAreaLabel","startColIndex","endColIndex","getMergesInfo","merges","mergesMap","mergesCell","mergesToCell","refcellTo","c","r","refcell","generateTheadArr","sheetDataSource","_this$curImportGloble","_this$curImportGloble2","theadDefaultData","curSheetEffectiveCellInfo","_this$getMergesInfo","headMap","headAarryAll","headAarry","_iterator","_createForOfIteratorHelper","_step","n","done","collabel","cellitem","_objectSpread","title","v","err","f","generateThead","_this$generateTheadAr","theadArrReault","col","colIndex","_typeof","pCellRef","generateTheadTreeTolist","level","pid","alltille","list","renderMapId","orderPNum","orderNum","padStart","columnLevel","Array","isArray","generateTheadLowestLevel","lowestLevelArr","LowestLevelMap","titleArr","curLowerstLevel","isparentrow","field","getField","toLocaleLowerCase","columnName","columntype","type","tableColumnsTitleFieldMap","columnsConfigMap","generateTheadAndTbody","_this","_this$curImportGloble3","columns","generateColumnsAllMap","theadResult","_this$generateTheadLo","tbodyResult","_loop","rowIndex","row","column","columnIndex","parseExceldata","theadLevel","tbody","tbodyNest","theadNest","theadList","theadSing","sourceData","columnsMap","tbodySource","transTbodyToSource","viewToSourceMap","columnsConfigList","columnsList","rowsObjTemp","columnsConfigTitleFielMap","_ref2","newRow","reverseParseViewDataTosource","_ref3","needMap","transValue","viewValue","multiple","viewToSourceValueArr","options","indexOf","obj","tableColumnsFieldMap","colFormulaConfig","tableColumnsTitleMap","conlum","formula","itemRender","cellRender","editRender","contentRender","name","props","_files$","reader","FileReader","onload","read","excelDataMap","excelDataArray","firstSheetData","SheetNames","sheetData","Sheets","curSheetData","sheetName","curImportData","importUtil","curImportConfig","import","reverse","readAsBinaryString"],"sources":["C:/Users/何小龙/Desktop/platformweb-fb/src/components/functionalComponent/import/importTable/importTableUtil.js"],"sourcesContent":["\r\n/* eslint-disable no-useless-constructor */\r\n/*\r\n * describe:  基于xlsx的导入表体实现，支持解析嵌套表头\r\n * @Date:   2021-08-17\r\n * Author: Titans@2396757591@qq.com\r\n * @Last Modified time: 2021-08-17\r\n */\r\n// import { columns, datas } from './testData.js'\r\nimport XlsxTool from 'xlsx'\r\nclass Import {\r\n  constructor(gloabelConfig = {}) {\r\n    let self = this\r\n    this.XlsxTool = XlsxTool\r\n    this.importGlobleConf = {\r\n      onlyParsingFirstSheet: true,\r\n      maxSize: 1024 * 1024 * 10,\r\n      acceptType: 'xlsx',\r\n      theadRowIndexStart: 1,\r\n      theadRowIndexEnd: 1,\r\n      filename: '',\r\n      fieldName: 'field',\r\n      columnConfig: []\r\n    }\r\n    this.inputTag = document.createElement('input')\r\n    this.inputTag.setAttribute('type', 'file')\r\n    this.inputTag.setAttribute('accept', '.xlsx,.xls')\r\n    this.inputTag.setAttribute('multiple', false)\r\n    this.inputTag.addEventListener('change', function (e) {\r\n      const files = e.target.files\r\n      self.readWorkbookFromLocalFile(files)\r\n    })\r\n    this.importHistory = [] // 导入历史记录\r\n  }\r\n  importExcel({ config }, cb) { // 触发导入Excel动作\r\n    this.configSource = config\r\n    this.curImportGlobleConf = Object.assign({}, this.importGlobleConf, config)\r\n    this.importcallback = cb\r\n    this.selectFile(cb)\r\n  }\r\n  selectFile() { // 触发选取文件操作\r\n    this.workbook = {}\r\n    this.inputTag.value = null\r\n    this.inputTag.click()\r\n  }\r\n  getUuid(hexDigits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') { // 获取mapid\r\n    let s = []\r\n    for (let i = 0; i < 36; i++) {\r\n      s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)\r\n    }\r\n    s[14] = '4'\r\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1)\r\n    s[8] = s[13] = s[18] = s[23] = ''\r\n    let uuid = s.join('')\r\n    return uuid\r\n  }\r\n  smallHump(str) {\r\n    // 连字符转成小驼峰\r\n    return str.split('_').map((item, index) => {\r\n      return index === 0 ? item.toLowerCase() : item.toLowerCase().replace(/^[a-z]{1,1}/, ($1, $2, $3) => {\r\n        return $1.toUpperCase()\r\n      })\r\n    }).join('')\r\n  }\r\n  columnLabelToIndex(label) { // 获取列字母索引转化为数字索引\r\n    if (!/[A-Z]+/.test(label.toLocaleUpperCase())) {\r\n      throw new Error('Invalid parameter,Expect a String<Alphabetic>!')\r\n    }\r\n    let index = 0\r\n    let chars = label.toLocaleUpperCase().split('')\r\n    for (let i = 0; i < chars.length; i++) {\r\n      index += (chars[i].charCodeAt() - 'A'.charCodeAt() + 1) * Math.pow(26, chars.length - i - 1)\r\n    }\r\n    return index - 1\r\n  }\r\n  getExcelColumnLabel(num) { // 获取索引获取列字母\r\n    // 方法一 高效\r\n    if (!/[0-9]+/.test(num)) {\r\n      throw new Error('Invalid parameter,Expect a Number!')\r\n    }\r\n    let ordA = 'A'.charCodeAt(0)\r\n    let ordZ = 'Z'.charCodeAt(0)\r\n    let len = ordZ - ordA + 1\r\n    let result = ''\r\n    while (num >= 0) {\r\n      result = String.fromCharCode(num % len + ordA) + result\r\n      num = Math.floor(num / len) - 1\r\n    }\r\n    return result\r\n    // 方法二 低效\r\n    /*\r\n        let temp = ''\r\n        let i = Math.floor(Math.log(25.0 * (num) / 26.0 + 1) / Math.log(26)) + 1\r\n        if (i > 1) {\r\n          let sub = num - 26 * (Math.pow(26, i - 1) - 1) / 25\r\n          for (let j = i; j > 0; j--) {\r\n            temp = temp + String.fromCharCode(sub / Math.pow(26, j - 1) + 65)\r\n            sub = sub % Math.pow(26, j - 1)\r\n          }\r\n        } else {\r\n          temp = temp + String.fromCharCode(num + 65)\r\n        }\r\n        return temp\r\n    */\r\n  }\r\n  transByteToSize(value) { // 换算文件大小\r\n    if (value == null || value === '') {\r\n      return '0 Bytes'\r\n    }\r\n    let unitArr = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n    let index = 0\r\n    let srcsize = parseFloat(value)\r\n    index = Math.floor(Math.log(srcsize) / Math.log(1024))\r\n    let size = srcsize / Math.pow(1024, index)\r\n    //  保留的小数位数\r\n    size = size.toFixed(2)\r\n    return size + unitArr[index]\r\n  }\r\n  listToTreeByNestCodeLength(data, nestCodeKey) { // 根据nestCodeKey 长度 生成嵌套数据\r\n    let map = {} // 构建map\r\n    data.forEach(function (item) {\r\n      map[item[nestCodeKey]] = item\r\n      item.children = []\r\n    })\r\n    let treeData = []\r\n    data.forEach(item => {\r\n      let pnestCodeKey = String(item[nestCodeKey])\r\n      pnestCodeKey = pnestCodeKey.slice(0, pnestCodeKey.length - 1)\r\n      let mapItem = map[item[pnestCodeKey]]\r\n      while (!mapItem && pnestCodeKey !== '') {\r\n        pnestCodeKey = pnestCodeKey.slice(0, pnestCodeKey.length - 1)\r\n        mapItem = map[pnestCodeKey]\r\n      }\r\n      if (mapItem) {\r\n        item['item__pcode'] = String(mapItem[nestCodeKey])\r\n        item['item__pNestCode'] = String(mapItem['item__pNestCode'] ? mapItem['item__pNestCode'] + '_' + item[nestCodeKey] : item[nestCodeKey])\r\n        item['item__level'] = item['item__pNestCode'].split('-').length;\r\n        (mapItem.children || (mapItem.children = [])).push(item)\r\n      } else {\r\n        treeData.push(item)\r\n      }\r\n    })\r\n    return treeData\r\n  }\r\n  getSheetEffectiveCellInfo(refArea) { // 获取有效区域单元格信息 // 'A1:H1415'\r\n    let refAreaArr = refArea.toLocaleUpperCase().split(':')\r\n    let sheetEffectiveCellInfo = {\r\n      startColLabel: refAreaArr[0].replace(/[0-9]/ig, ''),\r\n      endColLabel: refAreaArr[1].replace(/[0-9]/ig, ''),\r\n      startRowIndex: refAreaArr[0].replace(/[A-Z]/ig, ''),\r\n      endRowIndex: refAreaArr[1].replace(/[A-Z]/ig, ''),\r\n      colAreaLabel: []\r\n    }\r\n    sheetEffectiveCellInfo.startColIndex = this.columnLabelToIndex(sheetEffectiveCellInfo.startColLabel)\r\n    sheetEffectiveCellInfo.endColIndex = this.columnLabelToIndex(sheetEffectiveCellInfo.endColLabel)\r\n    for (let i = sheetEffectiveCellInfo.startColIndex; i <= sheetEffectiveCellInfo.endColIndex; i++) {\r\n      sheetEffectiveCellInfo.colAreaLabel.push(this.getExcelColumnLabel(i))\r\n    }\r\n    return sheetEffectiveCellInfo\r\n  }\r\n  getMergesInfo(merges) { // 生成单元格合并映射\r\n    let self = this\r\n    let mergesMap = {\r\n      mergesCell: {},\r\n      mergesToCell: {}\r\n    }\r\n    merges && merges.forEach((item, index) => {\r\n      let refcellTo = self.getExcelColumnLabel(item.s.c) + (+item.s.r + 1)\r\n      mergesMap.mergesCell[refcellTo] = {\r\n        refcell: refcellTo,\r\n        startColLabel: self.getExcelColumnLabel(item.s.c),\r\n        endColLabel: self.getExcelColumnLabel(item.e.c),\r\n        startColIndex: item.s.c,\r\n        endColIndex: item.e.c,\r\n        startRowIndex: +item.s.r + 1,\r\n        endRowIndex: +item.s.r + 1\r\n      }\r\n      for (let r = item.s.r; r <= item.e.r; r++) {\r\n        for (let c = item.s.c; c <= item.e.c; c++) {\r\n          let refcell = self.getExcelColumnLabel(c) + (+r + 1)\r\n          mergesMap.mergesToCell[refcell] = refcellTo\r\n        }\r\n      }\r\n    })\r\n    return mergesMap\r\n  }\r\n  generateTheadArr(sheetDataSource) { // 根据已有数据和单元格合并映射 生成完整表头Array\r\n    let { theadRowIndexStart, theadRowIndexEnd, theadDefaultData = {} } = this.curImportGlobleConf\r\n    theadRowIndexEnd = theadRowIndexEnd > theadRowIndexStart ? +theadRowIndexEnd + 1 : +theadRowIndexStart + 1\r\n    let { colAreaLabel } = this.curSheetEffectiveCellInfo\r\n    let { mergesToCell } = this.getMergesInfo(sheetDataSource['!merges'])\r\n    let headMap = {}\r\n    let headAarryAll = []\r\n    for (let i = theadRowIndexStart; i < theadRowIndexEnd; i++) {\r\n      let headAarry = []\r\n      for (let collabel of colAreaLabel) {\r\n        if (sheetDataSource[collabel + i]) {\r\n          let cellitem = {\r\n            // rowIndex: i,\r\n            ...theadDefaultData,\r\n            collabel: collabel,\r\n            //  mergesInfo: mergesCell[collabel + i],\r\n            title: sheetDataSource[collabel + i].v\r\n          }\r\n          headAarry.push(cellitem)\r\n          headMap[collabel + i] = cellitem\r\n        } else {\r\n          let cellitem = mergesToCell[collabel + i]\r\n          headAarry.push(cellitem)\r\n          headMap[collabel + i] = cellitem\r\n        }\r\n      }\r\n      headAarryAll.push(headAarry)\r\n    }\r\n    return { headAarryAll, headMap }\r\n  }\r\n  generateThead(sheetDataSource) { // 根据表头完整数据和单元格合并映射生成嵌套表头\r\n    let { headAarryAll, headMap } = this.generateTheadArr(sheetDataSource)\r\n    let { theadRowIndexStart } = this.curImportGlobleConf\r\n    let theadArrReault = []\r\n    headAarryAll.forEach((item, index) => {\r\n      item.forEach((col, colIndex) => {\r\n        if (index === 0) {\r\n          if (typeof col === 'object') {\r\n            theadArrReault.push(col)\r\n          }\r\n        } else {\r\n          if (typeof col === 'object') {\r\n            let pCellRef = headMap[col.collabel + (+index + theadRowIndexStart - 1)]\r\n            if (typeof pCellRef === 'object') {\r\n              (pCellRef.children || (pCellRef.children = [])).push(col) // 这里判断mapItem中是否存在child\r\n            } else {\r\n              while (typeof pCellRef !== 'object') {\r\n                pCellRef = headMap[pCellRef]\r\n              }\r\n              (pCellRef.children || (pCellRef.children = [])).push(col) // 这里判断mapItem中是否存在child\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n    return theadArrReault\r\n  }\r\n  generateTheadTreeTolist(data, level = 1, pid = '', alltille, list = []) { // 嵌套head转换成平行数据并生成id和pid\r\n    let self = this\r\n    data.forEach((item, index) => {\r\n      item.renderMapId = self.getUuid()\r\n      item.orderPNum = pid\r\n      item.orderNum = pid + String(index).padStart(4, '0')\r\n      item.columnLevel = level\r\n      item.alltille = alltille ? alltille + '-' + item.title : item.title\r\n      list.push(item)\r\n      if (Array.isArray(item.children) && item.children.length) {\r\n        self.generateTheadTreeTolist(item.children, level + 1, item.orderNum, item.alltille, list)\r\n      }\r\n    })\r\n    return list\r\n  }\r\n  generateTheadLowestLevel(data, map = { lowestLevelArr: [], LowestLevelMap: {} }) { // 根据嵌套表头生成数据低级映射，用来处理解析表体\r\n    let self = this\r\n    data.forEach((item, index) => {\r\n      let titleArr = item.title.split('::')\r\n      if ((Array.isArray(item.children) && !item.children.length) || !Array.isArray(item.children)) {\r\n        let curLowerstLevel = Object.assign(item, {\r\n          title: titleArr[0].replace('(元)', ''),\r\n          isparentrow: false,\r\n          field: self.getField(self.smallHump(titleArr[1] || ('f' + (map.lowestLevelArr.length + '').padStart(3, '0')).toLocaleLowerCase()), titleArr[0]),\r\n          columnName: titleArr[1] || ('f' + (map.lowestLevelArr.length + '').padStart(3, '0')).toLocaleLowerCase(),\r\n          columntype: 1,\r\n          type: titleArr[2] || '$vxeInput' // 新全局下拉树: $vxeTree，文本数字输入: $vxeInput，下拉选择: $vxeSelect，计算渲染器: $vxeCalculate，金额输入: $vxeMoney，下拉文本框: $vxeEditDownTextarea，天数: $vxeDays，时间日期: $vxeTime，单选: $vxeRadio，多选: $vxeCheckbox，间隔时间或数值选择输入渲染器: $vxeIntervar，开关: $vxeSwitch，进度条: vxeProgress。其中，条件渲染器，进度条\r\n        })\r\n        map.lowestLevelArr.push(curLowerstLevel)\r\n        map.LowestLevelMap[curLowerstLevel.collabel] = curLowerstLevel\r\n      } else {\r\n        Object.assign(item, {\r\n          title: titleArr[0].replace('(元)', ''),\r\n          field: self.getField(self.smallHump(titleArr[1] || '')),\r\n          columnName: titleArr[1] || '',\r\n          isparentrow: true,\r\n          columntype: 1,\r\n          type: '' // 新全局下拉树: $vxeTree，文本数字输入: $vxeInput，下拉选择: $vxeSelect，计算渲染器: $vxeCalculate，金额输入: $vxeMoney，下拉文本框: $vxeEditDownTextarea，天数: $vxeDays，时间日期: $vxeTime，单选: $vxeRadio，多选: $vxeCheckbox，间隔时间或数值选择输入渲染器: $vxeIntervar，开关: $vxeSwitch，进度条: vxeProgress。其中，条件渲染器，进度条\r\n        })\r\n        self.generateTheadLowestLevel(item.children, map)\r\n      }\r\n    })\r\n    return map\r\n  }\r\n  getField(field, title) {\r\n    let { tableColumnsTitleFieldMap } = this.columnsConfigMap\r\n    if (tableColumnsTitleFieldMap[String(title).replace(/\\(元\\)|\\(万元\\)|undefined/ig, '')]) {\r\n      return tableColumnsTitleFieldMap[String(title).replace(/\\(元\\)|\\(万元\\)|undefined/ig, '')]\r\n    } else {\r\n      return field\r\n    }\r\n  }\r\n  generateTheadAndTbody(sheetDataSource) { // 生成表头(嵌套表头和单表头)和表体\r\n    let { theadRowIndexEnd, theadRowIndexStart, columns } = this.curImportGlobleConf\r\n    this.curSheetEffectiveCellInfo = this.getSheetEffectiveCellInfo(sheetDataSource['!ref'])\r\n    this.columnsConfigMap = this.generateColumnsAllMap(Array.isArray(columns) ? columns : [])\r\n    let theadResult = this.generateThead(sheetDataSource)\r\n    let { lowestLevelArr } = this.generateTheadLowestLevel(theadResult)\r\n    let { endRowIndex } = this.curSheetEffectiveCellInfo\r\n    let tbodyResult = []\r\n    if (+endRowIndex > +theadRowIndexEnd) {\r\n      for (let rowIndex = +theadRowIndexEnd + 1; rowIndex <= endRowIndex; rowIndex++) {\r\n        let row = {}\r\n        lowestLevelArr.forEach((column, columnIndex) => {\r\n          row[column[this.curImportGlobleConf.fieldName || 'field']] = sheetDataSource[column.collabel + rowIndex] ? String(sheetDataSource[column.collabel + rowIndex].v).replace(/null|NaN|undefined|,/ig, '') : ''\r\n        })\r\n        tbodyResult.push(row)\r\n      }\r\n    }\r\n    let parseExceldata = {\r\n      theadLevel: theadRowIndexEnd - theadRowIndexStart + 1,\r\n      tbody: tbodyResult,\r\n      tbodyNest: this.listToTreeByNestCodeLength(tbodyResult, lowestLevelArr[0].field),\r\n      theadNest: theadResult,\r\n      theadList: this.generateTheadTreeTolist(theadResult),\r\n      theadSing: lowestLevelArr,\r\n      sheetEffectiveCellInfo: this.curSheetEffectiveCellInfo,\r\n      sheetDataSource: sheetDataSource\r\n    }\r\n    let sourceData = {\r\n\r\n    }\r\n    if (Array.isArray(columns) && columns.length) {\r\n      let columnsMap = this.columnsConfigMap\r\n      sourceData.tbodySource = this.transTbodyToSource(\r\n        {\r\n          tbody: parseExceldata.tbody,\r\n          viewToSourceMap: columnsMap.viewToSourceMap,\r\n          columnsConfigList: columnsMap.columnsList,\r\n          rowsObjTemp: columnsMap.rowsObjTemp,\r\n          columnsConfigTitleFielMap: columnsMap.tableColumnsTitleFieldMap\r\n        }\r\n      )\r\n    }\r\n    return Object.assign(parseExceldata, sourceData)\r\n  }\r\n  transTbodyToSource({ tbody, columnsConfigList, viewToSourceMap, rowsObjTemp }) {\r\n    let self = this\r\n    return tbody.map((row, rowIndex) => {\r\n      let newRow = {}\r\n      columnsConfigList.map((column, columnIndex) => {\r\n        self.reverseParseViewDataTosource({ row, column, viewToSourceMap }, newRow)\r\n        // newRow[column.field] = row[dataTitleFieldMapMap[column.title]]\r\n      })\r\n      return newRow\r\n    })\r\n  }\r\n  reverseParseViewDataTosource({ row, column, viewToSourceMap }, newRow) {\r\n    // 处理单个 导入数据\r\n    //  needMap: true,\r\n    //  name: itemRender.name,\r\n    //  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n    //  multiple: true,\r\n    //  formula: conlum.formula\r\n    let value = row[column.field]\r\n    if (viewToSourceMap && viewToSourceMap.needMap) {\r\n      let transValue = ''\r\n      let viewValue = typeof (value) === 'string' ? value : ''\r\n      if (viewToSourceMap.multiple) {\r\n        if (viewValue.length) {\r\n          let viewToSourceValueArr = []\r\n          viewToSourceMap.options.forEach((item, index) => {\r\n            if (viewValue.indexOf(item.label) >= 0) {\r\n              viewToSourceValueArr.push(item.value)\r\n            }\r\n          })\r\n          transValue = viewToSourceValueArr.join(',')\r\n        } else {\r\n          transValue = ''\r\n        }\r\n      } else {\r\n        viewToSourceMap.options.forEach((item, index) => {\r\n          if (viewValue.indexOf(item.label) >= 0) {\r\n            transValue = item.value\r\n          }\r\n        })\r\n      }\r\n      newRow[column.field] = transValue\r\n    } else {\r\n      newRow[column.field] = value + ''.replace(/null|NaN|undefined|,/ig, '')\r\n    }\r\n  }\r\n  generateColumnsAllMap(columns, obj = { // 生成导入view映射数据\r\n    tableColumnsFieldMap: {},\r\n    tableColumnsTitleFieldMap: {},\r\n    viewToSourceMap: {},\r\n    columnsList: [],\r\n    colFormulaConfig: {},\r\n    rowsObjTemp: {},\r\n    tableColumnsTitleMap: {}\r\n  }) {\r\n    let self = this\r\n    columns.forEach((conlum, index) => {\r\n      if (Array.isArray(conlum.children) && conlum.children.length) {\r\n        self.generateColumnsAllMap(conlum.children, obj)\r\n      } else {\r\n        obj.columnsList.push(conlum)\r\n        if (conlum.formula) {\r\n          obj.colFormulaConfig[conlum.field] = conlum.formula\r\n          obj.tableColumnsTitleMap[conlum.title] = conlum\r\n        }\r\n        if (conlum.field) {\r\n          obj.rowsObjTemp[conlum.field] = ''\r\n          let map = {\r\n            needMap: true,\r\n            options: [],\r\n            multiple: false,\r\n            formula: conlum.formula\r\n          }\r\n          obj.tableColumnsFieldMap[conlum.field] = conlum\r\n          obj.tableColumnsTitleFieldMap[conlum.title] = conlum.field\r\n          let itemRender = conlum.cellRender || conlum.editRender || conlum.contentRender\r\n          if (itemRender) {\r\n            switch (itemRender.name) {\r\n              case '$vxeSelect':\r\n                if (itemRender.props && itemRender.props.multiple) {\r\n                  map = Object.assign({}, map, {\r\n                    needMap: true,\r\n                    name: itemRender.name,\r\n                    options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                    multiple: true\r\n                  })\r\n                } else {\r\n                  map = Object.assign({}, map, {\r\n                    needMap: true,\r\n                    name: itemRender.name,\r\n                    options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                    multiple: false\r\n                  })\r\n                }\r\n                break\r\n              case '$vxeRadio':\r\n                map = Object.assign({}, map, {\r\n                  needMap: true,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: false\r\n                })\r\n                break\r\n              case '$vxeCheckbox':\r\n                map = Object.assign({}, map, {\r\n                  needMap: true,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: true\r\n                })\r\n                break\r\n              case '$vxeSwitch':\r\n                map = Object.assign({}, map, {\r\n                  needMap: true,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: false\r\n                })\r\n                break\r\n              default:\r\n                map = Object.assign({}, map, {\r\n                  needMap: false,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: false\r\n                })\r\n                break\r\n            }\r\n          } else {\r\n            map = Object.assign({}, map, {\r\n              needMap: false\r\n            })\r\n          }\r\n          obj.viewToSourceMap[conlum.field] = map\r\n        }\r\n      }\r\n    })\r\n    return obj\r\n  }\r\n  readWorkbookFromLocalFile(files) { // 读取导入的excel文件数据\r\n    let self = this\r\n    if (!files.length) {\r\n      return\r\n    }\r\n    let { name, size, type } = files[0]\r\n    let { onlyParsingFirstSheet } = this.curImportGlobleConf\r\n    let reader = new FileReader()\r\n    reader.onload = function (e) {\r\n      let data = e.target.result\r\n      let workbook = self.XlsxTool.read(data, { type: 'binary' })\r\n      self.workbook = workbook\r\n      let excelDataMap = {}\r\n      let excelDataArray = []\r\n      let firstSheetData = []\r\n      for (let i = 0; i < (onlyParsingFirstSheet ? 1 : workbook.SheetNames.length); i++) {\r\n        // 如果多个shheet,这地方可以设置一个弹框去填写表头单元格信息 或者 可以 表格第一行恒定配置表头说明来解析说明获取解析的一些必须数据\r\n        let sheetData = self.generateTheadAndTbody(workbook.Sheets[workbook.SheetNames[i]])\r\n        let curSheetData = {\r\n          sheetName: workbook.SheetNames[i],\r\n          data: sheetData\r\n        }\r\n        excelDataMap[workbook.SheetNames[i]] = curSheetData\r\n        excelDataArray[i] = curSheetData\r\n        if (i === 0) {\r\n          firstSheetData = sheetData\r\n        }\r\n      }\r\n      // filename  name.replace(/.xlsx$|.xls$/,'')\r\n      let curImportData = { importUtil: self, curImportConfig: self.curImportGlobleConf, filename: name, name: name.replace(/.xlsx$|.xls$/, ''), type: type, size: self.transByteToSize(size), import: workbook, excelDataMap, firstSheetData, excelDataArray }\r\n      self.importcallback(curImportData)\r\n      self.importHistory.push(curImportData)\r\n      self.importHistory = self.importHistory.reverse().slice(0, 20).reverse()\r\n    }\r\n    reader.readAsBinaryString(files[0])\r\n  }\r\n}\r\n\r\nexport default new Import()\r\n"],"mappings":"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"}]}