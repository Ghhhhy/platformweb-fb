{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\Table\\import\\import\\import.js","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\Table\\import\\import\\import.js","mtime":1694505521553},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\babel.config.js","mtime":1694505520209},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["XlsxTool","Import","gloabelConfig","arguments","length","undefined","_classCallCheck","self","inputTag","document","createElement","setAttribute","addEventListener","e","files","target","readWorkbookFromLocalFile","importGlobleConf","valiRules","conlums","importHistory","_createClass","key","value","importExcel","conf","cb","Object","assign","callback","selectFile","workbook","click","filename","name","reader","FileReader","onload","data","result","read","type","excelJsonMap","excelJsonSing","i","SheetNames","excelJson","utils","sheet_to_json","Sheets","push","import","viewData","reverse","slice","readAsBinaryString","deaImportViewData","_this","obj","_this$generateColumns","generateColumnsAllMap","viewToSourceMap","tableColumnsTitleFieldMap","tableColumnsFieldMap","rowsObjTemp","colFormulaConfig","validResult","validResultFieldTitle","map","row","rowIndex","keys","forEach","keyIndex","parseViewValue","reverseParseViewDataTosource","reductionColFormula","needMap","transValue","viewValue","multiple","viewToSourceValueArr","options","item","index","indexOf","label","join","newRule","rule","$options","required","min","max","pattern","validator","maxWidth","message","validCellRules","argObj","_this2","column","val","property","field","errorRules","syncVailds","rules","$XEUtils","get","cellValue","isFunction","customValid","$table","isError","validRuleErr","catch","isNumber","numVal","toNumber","getSize","isNaN","parseFloat","test","RegExp","Promise","all","then","rest","reject"],"sources":["C:/Users/何小龙/Desktop/platformweb-fb/src/components/Table/import/import/import.js"],"sourcesContent":["/* eslint-disable no-useless-constructor */\r\n/*\r\n * describe:  基于vxe-table vxe-grid数据格式的导入工具类函数 基础版\r\n * @Date:   2020-09-16\r\n * Author: Titans@2396757591@qq.com\r\n * @Last Modified time: 2020-09-3\r\n */\r\n// import { columns, datas } from './testData.js'\r\nimport XlsxTool from 'xlsx'\r\nexport class Import {\r\n  constructor(gloabelConfig = {}) {\r\n    let self = this\r\n    this.XlsxTool = XlsxTool\r\n    this.inputTag = document.createElement('input')\r\n    this.inputTag.setAttribute('type', 'file')\r\n    this.inputTag.setAttribute('accept', '.xlsx,.xls')\r\n    this.inputTag.setAttribute('multiple', false)\r\n    this.inputTag.addEventListener('change', function(e) {\r\n      const files = e.target.files\r\n      self.readWorkbookFromLocalFile(files)\r\n    })\r\n    this.importGlobleConf = {\r\n      valiRules: {},\r\n      conlums: []\r\n    }\r\n    this.importHistory = [] // 导出历史记录\r\n  }\r\n  importExcel(conf, cb) {\r\n    // 触发导入Excel动作\r\n    this.importGlobleConf = Object.assign(this.importGlobleConf, conf)\r\n    this.callback = cb\r\n    this.selectFile(cb)\r\n  }\r\n  selectFile() {\r\n    // 触发选取文件操作\r\n    this.workbook = {}\r\n    this.inputTag.value = null\r\n    this.inputTag.click()\r\n  }\r\n  readWorkbookFromLocalFile(files) {\r\n    // 读取本地excel文件\r\n    let self = this\r\n    if (!files.length) {\r\n      return\r\n    }\r\n    let filename = files[0].name\r\n    // const { valiRules, conlums } = this.importGlobleConf\r\n    let reader = new FileReader()\r\n    reader.onload = function(e) {\r\n      let data = e.target.result\r\n      let workbook = self.XlsxTool.read(data, { type: 'binary' })\r\n      self.workbook = workbook\r\n      let excelJsonMap = {}\r\n      let excelJsonSing = []\r\n      for (let i = 0; i < workbook.SheetNames.length; i++) {\r\n        let excelJson = self.XlsxTool.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[i]])\r\n        if (i === 0) {\r\n          excelJsonSing = excelJson\r\n        }\r\n        excelJsonMap[workbook.SheetNames[i]] = excelJson\r\n      }\r\n      self.callback(workbook.SheetNames.length === 1 ? excelJsonSing : excelJsonMap, filename)\r\n\r\n      // self.deaImportViewData({\r\n      //   conlums: conlums,\r\n      //   viewData: excelJson,\r\n      //   valiRules: valiRules\r\n      // })\r\n      self.importHistory.push({ import: workbook, viewData: excelJsonMap })\r\n      self.importHistory = self.importHistory.reverse().slice(0, 20).reverse()\r\n    }\r\n    reader.readAsBinaryString(files[0])\r\n  }\r\n  deaImportViewData(obj = {\r\n    conlums: [],\r\n    viewData: [],\r\n    valiRules: {}\r\n  }) {\r\n    // 处理 导入数据\r\n    let self = this\r\n    let { viewToSourceMap, tableColumnsTitleFieldMap, tableColumnsFieldMap, rowsObjTemp, colFormulaConfig } = this.generateColumnsAllMap(obj.conlums)\r\n    let validResult = true\r\n    let validResultFieldTitle = []\r\n    // let valiRule = []\r\n    let viewData = obj.viewData.map((row, rowIndex) => {\r\n      Object.keys(row).forEach((key, keyIndex) => {\r\n        let parseViewValue = self.reverseParseViewDataTosource(viewToSourceMap[tableColumnsTitleFieldMap[key]], row[key])\r\n        // const customVal = String(parseViewValue).replace(/null|undefined|\\s+/ig, '') !== ''\r\n        if (tableColumnsFieldMap[tableColumnsTitleFieldMap[key]]) {\r\n          // self.validCellRules({ type: 'all', row, column: tableColumnsFieldMap[tableColumnsTitleFieldMap[key]], val: parseViewValue, valiRules: obj.valiRules })\r\n          //   .then(() => {\r\n          //     if (customVal) {\r\n          row[tableColumnsTitleFieldMap[key]] = parseViewValue\r\n          //   }\r\n          // })\r\n          // .catch(({ rule }) => {\r\n          //   validResult = false\r\n          //   valiRule.push(rule)\r\n          //   if (customVal) {\r\n          //     row[tableColumnsTitleFieldMap[key]] = parseViewValue\r\n          //   }\r\n          // })\r\n        } else {\r\n          validResultFieldTitle.push(key)\r\n        }\r\n      })\r\n      row = Object.assign({}, rowsObjTemp, row)\r\n      return this.reductionColFormula(colFormulaConfig, self.reductionColFormula(colFormulaConfig, row))\r\n    })\r\n    return validResult && !validResultFieldTitle.length && viewData\r\n  }\r\n  reverseParseViewDataTosource(viewToSourceMap, value) {\r\n    // 处理单个 导入数据\r\n    //  needMap: true,\r\n    //  name: itemRender.name,\r\n    //  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n    //  multiple: true,\r\n    //  formula: conlum.formula\r\n    if (viewToSourceMap && viewToSourceMap.needMap) {\r\n      let transValue = ''\r\n      let viewValue = typeof (value) === 'string' ? value : ''\r\n      if (viewToSourceMap.multiple) {\r\n        if (viewValue.length) {\r\n          let viewToSourceValueArr = []\r\n          viewToSourceMap.options.forEach((item, index) => {\r\n            if (viewValue.indexOf(item.label) >= 0) {\r\n              viewToSourceValueArr.push(item.value)\r\n            }\r\n          })\r\n          transValue = viewToSourceValueArr.join(',')\r\n        } else {\r\n          transValue = ''\r\n        }\r\n      } else {\r\n        viewToSourceMap.options.forEach((item, index) => {\r\n          if (viewValue.indexOf(item.label) >= 0) {\r\n            transValue = item.value\r\n          }\r\n        })\r\n      }\r\n      return transValue\r\n    } else {\r\n      return value\r\n    }\r\n  }\r\n  newRule(rule) {\r\n    // 错误规则信息\r\n    return Object.assign({}, {\r\n      $options: rule,\r\n      required: rule.required,\r\n      min: rule.min,\r\n      max: rule.min,\r\n      type: rule.type,\r\n      pattern: rule.pattern,\r\n      validator: rule.validator,\r\n      maxWidth: rule.maxWidth,\r\n      message: rule.message\r\n    })\r\n  }\r\n  validCellRules(argObj) {\r\n    // 校验单元格\r\n    let self = this\r\n    const { type, row, column, val, valiRules } = argObj\r\n    const property = column.field\r\n    const errorRules = []\r\n    const syncVailds = []\r\n    if (property && valiRules) {\r\n      const rules = self.$XEUtils.get(valiRules, property)\r\n      if (rules) {\r\n        const cellValue = val\r\n        // const cellValue = self.$XEUtils.isUndefined(val) ? self.$XEUtils.get(row, property) : val\r\n        rules.forEach(rule => {\r\n          if (type === 'all') {\r\n            if (self.$XEUtils.isFunction(rule.validator)) {\r\n              let customValid\r\n              customValid = rule.validator({\r\n                cellValue,\r\n                rule,\r\n                rules,\r\n                row,\r\n                rowIndex: row.index,\r\n                column,\r\n                $table: this\r\n              })\r\n              if (customValid) {\r\n                if (self.$XEUtils.isError(customValid)) {\r\n                  this.validRuleErr = true\r\n                  errorRules.push(self.newRule({ type: 'custom', message: customValid.message, rule: self.newRule(rule) }))\r\n                } else if (customValid.catch) {\r\n                  // 如果为异步校验（注：异步校验是并发无序的）\r\n                  syncVailds.push(\r\n                    customValid.catch(e => {\r\n                      this.validRuleErr = true\r\n                      errorRules.push(self.newRule({ type: 'custom', message: e ? e.message : rule.message, rule: self.newRule(rule) }))\r\n                    })\r\n                  )\r\n                }\r\n              }\r\n            } else {\r\n              const isNumber = rule.type === 'number'\r\n              const numVal = isNumber ? self.$XEUtils.toNumber(cellValue) : self.$XEUtils.getSize(cellValue)\r\n              if (rule.required && (cellValue === null || cellValue === undefined || cellValue === '')) {\r\n                this.validRuleErr = true\r\n                errorRules.push(self.newRule(rule))\r\n              } else if (\r\n                (isNumber && isNaN(cellValue)) ||\r\n                (!isNaN(rule.min) && numVal < parseFloat(rule.min)) ||\r\n                (!isNaN(rule.max) && numVal > parseFloat(rule.max)) ||\r\n                (rule.pattern && !(rule.pattern.test ? rule.pattern : new RegExp(rule.pattern)).test(cellValue))\r\n              ) {\r\n                this.validRuleErr = true\r\n                errorRules.push(self.newRule(rule))\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return Promise.all(syncVailds).then(() => {\r\n      if (errorRules.length) {\r\n        const rest = { rules: errorRules, rule: errorRules[0] }\r\n        return Promise.reject(rest)\r\n      }\r\n    })\r\n  }\r\n  // outputWorkbook(workbook) {\r\n  //   // 读取 excel文件\r\n  //   var sheetNames = workbook.SheetNames // 工作表名称集合\r\n  //   sheetNames.forEach(name => {\r\n  //     var worksheet = workbook.Sheets[name] // 只能通过工作表名称来获取指定工作表\r\n  //     for (var key in worksheet) {\r\n  //       // v是读取单元格的原始值\r\n  //       console.log(key, key[0] === '!' ? worksheet[key] : worksheet[key].v)\r\n  //     }\r\n  //   })\r\n  // }\r\n  // readWorkbook(workbook) {\r\n  //   var sheetNames = workbook.SheetNames // 工作表名称集合\r\n  //   var worksheet = workbook.Sheets[sheetNames[0]] // 这里我们只读取第一张sheet\r\n  //   var csv = this.XlsxTool.utils.sheet_to_csv(worksheet)\r\n  //   console.log(csv)\r\n  // }\r\n  // csv2sheet(csv) {\r\n  //   // csv转sheet对象\r\n  //   var sheet = {} // 将要生成的sheet\r\n  //   csv = csv.split('\\n')\r\n  //   csv.forEach(function (row, i) {\r\n  //     row = row.split(',')\r\n  //     if (i === 0) sheet['!ref'] = 'A1:' + String.fromCharCode(65 + row.length - 1) + (csv.length - 1)\r\n  //     row.forEach(function (col, j) {\r\n  //       sheet[String.fromCharCode(65 + j) + (i + 1)] = { v: col }\r\n  //     })\r\n  //   })\r\n  //   return sheet\r\n  // }\r\n}\r\n// 2.2 .1.Workbook Object\r\n// workbook里面有什么东西呢， 我们打印出来看一下：\r\n// 可以看到， SheetNames里面保存了所有的sheet名字， 然后Sheets则保存了每个sheet的具体内容（ 我们称之为Sheet Object）。 每一个sheet是通过类似A1这样的键值保存每个单元格的内容， 我们称之为单元格对象（ Cell Object）：\r\n\r\n// 2.2 .2.Sheet Object\r\n// 每一个Sheet Object表示一张表格， 只要不是!开头的都表示普通cell， 否则， 表示一些特殊含义， 具体如下：\r\n\r\n// sheet['!ref']： 表示所有单元格的范围， 例如从A1到F8则记录为A1: F8；\r\n// sheet[!merges]： 存放一些单元格合并信息， 是一个数组， 每个数组由包含s和e构成的对象组成， s表示开始， e表示结束， r表示行， c表示列；\r\n// 等等；\r\n// 2.2 .3.单元格对象\r\n// 每一个单元格是一个对象（ Cell Object）， 主要有t、 v、 r、 h、 w等字段（ 详见这里）：\r\n// t： 表示内容类型， s表示string类型， n表示number类型， b表示boolean类型， d表示date类型， 等等\r\n// v： 表示原始值；\r\n// f： 表示公式， 如B2 + B3；\r\n// h： HTML内容\r\n// w： 格式化后的内容\r\n// r： 富文本内容rich text\r\n// 等等\r\n// 2.2 .4.读取workbook\r\n// 根据!ref确定excel的范围， 再根据!merges确定单元格合并（ 如果有）， 最后输出整个table， 比较麻烦， 幸运的是， 插件自身已经写好工具类XLSX.utils给我们直接使用， 无需我们自己遍历， 工具类输出主要包括如下：\r\n\r\n// 常用的主要是：\r\n\r\n// XLSX.utils.sheet_to_csv： 生成CSV格式\r\n// XLSX.utils.sheet_to_txt： 生成纯文本格式\r\n// XLSX.utils.sheet_to_html： 生成HTML格式\r\n// XLSX.utils.sheet_to_json： 输出JSON格式\r\n// 常用的主要是sheet_to_csv或者sheet_to_html， 转csv的话会忽略格式、 单元格合并等信息， 所以复杂表格可能不适用。 转html的话会保留单元格合并， 但是生成的是 < html > < /html>代码，而不是<table></table > ，需要对表格进行一些定制时不太方便， 所以具体还是要视情况来采用合适的工具类。2.2.4. 读取workbook\r\n// 普通方法：\r\n// // 读取 excel文件\r\n// function outputWorkbook(workbook) {\r\n//  var sheetNames = workbook.SheetNames; // 工作表名称集合\r\n//  sheetNames.forEach(name => {\r\n//    var worksheet = workbook.Sheets[name]; // 只能通过工作表名称来获取指定工作表\r\n//    for(var key in worksheet) {\r\n//     // v是读取单元格的原始值\r\n//     console.log(key, key[0] === '!' ? worksheet[key] : worksheet[key].v);\r\n//    }\r\n//  });\r\n// }\r\n// aoa_to_sheet: 这个工具类最强大也最实用了， 将一个二维数组转成sheet， 会自动处理number、 string、 boolean、 date等类型数据；\r\n// table_to_sheet: 将一个table dom直接转成sheet， 会自动识别colspan和rowspan并将其转成对应的单元格合并；\r\n// json_to_sheet: 将一个由对象组成的数组转成sheet；\r\n\r\n// var wb; //读取\r\n// var rABS = false;\r\n\r\n// //开始导入\r\n// function importf(obj) {\r\n//   if (!obj.files) {\r\n//     return;\r\n//   }\r\n//   var f = obj.files[0];\r\n//   var reader = new FileReader();\r\n//   reader.onload = function(e) {\r\n//     var data = e.target.result;\r\n//     if (rABS) {\r\n//       wb = XLSX.read(btoa(fixdata(data)), { //手动转化\r\n//         type: 'base64'\r\n//       });\r\n//     } else {\r\n//       wb = XLSX.read(data, {\r\n//         type: 'binary'\r\n//       });\r\n//     }\r\n//     /**\r\n//      * wb.SheetNames[0]是获取Sheets中第一个Sheet的名字\r\n//      * wb.Sheets[Sheet名]获取第一个Sheet的数据\r\n//      */\r\n//     var excelJson = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);\r\n//     document.getElementById(\"excelContent\").innerHTML = JSON.stringify(excelJson);\r\n//   };\r\n//   if (rABS) {\r\n//     reader.readAsArrayBuffer(f);\r\n//   } else {\r\n//     reader.readAsBinaryString(f);\r\n//   }\r\n// }\r\n\r\n// //文件流转BinaryString\r\n// function fixdata(data) {\r\n//   var o = \"\",\r\n//     l = 0,\r\n//     w = 10240;\r\n//   for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w +\r\n\r\n//     w)));\r\n//   o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));\r\n//   return o;\r\n// }\r\n"],"mappings":"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KAAK,IAAI,IAAIA,SAAS,KAAKzG,SAAS,IAAIyG,SAAS,KAAK,EAAE,CAAC,EAAE;kBACxFV,MAAI,CAACe,YAAY,GAAG,IAAI;kBACxBV,UAAU,CAACvD,IAAI,CAAC3C,IAAI,CAACiF,OAAO,CAACC,IAAI,CAAC,CAAC;gBACrC,CAAC,MAAM,IACJ4B,QAAQ,IAAII,KAAK,CAACX,SAAS,CAAC,IAC5B,CAACW,KAAK,CAAChC,IAAI,CAACG,GAAG,CAAC,IAAI0B,MAAM,GAAGI,UAAU,CAACjC,IAAI,CAACG,GAAG,CAAE,IAClD,CAAC6B,KAAK,CAAChC,IAAI,CAACI,GAAG,CAAC,IAAIyB,MAAM,GAAGI,UAAU,CAACjC,IAAI,CAACI,GAAG,CAAE,IAClDJ,IAAI,CAACK,OAAO,IAAI,CAAC,CAACL,IAAI,CAACK,OAAO,CAAC6B,IAAI,GAAGlC,IAAI,CAACK,OAAO,GAAG,IAAI8B,MAAM,CAACnC,IAAI,CAACK,OAAO,CAAC,EAAE6B,IAAI,CAACb,SAAS,CAAE,EAChG;kBACAV,MAAI,CAACe,YAAY,GAAG,IAAI;kBACxBV,UAAU,CAACvD,IAAI,CAAC3C,IAAI,CAACiF,OAAO,CAACC,IAAI,CAAC,CAAC;gBACrC;cACF;YACF;UACF,CAAC,CAAC;QACJ;MACF;MACA,OAAOoC,OAAO,CAACC,GAAG,CAACpB,UAAU,CAAC,CAACqB,IAAI,CAAC,YAAM;QACxC,IAAItB,UAAU,CAACrG,MAAM,EAAE;UACrB,IAAM4H,IAAI,GAAG;YAAErB,KAAK,EAAEF,UAAU;YAAEhB,IAAI,EAAEgB,UAAU,CAAC,CAAC;UAAE,CAAC;UACvD,OAAOoB,OAAO,CAACI,MAAM,CAACD,IAAI,CAAC;QAC7B;MACF,CAAC,CAAC;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EAAA,OAAA/H,MAAA;AAAA;AAEF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"}]}