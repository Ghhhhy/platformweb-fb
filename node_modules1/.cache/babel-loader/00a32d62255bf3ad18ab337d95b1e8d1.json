{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\mofDivTree\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\mofDivTree\\index.vue","mtime":1694505521820},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\babel.config.js","mtime":1694505520209},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["defineComponent","watch","reactive","ref","deepMergeObject","getTreeData","props","config","type","Object","default","beforeFetch","Function","afterFetch","setup","_ref","_getMofDivTreeData","root","store","$store","mofDivTreeRef","treeData","treeConfig","showFilter","valueKeys","format","treeProps","labelFormat","nodeKey","label","children","treeQueryparams","elementCode","province","state","userInfo","year","wheresql","refreshTree","_mofDivTreeRef$value","value","getTreeInstance","getMofDivTreeData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$getTreeData","data","wrap","_callee$","_context","prev","next","t0","sent","Array","isArray","abrupt","t1","t2","_Message","error","stop","apply","arguments","deep","immediate"],"sources":["src/components/mofDivTree/index.vue"],"sourcesContent":["<template>\r\n  <BsTree\r\n    ref=\"mofDivTreeRef\"\r\n    open-loading\r\n    :config=\"treeConfig\"\r\n    :tree-data=\"treeData\"\r\n    v-bind=\"$attrs\"\r\n    v-on=\"$listeners\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, watch, reactive, ref } from '@vue/composition-api'\r\nimport { deepMergeObject } from '@/utils/deepMergeObject'\r\nimport { getTreeData } from '@/api/frame/main/common'\r\nimport { Message } from 'element-ui'\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    // BsTree配置，详细参数见BsTree内部说明\r\n    config: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    // 请求前的钩子：可以对请求参数做修改\r\n    beforeFetch: {\r\n      type: Function,\r\n      default: null\r\n    },\r\n    // 响应后的钩子：可以对响应结果做修改\r\n    afterFetch: {\r\n      type: Function,\r\n      default: null\r\n    }\r\n  },\r\n  setup(props, { root }) {\r\n    const store = root.$store\r\n\r\n    // 树ref实例\r\n    const mofDivTreeRef = ref(null)\r\n\r\n    // 树的数据源\r\n    const treeData = ref([])\r\n\r\n    // 内部初始化默认配置参数；更多属性配置属性可参考BsTree内部config\r\n    const treeConfig = reactive({\r\n      showFilter: false,\r\n      valueKeys: ['code', 'name', 'id'],\r\n      format: '{code}-{name}',\r\n      treeProps: {\r\n        // 树配置选项\r\n        labelFormat: '{code}-{name}', // {code}-{name}\r\n        nodeKey: 'code', // 树的主键\r\n        label: 'name', // 树的显示lalel字段\r\n        children: 'children' // 树的嵌套字段\r\n      }\r\n    })\r\n\r\n    // 接口请求所需参数\r\n    let treeQueryparams = {\r\n      elementCode: 'admdiv',\r\n      province: store.state.userInfo.province,\r\n      year: store.state.userInfo.year,\r\n      wheresql: 'and province =' + store.state.userInfo.province\r\n    }\r\n\r\n    /**\r\n     * 刷新树（主要提供父组件调用）\r\n     * @description 因当前组件在BsTree组件二次封装，项目中各个页面需要调用BsTree.refreshTree()，避免较多的侵入性修改各个页面逻辑部分；\r\n     * 故此做一次代理，此方法内部调用BsTree.refreshTree()\r\n     */\r\n    function refreshTree() {\r\n      mofDivTreeRef.value?.refreshTree()\r\n    }\r\n\r\n    /**\r\n     * 获取BsTree组件实例\r\n     * @returns {*}\r\n     */\r\n    function getTreeInstance() {\r\n      return mofDivTreeRef.value\r\n    }\r\n\r\n    /**\r\n     * 更新树的数据源\r\n     * @returns {Promise<void>}\r\n     */\r\n    async function getMofDivTreeData() {\r\n      const { beforeFetch, afterFetch } = props\r\n      try {\r\n        if (beforeFetch && beforeFetch instanceof Function) {\r\n          treeQueryparams = (await beforeFetch(treeQueryparams)) || treeQueryparams\r\n        }\r\n\r\n        let { data } = await getTreeData(treeQueryparams)\r\n        if (!Array.isArray(data)) return\r\n\r\n        if (afterFetch && beforeFetch instanceof Function) {\r\n          data = (await afterFetch(data)) || data\r\n        }\r\n        treeData.value = data\r\n      } catch (e) {\r\n        Message.error('获取树异常，请重试')\r\n      }\r\n    }\r\n    getMofDivTreeData()\r\n\r\n    watch(() => props.config, () => {\r\n      if (!props.config) return\r\n      deepMergeObject(treeConfig, props.config)\r\n    }, { deep: true, immediate: true })\r\n\r\n    return {\r\n      treeConfig,\r\n      mofDivTreeRef,\r\n      treeData,\r\n      refreshTree,\r\n      getTreeInstance\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>\r\n"],"mappings":"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"}]}