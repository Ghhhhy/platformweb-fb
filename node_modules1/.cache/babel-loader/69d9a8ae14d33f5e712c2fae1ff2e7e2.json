{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\views\\platformReport\\DataReport\\reportSearch.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\views\\platformReport\\DataReport\\reportSearch.vue","mtime":1694576524818},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\babel.config.js","mtime":1694505520209},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["DatavReportView","resolveResult","get","name","components","props","data","percentNum","isquery","queryConfig","searchBtnText","resetBtnText","unitArr","checkedkeys","shfundtype","Batchno","datatype","leftTreeShow","leftVisible","agencyTreeConfig","isPramas","showFilter","isInitLoadData","scrollLoad","isleaf","levelno","valueKeys","format","placeholder","multipleValueType","treeProps","labelFormat","nodeKey","label","children","axiosConfig","rootName","successCode","statusField","method","url","defaultSelectFirstLeafNode","multiple","isLazeLoad","readonly","clearable","currentAgencyTreeNodeKey","currentAgencyNode","agencyTreeQueryparams","roleGuid","$store","state","curNavModule","roleguid","eleCode","queryCondition","transJson","param5","agencyTreeFilterText","agencyTreeData","inputTableTreeConfig","inputTableTreeQueryparams","type","inputTableTreeFilterText","inputTableTreeData","tablePanls","currentTableTreeNodeKey","showLoading","reportParams","params5","tabSelect","delarLoading","checkedForms","sql_batch_no","sql_datatype","checkedAgencys","agencyIds","agencyCodes","agencyNames","deptCodes","sql_dept_code","sql_agency_code","currentTableNode","queryFormRules","queryFormData","jzsj","getNowFormatDate","shFundType_","shFundType_Code","shFundType_Id","shFundType_Name","queryFormItemConfigIn","recordMap","usertype","newDataArr","defshFundType","computed","userInfo","methods","_objectSpread","initFiscalConfig","menuguid","_this","self","$refs","queryForm","getFormData","forEach","item","field","batchNo","province","qssj","Date","parse","getFullYear","then","res","code","optionsss","options","reportdatatype","optionss","split","s","ss","value","push","itemRender","getFirstId","length","firstData","getChildrenId","child","id","showDialog","dialogVisible","onTreeLoaded","_ref","bstree","treeData","tree","currentNodeKey","curSelectNode","setCurrentKey","defaultExpandedKeys","onAgencyTreeNodeClick","_ref2","node","itemChange","obj","DataArr","$form","$children","curCheckednodes","map","i","join","onSearchClick","showFlag","$XModal","message","status","setReportableParams","console","log","v","$nextTick","parentCallSearch","onInputTableTreeNodeClick","_this2","concat","indexOf","setTimeout","getReportData","_this3","menuGuidValue","reportMenu","guid","param","reportType","menuGuid","$http","post","catch","e","ArrayData","_this4","getTreeData","_this5","agencies","agency","filter","Array","from","Set","substr","sqlAgencyCode","sqlDeptCode","getQueryFormData","_this6","defSort","getAllData","toString","datas","getAllChildren","getqueryFormData","getqueryFormDataCode","getqueryFormDataId","getqueryFormDataName","datass","shFundType","shFundTypeCode","shFundTypeId","shFundTypeName","_this7","arguments","undefined","_this8","inputReport","formData","endsWith","paramsObj","title","city","agencyCode","agencyId","agencyName","deptCode","mofDivCode","admdiv","mof_div_code","fiscalYear","year","sql_shfundtype_code","str","params","result","getreportParams","deepCopy","me","_typeof","newObj","key","hasOwnProperty","queryFormItem","dicCode","_this9","JSON","formItems","config","date","seperator1","month","getMonth","strDate","getDate","currentdate","mounted","created","_this10","jzsj__viewSort","formDataListIn","watch"],"sources":["src/views/platformReport/DataReport/reportSearch.vue"],"sourcesContent":["<!--  formList模版   Author:Titans@2396757591@qq.com -->\r\n<template>\r\n  <div v-loading=\"showLoading\" class=\"height-all reportSearchModel\">\r\n    <BsMainFormListLayout :left-visible.sync=\"leftVisible\">\r\n      <template v-slot:mainForm>\r\n        <div class=\"main-query\">\r\n          <BsQuery\r\n            v-if=\"isquery\"\r\n            ref=\"queryForm\"\r\n            :query-form-item-config=\"queryFormItemConfigIn\"\r\n            :query-form-data=\"queryFormData\"\r\n            :query-config=\"queryConfig\"\r\n            @onSearchClick=\"onSearchClick\"\r\n            @onSearchResetClick=\"onresetSearchClick\"\r\n            @itemChange=\"itemChange\"\r\n          />\r\n        </div>\r\n        <div\r\n          v-for=\"(item, index) in inputTableTreeData\"\r\n          :key=\"index\"\r\n          :style=\"{ height: item.id === currentTableNode.id ? '7%' : '0px' }\"\r\n        >\r\n          <div v-show=\"item.id === currentTableNode.id\" :style=\"{ height: item.id === currentTableNode.id ? '100%' : '0px' }\">\r\n            <div class=\"main-query\">\r\n              <BsQuery\r\n                :ref=\"'queryForm' + item.id\"\r\n                :query-form-item-config=\"queryFormItemConfigIn\"\r\n                :query-form-data=\"queryFormData\"\r\n                :query-config=\"queryConfig\"\r\n                :edit-rules=\"queryFormRules\"\r\n                @onSearchClick=\"onSearchClick\"\r\n                @onSearchResetClick=\"onresetSearchClick\"\r\n                @itemChange=\"itemChange\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <template>\r\n          <div style=\"height:95%\">\r\n            <div\r\n              v-for=\"(item, index) in inputTableTreeData\"\r\n              :key=\"index\"\r\n              :style=\"{ height: item.id === currentTableNode.id ? '100%' : '0px' }\"\r\n            >\r\n              <div\r\n                v-show=\"item.id === currentTableNode.id\"\r\n                :style=\"{ height: item.id === currentTableNode.id ? '100%' : '0px' }\"\r\n              >\r\n                <DatavReportView\r\n                  :ref=\"'datavReportView' + item.id\"\r\n                  :isload=\"item.isLoad\"\r\n                  :report-params=\"reportParams\"\r\n                  :style=\"{ height: item.id === currentTableNode.id ? '100%' : '0px' }\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </template>\r\n    </BsMainFormListLayout>\r\n  </div>\r\n</template>\r\n<script>\r\nimport DatavReportView from '../platformReport/index.vue'\r\nimport resolveResult from '@/utils/result.js'\r\nimport { get } from '@/api/http'\r\nexport default {\r\n  name: 'DatavReportSearch',\r\n  components: {\r\n    DatavReportView\r\n  },\r\n  props: {\r\n  },\r\n  data() {\r\n    return {\r\n      percentNum: 50,\r\n      isquery: true,\r\n      queryConfig: {\r\n        searchBtnText: '查询',\r\n        resetBtnText: false\r\n      },\r\n      unitArr: [], // 全部单位数据\r\n      checkedkeys: ['10000'],\r\n      shfundtype: null,\r\n      Batchno: null,\r\n      datatype: null,\r\n      leftTreeShow: false,\r\n      leftVisible: false,\r\n      agencyTreeConfig: {\r\n        isPramas: false,\r\n        showFilter: false, // 是否显示过滤\r\n        isInitLoadData: false,\r\n        scrollLoad: false, // 是否开启滚动加载\r\n        isleaf: 1, // 指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效\r\n        levelno: -1, // 可选层级\r\n        valueKeys: ['code', 'name', 'id'],\r\n        format: '{code}-{name}',\r\n        placeholder: '请选择',\r\n        multipleValueType: 'String', // 多选值类型 String[逗号分割]，Array //废弃\r\n        treeProps: {\r\n          // 树配置选项\r\n          labelFormat: '{code}-{name}', // {code}-{name}\r\n          nodeKey: 'id', // 树的主键\r\n          label: 'name', // 树的显示lalel字段\r\n          children: 'children' // 树的嵌套字段\r\n        },\r\n        axiosConfig: {\r\n          rootName: '全部',\r\n          successCode: '100000', // 成功code\r\n          statusField: 'code',\r\n          method: 'get', // 请求方式\r\n          url: '' // 'queryTreeAssistData', // 是否调用接口直接获取数据，当此项有值时将会自动家数据\r\n        },\r\n        defaultSelectFirstLeafNode: true,\r\n        multiple: true, // 是否多选,\r\n        isLazeLoad: false, // 是否调用接口远程懒加载数据\r\n        readonly: true,\r\n        clearable: true\r\n      },\r\n      currentAgencyTreeNodeKey: '',\r\n      currentAgencyNode: {},\r\n      agencyTreeQueryparams: {\r\n        roleGuid: this.$store.state.curNavModule.roleguid,\r\n        // eleCode: 'VW_BAS_AGENCY_PR_TREE',\r\n        // eleCode: 'vw_bas_mof_dep_tree',\r\n        eleCode: 'VW_BAS_AGENCY_INFO_LEAF_TREE',\r\n        queryCondition: this.transJson(this.$store.state.curNavModule.param5).queryCondition\r\n      },\r\n      agencyTreeFilterText: '',\r\n      agencyTreeData: [],\r\n      inputTableTreeConfig: {\r\n        showFilter: false, // 是否显示过滤\r\n        isInitLoadData: false,\r\n        scrollLoad: false, // 是否开启滚动加载\r\n        isleaf: 1, // 指定节点是否为叶子节点，仅在指定了 lazy 属性的情况下生效\r\n        levelno: -1, // 可选层级\r\n        valueKeys: ['code', 'name', 'id'],\r\n        format: '{name}',\r\n        placeholder: '请选择',\r\n        multipleValueType: 'String', // 多选值类型 String[逗号分割]，Array //废弃\r\n        treeProps: {\r\n          // 树配置选项\r\n          labelFormat: '{name}', // {code}-{name}\r\n          nodeKey: 'id', // 树的主键\r\n          label: 'name', // 树的显示lalel字段\r\n          children: 'children' // 树的嵌套字段\r\n        },\r\n        axiosConfig: {\r\n          successCode: '100000', // 成功code\r\n          statusField: 'code',\r\n          method: 'post', // 请求方式\r\n          url: ''\r\n          // url: 'bisBudget/cfg/bgtCfgAgencyToReport/reportTree' // 'queryTreeAssistData', // 是否调用接口直接获取数据，当此项有值时将会自动家数据\r\n        },\r\n        defaultSelectFirstLeafNode: false,\r\n        multiple: false, // 是否多选,\r\n        isLazeLoad: false, // 是否调用接口远程懒加载数据\r\n        readonly: true,\r\n        clearable: true\r\n      },\r\n      inputTableTreeQueryparams: {\r\n        type: ''\r\n      },\r\n      inputTableTreeFilterText: '',\r\n      inputTableTreeData: [],\r\n      tablePanls: [],\r\n      currentTableTreeNodeKey: '',\r\n      showLoading: false,\r\n      reportParams: {},\r\n      params5: {},\r\n      tabSelect: {},\r\n      delarLoading: false,\r\n      checkedForms: {\r\n        sql_batch_no: '',\r\n        sql_datatype: ''\r\n      },\r\n      checkedAgencys: {\r\n        agencyIds: '',\r\n        agencyCodes: '',\r\n        agencyNames: '',\r\n        deptCodes: '',\r\n        sql_dept_code: '',\r\n        sql_agency_code: ''\r\n      },\r\n      currentTableNode: {},\r\n      queryFormRules: {},\r\n      queryFormData: {\r\n        jzsj: this.getNowFormatDate()// 截止日期默认当天\r\n      },\r\n      shFundType_: '',\r\n      shFundType_Code: '',\r\n      shFundType_Id: '',\r\n      shFundType_Name: '',\r\n      queryFormItemConfigIn: [],\r\n      recordMap: [],\r\n      usertype: '',\r\n      newDataArr: '',\r\n      defshFundType: ''\r\n    }\r\n  },\r\n  computed: {\r\n    curNavModule() {\r\n      return this.$store.state.curNavModule\r\n    },\r\n    userInfo() {\r\n      return this.$store.state.userInfo\r\n    }\r\n  },\r\n  methods: {\r\n    ...resolveResult,\r\n    initFiscalConfig(menuguid) {\r\n      let self = this\r\n      let data = this.$refs.queryForm.getFormData()\r\n      this.queryFormItemConfigIn.forEach((item) => {\r\n        if (item.field === 'batchNo') {\r\n          data.batchNo = '2'\r\n        }\r\n        if (item.field === 'datatype') {\r\n          if (this.$store.state.userInfo.province === '310000000') {\r\n            if (self.userInfo.usertype === '0') {\r\n              data.datatype = '1'\r\n            } else if (self.userInfo.usertype === '1') {\r\n              data.datatype = '5'\r\n            } else if (self.userInfo.usertype === '2') {\r\n              data.datatype = '3'\r\n            } else {\r\n              data.datatype = '0'\r\n            }\r\n          }\r\n        }\r\n        if (item.field === 'qssj') {\r\n          data.qssj = new Date(Date.parse(new Date().getFullYear() + '-1-1')).format('YYYY-MM-DD')\r\n        }\r\n      })\r\n      this.queryFormData = data\r\n      get('/bisBudget/api/budget/bisBudget/bgtFbConfig/getFbPageConfig?menuguid=' + menuguid).then(res => {\r\n        // get('http://43.143.57.251:6015/api/budget/bisBasicinfo/basicinfo/basAgencyInfoGd/queryAgencyTree?menuguid=' + menuguid).then(res => {\r\n        if (res && res.code === '100000') {\r\n          let optionsss = []\r\n          let options = ''\r\n          if (res.data && res.data.reportdatatype) {\r\n            options = res.data.reportdatatype\r\n          }\r\n          if (options && options !== '') {\r\n            let optionss = options.split('#')\r\n            optionss.forEach(s => {\r\n              let ss = s.split('=')\r\n              let value = ss[0]\r\n              let label = ss[1]\r\n              optionsss.push({ value: value, label: label })\r\n            })\r\n            this.queryFormItemConfigIn.forEach((item) => {\r\n              if (item.field === 'datatype') {\r\n                item.itemRender.options = optionsss\r\n              }\r\n            })\r\n            // this.queryFormItemConfigIn[2].itemRender.options = optionsss\r\n          }\r\n        }\r\n      })\r\n    },\r\n    getFirstId(data) {\r\n      if (data && data.length > 0) {\r\n        let firstData = data[0]\r\n        let getChildrenId = (data) => {\r\n          if (data && data.length > 0) {\r\n            let child = data[0]\r\n            if (child.children && child.children.length > 0) {\r\n              return getChildrenId(child.children)\r\n            } else {\r\n              return child.id\r\n            }\r\n          } else {\r\n            return ''\r\n          }\r\n        }\r\n        let id = getChildrenId(firstData.children)\r\n        if (id === '') {\r\n          id = firstData.id\r\n        }\r\n        return id\r\n      } else {\r\n        return ''\r\n      }\r\n    },\r\n    showDialog() {\r\n      this.dialogVisible = true\r\n    },\r\n    onTreeLoaded({ treeData, tree, currentNodeKey, curSelectNode }, bstree) {\r\n      let id = this.getFirstId(treeData)\r\n      if (id && id !== null && id !== '') {\r\n        tree.setCurrentKey(id)\r\n        bstree.defaultExpandedKeys = [id]\r\n      }\r\n      if (curSelectNode) {\r\n        this.currentAgencyTreeNodeKey = curSelectNode.id\r\n        this.currentAgencyNode = curSelectNode\r\n      }\r\n      // this.onAgencyTreeNodeClick({ node: curSelectNode })\r\n    },\r\n    onAgencyTreeNodeClick({ node }) {\r\n    },\r\n    itemChange(obj) {\r\n      let DataArr = []\r\n      obj.$form.$children[0].$children[0].curCheckednodes.forEach((item) => {\r\n        DataArr.push(item.code)\r\n      })\r\n      this.newDataArr = DataArr.map(i => '\\'' + i + '\\'').join(',')\r\n    },\r\n    onSearchClick() {\r\n      let self = this\r\n      if (this.showFlag !== '2') {\r\n        if (!this.checkedAgencys.agencyCodes) {\r\n          this.$XModal.message({ status: 'info', message: '请先选择预算单位' })\r\n          return false\r\n        }\r\n      }\r\n      if (!self.currentTableNode) {\r\n        this.$XModal.message({ status: 'info', message: '请先选择查询表' })\r\n        return false\r\n      }\r\n      if (self.$refs['queryForm' + self.currentTableNode.id][0].getFormData().batchNo) {\r\n        self.checkedForms.sql_batch_no = self.$refs['queryForm' + self.currentTableNode.id][0].getFormData().batchNo\r\n      }\r\n      if (self.$refs['queryForm' + self.currentTableNode.id][0].getFormData().datatype) {\r\n        self.checkedForms.sql_datatype = self.$refs['queryForm' + self.currentTableNode.id][0].getFormData().datatype\r\n      }\r\n      self.setReportableParams(self.currentTableNode)\r\n      console.log(this.reportParams, 888888888)\r\n      this.inputTableTreeData.forEach(v => {\r\n        if (v.id === self.currentTableNode.id) {\r\n          v['isLoad'] = true\r\n        }\r\n      })\r\n      this.$nextTick(() => {\r\n        console.log('当前查询表为：', self.currentTableNode.name)\r\n        self.$refs['datavReportView' + self.currentTableNode.id][0].parentCallSearch()\r\n        // self.$refs[`datavReportView${self.currentTableNode.id}`][0].parentCallSearch()\r\n      })\r\n      this.inputTableTreeData.forEach(v => {\r\n        if (v.id === self.currentTableNode.id) {\r\n          v['isLoad'] = false\r\n        }\r\n      })\r\n    },\r\n    onInputTableTreeNodeClick(node) {\r\n      let self = this\r\n      if (this.showFlag !== '2') {\r\n        if (!this.checkedAgencys.agencyCodes) {\r\n          this.$XModal.message({ status: 'info', message: '请先选择预算单位' })\r\n          return false\r\n        }\r\n      }\r\n      if (node && node.id) {\r\n        this.isquery = false\r\n        this.currentTableNode = node\r\n        this.$nextTick(() => {\r\n          // 资金渠道真实的值（全局搜newDataArr）\r\n          this.newDataArr = self.defshFundType.split(',').map(v => {\r\n            v = `'${v}'`\r\n            return v\r\n          })\r\n          this.newDataArr = this.newDataArr.join(',')\r\n          this.inputTableTreeData.forEach(v => {\r\n            if (v.id === node.id) {\r\n              v['isLoad'] = true\r\n            } else {\r\n              v['isLoad'] = false\r\n            }\r\n          })\r\n          if (self.recordMap.indexOf(self.currentTableNode.id) !== -1) {\r\n            console.log('当前跳过查询表为：', self.currentTableNode.name)\r\n            return\r\n          }\r\n          setTimeout(() => {\r\n            this.onSearchClick()\r\n            this.recordMap.push(node.id) // 有时间改成得到值再记录\r\n          }, 10)\r\n        })\r\n        // this.$refs.bsTab.curTabSelect = this.deepCopy(node)\r\n      } else {\r\n        this.$XModal.message({ status: 'info', message: '请先选择预算单位' })\r\n      }\r\n    },\r\n    // onNodeCheckChange(a) {\r\n    //   // this.delarLoading = true\r\n    //   let agencies = this.$refs.agencyTree.curCheckednodes\r\n    //   if (!agencies || agencies.length === 0 || (agencies.length === 1 && agencies[0].code === 'root' && agencies[0].children.length === 0)) {\r\n    //     // this.$XModal.message({ status: 'info', message: '请' })\r\n    //     this.checkedAgencys.agencyCodes = ''\r\n    //     return\r\n    //   }\r\n    //   let agency = agencies.filter(item => item.isleaf).map(item => { return item })\r\n    //   let agencyIds = agency.map(v => v.id)\r\n    //   let agencyCodes = agency.map(v => v.code)\r\n    //   let agencyNames = agency.map(v => v.name)\r\n    //   let deptCodes = Array.from(new Set(agency.map(v => v.code.substr(0, 3))))\r\n    //   let sqlAgencyCode = agencyCodes.map(i => '\\'' + i + '\\'').join(',')\r\n    //   let sqlDeptCode = deptCodes.map(i => '\\'' + i + '\\'').join(',')\r\n    //   this.checkedAgencys = {\r\n    //     agencyIds,\r\n    //     agencyCodes,\r\n    //     agencyNames,\r\n    //     deptCodes,\r\n    //     sql_agency_code: sqlAgencyCode,\r\n    //     sql_dept_code: sqlDeptCode\r\n    //   }\r\n    //   if (this.currentTableNode) {\r\n    //     this.setReportableParams(this.currentTableNode)\r\n    //   }\r\n    //   // setTimeout(() => {\r\n    //   //   this.delarLoading = false\r\n    //   // }, 500)\r\n    // },\r\n    getReportData() {\r\n      let menuGuidValue = this.params5.reportMenu\r\n      if (!this.params5.reportMenu) {\r\n        menuGuidValue = this.curNavModule.guid\r\n      }\r\n      let param = {\r\n        type: this.params5.reportType,\r\n        // agencyId: agencyIds,\r\n        // menuGuid: '30828356A82C49EBA4EF7EBBA1F90989'\r\n        menuGuid: menuGuidValue\r\n      }\r\n      let self = this\r\n      // *******************\r\n      self.$http.post('/bisBudget/api/budget/bisBudget/cfg/bgtCfgAgencyToReport/queryReportTree', param).then((res) => {\r\n        // self.$http.post('http://43.143.57.251:6015/api/budget/bisBudget/cfg/bgtCfgAgencyToReport/queryReportTree', param).then((res) => {\r\n        self.resolveResult(data => {\r\n          self.inputTableTreeData = data\r\n          self.inputTableTreeData.forEach(v => {\r\n            v['isLoad'] = false\r\n          })\r\n        }, res)\r\n        this.onInputTableTreeNodeClick(res.data[0])\r\n      }).catch((e) => {\r\n        self.$XModal.message({ status: 'error', message: '获取列表失败：' + e })\r\n        self.showLoading = false\r\n      })\r\n    },\r\n    ArrayData(DataArr) {\r\n      // let DataArr = JSON.parse(JSON.stringify(array))\r\n      DataArr.forEach(v => {\r\n        this.unitArr.push(v)\r\n        if (v.children.length >= 1) {\r\n          this.ArrayData(v.children)\r\n        }\r\n      })\r\n      return this.unitArr\r\n    },\r\n    getTreeData() {\r\n      let self = this\r\n      this.showLoading = true\r\n      self.$http.get('/bisBudget/api/budget/bisBasicinfo/basicinfo/basAgencyInfoGd/queryAgencyTree', self.agencyTreeQueryparams).then((res) => {\r\n        // self.$http.get('http://43.143.57.251:6015/api/budget/bisBasicinfo/basicinfo/basAgencyInfoGd/queryAgencyTree', self.agencyTreeQueryparams).then((res) => {\r\n        // 默认拿到这个数的全选数据\r\n        this.unitArr = []\r\n        let agencies = this.ArrayData(res.data)\r\n        let agency = agencies.filter(item => item.isleaf).map(item => { return item })\r\n        let agencyIds = agency.map(v => v.id)\r\n        let agencyCodes = agency.map(v => v.code)\r\n        let agencyNames = agency.map(v => v.name)\r\n        let deptCodes = Array.from(new Set(agency.map(v => v.code.substr(0, 3))))\r\n        let sqlAgencyCode = agencyCodes.map(i => '\\'' + i + '\\'').join(',')\r\n        let sqlDeptCode = deptCodes.map(i => '\\'' + i + '\\'').join(',')\r\n        this.checkedAgencys = {\r\n          agencyIds,\r\n          agencyCodes,\r\n          agencyNames,\r\n          deptCodes,\r\n          sql_agency_code: sqlAgencyCode,\r\n          sql_dept_code: sqlDeptCode\r\n        }\r\n        console.log(this.checkedAgencys, 'this.checkedAgencys ')\r\n        this.showLoading = false\r\n        this.getReportData()\r\n        if (this.currentTableNode) {\r\n          this.setReportableParams(this.currentTableNode)\r\n        }\r\n      }).catch((e) => {\r\n        self.$XModal.message({ status: 'error', message: '获取列表失败：' + e })\r\n      })\r\n    },\r\n    getQueryFormData() {\r\n      let param = {\r\n        eleCode: 'SHFUND_TYPE'\r\n      }\r\n      let self = this\r\n      self.$http.post('/bisBudget/api/budget/bisConfig/config/common/queryTreeAssistData', param).then((res) => {\r\n        // self.$http.post('http://43.143.57.251:6015/api/budget/bisBudget/budget/bisConfig/config/common/queryTreeAssistData', param).then((res) => {\r\n        self.showLoading = false\r\n        self.resolveResult(data => {\r\n          // 传输数据\r\n          let defSort = self.getAllData(data)\r\n          let defshFundType = []\r\n          defSort.forEach(item => {\r\n            defshFundType.push(item.code)\r\n          })\r\n          self.defshFundType = defshFundType.toString()\r\n          // 显示数据\r\n          let datas = self.getAllChildren(data)\r\n          let getqueryFormData = []\r\n          let getqueryFormDataCode = []\r\n          let getqueryFormDataId = []\r\n          let getqueryFormDataName = []\r\n          datas.forEach(item => {\r\n            getqueryFormData.push(item.code + '##' + item.name + '##' + item.guid)\r\n            getqueryFormDataCode.push(item.code)\r\n            getqueryFormDataId.push(item.guid)\r\n            getqueryFormDataName.push(item.name)\r\n          })\r\n          let datass = this.$refs.queryForm.getFormData()\r\n          datass.shFundType = getqueryFormData.join(',')\r\n          datass.shFundTypeCode = getqueryFormDataCode.join(',')\r\n          datass.shFundTypeId = getqueryFormDataId.join(',')\r\n          datass.shFundTypeName = getqueryFormDataName.join(',')\r\n          this.queryFormData = datass\r\n        }, res)\r\n      }).catch((e) => {\r\n        self.$XModal.message({ status: 'error', message: '获取列表失败：' + e })\r\n        self.showLoading = false\r\n      })\r\n    },\r\n    getAllChildren(data, children = []) {\r\n      data.forEach(item => {\r\n        if (item.children && item.children.length) {\r\n          this.getAllChildren(item.children, children)\r\n        } else {\r\n          children.push(item)\r\n        }\r\n      })\r\n      return children\r\n    },\r\n    getAllData(data, children = []) {\r\n      data.forEach(item => {\r\n        children.push(item)\r\n        if (item.children && item.children.length) {\r\n          // children.push(item.code)\r\n          this.getAllData(item.children, children)\r\n        }\r\n      })\r\n      return children\r\n    },\r\n    setReportableParams(inputReport) {\r\n      this.showLoading = false\r\n      let self = this\r\n      let formData = {}\r\n      if (self.$refs['queryForm' + self.currentTableNode.id]) {\r\n        formData = self.$refs['queryForm' + self.currentTableNode.id][0].getFormData()\r\n        for (var v in formData) {\r\n          if (v.endsWith('Code')) {\r\n            let data = formData[v].split(',').map(v => {\r\n              v = `'${v}'`\r\n              return v\r\n            })\r\n            formData[v] = data.join(',')\r\n          }\r\n        }\r\n      }\r\n      this.reportParams = {\r\n        code: inputReport.id,\r\n        paramsObj: {\r\n          title: inputReport.name,\r\n          city: '上海市',\r\n          agencyCode: this.checkedAgencys.agencyCodes,\r\n          agencyId: this.checkedAgencys.agencyIds,\r\n          agencyName: this.checkedAgencys.agencyNames,\r\n          deptCode: this.checkedAgencys.deptCodes,\r\n          sql_agency_code: this.checkedAgencys.sql_agency_code,\r\n          sql_dept_code: this.checkedAgencys.sql_dept_code,\r\n          menuGuid: this.$store.state.curNavModule.guid,\r\n          roleGuid: this.$store.state.curNavModule.roleguid,\r\n          mofDivCode: this.$store.state.userInfo.admdiv,\r\n          mof_div_code: this.$store.state.userInfo.province,\r\n          fiscalYear: this.$store.state.userInfo.year,\r\n          sql_shfundtype_code: self.newDataArr,\r\n          sql_datatype: this.checkedForms.sql_datatype,\r\n          sql_batch_no: this.checkedForms.sql_batch_no,\r\n          ...formData\r\n        }\r\n      }\r\n    },\r\n    transJson(str) {\r\n      if (!str) return\r\n      var params = str.split(',')\r\n      var result = {}\r\n      if (params && params.length > 0) {\r\n        for (var i = 0; i < params.length; i++) {\r\n          var map = params[i].split('=')\r\n          result[map[0]] = map[1]\r\n        }\r\n      }\r\n      return result\r\n    },\r\n    getreportParams() {\r\n      // this.params5 = this.$store.getters.getMenuParams5\r\n      this.params5 = this.transJson(this.$store.state.curNavModule.param5)\r\n    },\r\n    deepCopy(obj) { // 深拷贝通用方法\r\n      // var new_arr = JSON.parse(JSON.stringify(arr)) // 不仅可拷贝数组还能拷贝对象（ 但不能拷贝函数）\r\n      // 只拷贝对象\r\n      let me = this\r\n      if (typeof obj !== 'object' || obj === null) return obj\r\n      // 根据obj的类型判断是新建一个数组还是一个对象\r\n      let newObj = obj instanceof Array ? [] : {}\r\n      for (let key in obj) {\r\n        // 遍历obj,并且判断是obj的属性才拷贝\r\n        if (obj.hasOwnProperty(key)) {\r\n          // 判断属性值的类型，如果是对象递归调用深拷贝\r\n          newObj[key] =\r\n            typeof obj[key] === 'object' ? me.deepCopy(obj[key]) : obj[key]\r\n        }\r\n      }\r\n      return newObj\r\n    },\r\n    queryFormItem(dicCode) {\r\n      let self = this\r\n      get('/bisBudget/api/budget/bisConfig/config/report/getBossReportConfig', { dicCode }).then(res => {\r\n        self.resolveResult(data => {\r\n          self.queryFormItemConfigIn = JSON.parse(data.formItems)\r\n          // 下拉数需要拼接（window.location.pathname）\r\n          self.queryFormItemConfigIn.forEach(v => {\r\n            if (v.itemRender.props.config.axiosConfig.url) {\r\n              // 固定写法 报表固定网关\r\n              v.itemRender.props.config.isPramas = false\r\n              v.itemRender.props.config.axiosConfig.url = 'fiscal/api/budget' + v.itemRender.props.config.axiosConfig.url\r\n            }\r\n          })\r\n          console.log(self.queryFormItemConfigIn, 'self.queryFormItemConfigIn')\r\n          this.initFiscalConfig(this.$store.state.curNavModule.guid)\r\n        }, res)\r\n      }).catch(e => {\r\n        self.$XModal.message({ status: 'error', message: '获取配置列失败' })\r\n      })\r\n    },\r\n    // 获取当前时间\r\n    getNowFormatDate() {\r\n      let date = new Date()\r\n      let seperator1 = '-' // 格式分隔符\r\n      let year = date.getFullYear() // 获取完整的年份(4位)\r\n      let month = date.getMonth() + 1 // 获取当前月份(0-11,0代表1月)\r\n      let strDate = date.getDate() // 获取当前日(1-31)\r\n      if (month >= 1 && month <= 9) month = '0' + month // 如果月份是个位数，在前面补0\r\n      if (strDate >= 0 && strDate <= 9) strDate = '0' + strDate // 如果日是个位数，在前面补0\r\n      let currentdate = year + seperator1 + month + seperator1 + strDate\r\n      return currentdate\r\n    }\r\n  },\r\n  mounted() {\r\n    this.getreportParams()\r\n    this.agencyTreeQueryparams.eleCode = this.params5.eleCode\r\n    // this.getReportData()\r\n    this.getTreeData()\r\n  },\r\n  created() {\r\n    // this.getTreeData()\r\n    this.getreportParams()\r\n    if (this.params5.showFlag === '2') {\r\n      this.showFlag = '2'\r\n      this.percentNum = 0\r\n    } else {\r\n      // 默认值 '1'\r\n      // this.showFlag = '1'\r\n      this.showFlag = '1'\r\n      this.percentNum = 50\r\n    }\r\n    if (this.params5.dicCode) {\r\n      this.queryFormItem(this.params5.dicCode)\r\n      this.getQueryFormData()\r\n    }\r\n    // 当前时间\r\n    this.$nextTick(() => {\r\n      this.queryFormData.jzsj__viewSort = this.getNowFormatDate()\r\n      this.queryFormData.jzsj = this.getNowFormatDate()\r\n      this.$refs.queryForm.formDataListIn = this.queryFormData\r\n    })\r\n    console.log(this.queryFormData, 'this.queryFormData')\r\n  },\r\n  watch: {\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss'>\r\n// 横向分割条\r\n.T-mainFormListLayout-modulebox .mmc-formlist .vue-splitter-container .splitter-pane-resizer.horizontal {\r\n  width: 100% !important;\r\n  height: 5px !important;\r\n}\r\n\r\n// .x-spreadsheet .x-spreadsheet-sheet {\r\n// }\r\n// .no-left-tree {\r\n// }\r\n.flex {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n}\r\n\r\n.inner-padding {\r\n  padding: 0 0px;\r\n}\r\n.reportSearchModel {\r\n  .vxe-form--item-title {\r\n      display: inline-block !important;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"}]}