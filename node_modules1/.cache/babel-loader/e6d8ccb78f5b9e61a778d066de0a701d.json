{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\bossTree\\BossTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\bossTree\\BossTree.vue","mtime":1695716044953},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\babel.config.js","mtime":1694505520209},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapGetters","mapMutations","defaultGlobalConfig","name","props","isCheckbox","type","Boolean","datas","Array","default","_default","treeProps","Object","isShowInput","treeid","String","defaultcheckedkeys","isNeedRoot","rootname","highlightCurrent","accordion","size","emptyText","isServer","ajaxType","queryparams","serverUri","clickmethod","Function","obj","node","vess","checkChange","isChecked","ischildChecked","nodecheckmethod","checksObj","afterloadmethod","treestyle","eltreestyle","visible","openLoading","openTreeCache","defaultexpandedkeys","globalConfig","data","filterText","checkbox","isVisible","expandedkeys","_toConsumableArray","checkedkeys","params","treeLoading","cacheData","useTreeCache","bossTreeHeight","fullHeight","notfullHeight","emptyTxt","emptyTip","globalConfigIn","_objectSpread","computed","treeParams","methods","initData","initGlobalConfig","assign","hideTree","$emit","filterNode","value","filterByKey","_typeof","JSON","stringify","label","indexOf","getCacheData","_this","$nextTick","getHttpData","_this2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","self","wrap","_callee$","_context","prev","next","abrupt","$http","then","res","treeResdata","results","isArray","code","forEach","item","businessName","id","children","item1","item2","result","isleaf","console","log","busdata","push","rscode","setBossTree","treeData","catch","err","stop","initTree","cacheTree","renderContent","h","_ref","store","class","style","setFirstChildNode","isFirst","level","_this3","length","curnode","$refs","tree","getCurrentNode","setCurrentNodeByKey","curLevel","key","getFirstChildNode","childrens","treeOptionFn","refreshTree","setCheckedKeys","keys","arguments","undefined","getCheckedKeys","getData","rdata","getCheckedNodes","setCurrentKey","setChecked","currentChange","nodeContextmenu","e","nodeExpand","nodeCollapse","created","mounted","watch","handler","newValue","oldValue","deep","immediate","globalConfigInputVal","val","filter","newvalue","$forceUpdate"],"sources":["src/components/bossTree/BossTree.vue"],"sourcesContent":["<!-- 左侧树tree 组件 by comer -->\r\n<template>\r\n  <div\r\n    v-if=\"isVisible\"\r\n    v-loading=\"treeLoading\"\r\n    class=\"boss-tree__base\"\r\n    :style=\"treestyle\"\r\n  >\r\n    <div v-if=\"isShowInput\" class=\"boss-tree__base__input\">\r\n      <el-input v-model=\"filterText\" :size=\"size\" placeholder=\"输入关键字进行过滤\" />\r\n    </div>\r\n    <div class=\"boss-tree__base__tree\" :class=\"bossTreeHeight\">\r\n      <!--bug: expandedkeys 一个页面两个以上的树不会展开，如nodekey设置固定可展开但会报错-->\r\n      <el-tree\r\n        ref=\"tree\"\r\n        :style=\"eltreestyle\"\r\n        :empty-text=\"emptyTip\"\r\n        :render-content=\"renderContent\"\r\n        :show-checkbox=\"checkbox\"\r\n        :node-key=\"treeid\"\r\n        :data=\"data\"\r\n        :props=\"treeProps\"\r\n        :highlight-current=\"highlightCurrent\"\r\n        :accordion=\"accordion\"\r\n        :default-expanded-keys=\"expandedkeys\"\r\n        :default-checked-keys=\"checkedkeys\"\r\n        :filter-node-method=\"filterNode\"\r\n        v-bind=\"$attrs\"\r\n        v-on=\"$listeners\"\r\n        @check=\"nodecheckmethod\"\r\n        @node-click=\"clickmethod\"\r\n        @check-change=\"checkChange\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapGetters, mapMutations } from 'vuex'\r\nimport {\r\n  defaultGlobalConfig\r\n} from './config/config'\r\nexport default {\r\n  name: 'BossTree',\r\n  props: {\r\n    isCheckbox: { // 是否多选，默认false\r\n      type: Boolean\r\n    },\r\n    datas: { // 树数据\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    treeProps: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n    isShowInput: { // 是否显示input输入框  默认不显示\r\n      type: Boolean\r\n    },\r\n    treeid: { // 树node key同一页面要保持唯一，否则报错，如页面只有一个树可以不设置\r\n      type: String,\r\n      default: 'id'\r\n    },\r\n    defaultcheckedkeys: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    isNeedRoot: {\r\n      type: Boolean\r\n    },\r\n    rootname: { // 根节点名称\r\n      type: String,\r\n      default: '全部'\r\n    },\r\n    highlightCurrent: {\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    accordion: { // 是否每次只打开一个同级树节点展开\r\n      type: Boolean\r\n    },\r\n    size: { // 输入框尺寸 medium/small/mini\r\n      type: String,\r\n      default: ''\r\n    },\r\n    emptyText: {\r\n      type: String,\r\n      default: '暂无数据'\r\n    },\r\n    isServer: { // 是否服务端加载 默认不是\r\n      type: Boolean\r\n    },\r\n    ajaxType: {\r\n      type: String,\r\n      default: 'post'\r\n    },\r\n    queryparams: {\r\n      // 查询条件获取方法\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    },\r\n    serverUri: {\r\n      // 获取数据访问uri，可自定义\r\n      type: String,\r\n      default: 'plan-service/queryTreeAssistData'\r\n    },\r\n    clickmethod: { // 节点被点击时的回调\r\n      type: Function,\r\n      default: function(obj, node, vess) {}\r\n    },\r\n    checkChange: { // 节点选中状态发生变化时的回调\r\n      type: Function,\r\n      default: function(obj, isChecked, ischildChecked) {}\r\n    },\r\n    nodecheckmethod: { // 当复选框被点击的时候触发\r\n      type: Function,\r\n      default: function(obj, checksObj) {}\r\n    },\r\n    afterloadmethod: { // 数据已经加载完\r\n      type: Function,\r\n      default: function(datas) {}\r\n    },\r\n    treestyle: {\r\n      type: [Object, String],\r\n      default: () => ({})\r\n    },\r\n    eltreestyle: {\r\n      type: [Object, String],\r\n      default: () => ({})\r\n    },\r\n    visible: {\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    openLoading: {\r\n      type: Boolean\r\n    },\r\n    openTreeCache: {\r\n      type: Boolean,\r\n      default() {\r\n        return true\r\n      }\r\n    },\r\n    defaultexpandedkeys: {\r\n      type: Array,\r\n      default() {\r\n        return ['root']\r\n      }\r\n    },\r\n    globalConfig: { // 树配置\r\n      type: Object,\r\n      default() {\r\n        return {}\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      filterText: '',\r\n      checkbox: this.isCheckbox,\r\n      isVisible: this.visible,\r\n      expandedkeys: [...this.defaultexpandedkeys], // 默认展开节点数组\r\n      checkedkeys: [...this.defaultcheckedkeys],\r\n      data: this.datas, // 数据\r\n      params: this.queryparams,\r\n      treeLoading: false,\r\n      cacheData: null,\r\n      useTreeCache: this.openTreeCache,\r\n      bossTreeHeight: { // 有input框，树内容区域父元素高度 - input高度； 无input框，树内容区域高度为父元素高度\r\n        fullHeight: !this.isShowInput,\r\n        notfullHeight: this.isShowInput\r\n      },\r\n      emptyTxt: this.emptyText,\r\n      emptyTip: '',\r\n      globalConfigIn: { ...defaultGlobalConfig }\r\n\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters('basicInfo', ['cacheTree']),\r\n    treeParams() {\r\n      return {\r\n        ajaxType: this.ajaxType,\r\n        serverUri: this.serverUri,\r\n        params: this.queryparams\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapMutations('basicInfo', ['setBossTree']),\r\n    // 初始化参数\r\n    initData() {\r\n      this.initGlobalConfig()\r\n    },\r\n    // 初始化api服务数据\r\n    initGlobalConfig() {\r\n      this.globalConfigIn = Object.assign(\r\n        {},\r\n        this.globalConfigIn,\r\n        this.globalConfig\r\n      )\r\n    },\r\n\r\n    // 隐藏树组件\r\n    hideTree() {\r\n      this.isVisible = !this.isVisible\r\n      this.$emit('update:visible', this.isVisible)\r\n    },\r\n\r\n    // 树内容过滤\r\n    filterNode(value, data) {\r\n      // 搜索过滤\r\n      // let data1 = data.children\r\n      // let data2 = {}\r\n      // data1.forEach(item => {\r\n      //   if (item.children) {\r\n      //     item.children.forEach(item2 => {\r\n      //       data2 = item2\r\n      //     })\r\n      //   }\r\n      // })\r\n      if (!value) return true\r\n      let filterByKey = 'label'\r\n      if (typeof this.treeProps === 'object' && JSON.stringify(this.treeProps) !== '{}') {\r\n        this.treeProps.label && (filterByKey = this.treeProps.label)\r\n      }\r\n      return data[filterByKey].indexOf(value) !== -1\r\n    },\r\n\r\n    // 获取缓存数据\r\n    getCacheData() {\r\n      this.data = this.cacheData\r\n      this.$nextTick(() => {\r\n        this.afterloadmethod(this.data)\r\n      })\r\n    },\r\n\r\n    // 获取请求数据\r\n    async getHttpData() {\r\n      let self = this\r\n      if (this.treeLoading) {\r\n        return\r\n      }\r\n      this.emptyTip = ''\r\n      this.openLoading && (this.treeLoading = true)\r\n      self.data = []\r\n      await this.$http[this.ajaxType](this.serverUri, this.params).then(res => {\r\n        // let res1 = JSON.parse((res))\r\n        let treeResdata = []\r\n        // self.data = (res && Array.isArray(res)) ? res : ((res.code === '100000' || res.code === '200') ? res.data : [])\r\n        if (res.data.results) {\r\n          treeResdata = (res && Array.isArray(res)) ? res : ((res.code === '000000') ? res.data.results : [])\r\n          treeResdata.forEach(item => {\r\n            item.label = item.businessName\r\n            item.code = item.id\r\n            if (item.children) {\r\n              item.children.forEach(item1 => {\r\n                item1.label = item1.businessName\r\n                item1.code = item1.id\r\n                if (item1.children) {\r\n                  item1.children.forEach(item2 => {\r\n                    item2.label = item2.businessName\r\n                    item2.code = item2.id\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          })\r\n          if (self.isNeedRoot) {\r\n            const result = [\r\n              {\r\n                id: 'root',\r\n                label: self.rootname,\r\n                code: 'root',\r\n                isleaf: '0',\r\n                children: treeResdata\r\n              }\r\n            ]\r\n            self.data = result\r\n            console.log(self.data)\r\n          } else {\r\n            self.data = treeResdata\r\n          }\r\n        } else {\r\n          if (res.code) {\r\n            let busdata = []\r\n            busdata.push(res.data)\r\n            console.log(busdata)\r\n            treeResdata = (res && Array.isArray(res)) ? res : ((res.code === '000000') ? busdata : [])\r\n            treeResdata.forEach(item => {\r\n              item.label = item.businessName\r\n              item.code = item.id\r\n              if (item.children) {\r\n                item.children.forEach(item1 => {\r\n                  item1.label = item1.businessName\r\n                  item1.code = item1.id\r\n                  if (item1.children) {\r\n                    item1.children.forEach(item2 => {\r\n                      item2.label = item2.businessName\r\n                      item2.code = item2.id\r\n                    })\r\n                  }\r\n                })\r\n              }\r\n            })\r\n            if (self.isNeedRoot) {\r\n              const result = [\r\n                {\r\n                  id: 'root',\r\n                  label: self.rootname,\r\n                  code: 'root',\r\n                  isleaf: '0',\r\n                  children: treeResdata\r\n                }\r\n              ]\r\n              self.data = result\r\n              console.log(self.data)\r\n            } else {\r\n              self.data = treeResdata\r\n            }\r\n          } else {\r\n            treeResdata = (res && Array.isArray(res)) ? res : ((res.rscode === '100000') ? res.data : [])\r\n            treeResdata.forEach(item => {\r\n              item.label = item.code + '-' + item.name\r\n              if (item.children) {\r\n                item.children.forEach(item1 => {\r\n                  item1.label = item1.code + '-' + item1.name\r\n                })\r\n              }\r\n            })\r\n            if (self.isNeedRoot) {\r\n              const result = [\r\n                {\r\n                  id: 'root',\r\n                  label: self.rootname,\r\n                  code: 'root',\r\n                  isleaf: '0',\r\n                  children: treeResdata\r\n                }\r\n              ]\r\n              self.data = result\r\n              console.log(self.data)\r\n            } else {\r\n              self.data = treeResdata\r\n            }\r\n          }\r\n        }\r\n        // let treeResdata = (res1 && Array.isArray(res1)) ? res1 : ((res1.code === '000') ? res1 : [])\r\n\r\n        // 关闭模态框\r\n        self.treeLoading = false\r\n\r\n        // 缓存数据\r\n        self.setBossTree({\r\n          params: self.treeParams,\r\n          treeData: self.data\r\n        })\r\n\r\n        this.emptyTip = this.emptyTxt\r\n        // 树加载完，回调数据\r\n        self.$nextTick(() => {\r\n          self.afterloadmethod(self.data)\r\n        })\r\n      }).catch(err => {\r\n        console.log(err)\r\n      })\r\n    },\r\n\r\n    // 加载树\r\n    initTree() { // 使用异步调用，返回结果后再执行\r\n      if (this.isServer) {\r\n        // this.getHttpData()\r\n        this.cacheData = this.cacheTree(this.treeParams)\r\n        // console.log(55, this.useTreeCache, this.cacheData)\r\n        if (this.useTreeCache && this.cacheData) {\r\n          // console.log('来自树缓存数据')\r\n          this.getCacheData()\r\n        } else {\r\n          // console.log('来自树请求数据')\r\n          this.getHttpData()\r\n        }\r\n      }\r\n    },\r\n\r\n    // 自定义树节点内容区渲染模版\r\n    renderContent(h, { node, data, store }) {\r\n      return h('span', [\r\n        h('i', { class: '' }),\r\n        h('span', { style: { 'margin-left': '4px' } }, node.label)\r\n      ])\r\n    },\r\n\r\n    // 勾选\r\n    setFirstChildNode(isFirst, level) {\r\n      // isFirst true 强制选中第一个， false 如果没有默认选中就选中第一个, level 层级，哪一层级的第一个节点\r\n      if (this.data && this.data.length) {\r\n        this.$nextTick(() => {\r\n          let curnode = this.$refs.tree.getCurrentNode()\r\n          this.expandedkeys.length = 0\r\n          if (!isFirst && curnode) {\r\n            this.setCurrentNodeByKey(curnode.id)\r\n            return\r\n          }\r\n          let curLevel = 1\r\n          let key = this.getFirstChildNode(\r\n            this.data[0],\r\n            level,\r\n            curLevel\r\n          )\r\n          this.setCurrentNodeByKey(key.id)\r\n        })\r\n      }\r\n    },\r\n    getFirstChildNode(data, level, curLevel) {\r\n      if (!level || curLevel < level) {\r\n        let childrens = data.children\r\n        if (childrens && childrens.length) {\r\n          return this.getFirstChildNode(\r\n            childrens[0],\r\n            level,\r\n            curLevel + 1\r\n          )\r\n        }\r\n      }\r\n      return data\r\n    },\r\n\r\n    //= =============================给调用者暴露的方法==============================//\r\n\r\n    // 返回树对象\r\n    treeOptionFn() {\r\n      return this.$refs.tree\r\n    },\r\n\r\n    // 刷新树\r\n    refreshTree() {\r\n      this.initTree()\r\n    },\r\n\r\n    setCheckedKeys(keys = []) {\r\n      this.$refs.tree && this.$refs.tree.setCheckedKeys(keys)\r\n    },\r\n\r\n    getCheckedKeys() {\r\n      this.$refs.tree && this.$refs.tree.getCheckedKeys()\r\n    },\r\n\r\n    // 获取当前树选中节点数据\r\n    getData() {\r\n      let rdata\r\n      if (this.checkbox) {\r\n        rdata = this.$refs.tree.getCheckedNodes()\r\n      } else {\r\n        rdata = this.$refs.tree.getCurrentNode()\r\n      }\r\n      return rdata\r\n    },\r\n\r\n    // 设置勾选\r\n    setCurrentNodeByKey(key) {\r\n      this.$refs.tree.setCurrentKey(key)\r\n      this.checkbox ? this.$refs.tree.setChecked(key, true, true) : this.$refs.tree.setChecked(key)\r\n      this.expandedkeys.push(key)\r\n      this.clickmethod(this.$refs.tree.getCurrentNode(), this)\r\n    },\r\n\r\n    //= =============================给调用者暴露的方法==============================//\r\n    currentChange(obj, node) { // 当前选中节点变化时触发的事件\r\n      this.$emit('currentChange', obj, node, this, this.$refs.tree)\r\n    },\r\n    nodeContextmenu(e, obj, node, vess) { // 当某一节点被鼠标右键点击时会触发该事件\r\n      this.$emit('nodeContextmenu', obj, node, this, this.$refs.tree)\r\n    },\r\n    nodeExpand(obj, node, vess) { // 节点被展开时触发的事件\r\n      this.$emit('nodeExpand', obj, node, vess, this, this.$refs.tree)\r\n    },\r\n    nodeCollapse(obj, node, vess) { // 节点被关闭时触发的事件\r\n      this.$emit('nodeCollapse', obj, node, vess, this, this.$refs.tree)\r\n    }\r\n\r\n  },\r\n  created() {\r\n    this.initTree()\r\n  },\r\n  mounted() {\r\n    this.initData()\r\n    // console.log(this.data, this.queryparams)\r\n  },\r\n  watch: {\r\n    globalConfig: {\r\n      handler(newValue, oldValue) {\r\n        this.initGlobalConfig()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    'globalConfig.inputVal'(val) {\r\n      console.log('bstree', val)\r\n      this.$refs.tree.filter(val)\r\n    },\r\n    emptyText(val) {\r\n      this.emptyTxt = val\r\n    },\r\n    isCheckbox(val) {\r\n      this.checkbox = val\r\n    },\r\n    visible(val) {\r\n      this.isVisible = val\r\n    },\r\n    filterText(val) {\r\n      this.$refs.tree.filter(val)\r\n    },\r\n    openTreeCache(val) {\r\n      this.useTreeCache = val\r\n    },\r\n    defaultcheckedkeys: {\r\n      handler(newvalue, oldValue) {\r\n        this.checkedkeys = newvalue\r\n        this.$forceUpdate()\r\n      },\r\n      immediate: true\r\n    },\r\n    datas: { // 表格配置监听\r\n      handler(newvalue, oldValue) {\r\n        this.data = newvalue\r\n      },\r\n      immediate: true\r\n    },\r\n    queryparams: {\r\n      handler(newvalue, oldValue) {\r\n        this.params = newvalue\r\n        // 树查询条件有变动，自动进行查询\r\n        // this.refreshTree()\r\n      },\r\n      deep: true,\r\n      immediate: true\r\n    },\r\n    defaultexpandedkeys: {\r\n      handler(newValue, oldValue) {\r\n        this.expandedkeys = newValue\r\n      },\r\n      immediate: true\r\n    },\r\n    checkedkeys: {\r\n      handler(newvalue, oldValue) {\r\n        console.log('333', newvalue)\r\n      },\r\n      immediate: true\r\n    }\r\n\r\n  }\r\n\r\n}\r\n</script>\r\n<style lang=\"scss\">\r\n.boss-tree__base{\r\n  height: calc(100% - 44px);\r\n  background-color: #fff;\r\n  .boss-tree__base__input{\r\n    height: 40px;\r\n    padding: 5px;\r\n  }\r\n  .boss-tree__base__tree{\r\n    overflow: auto;\r\n    .el-tree {\r\n      min-width: calc(100% - 20px);\r\n      font-size: 14px;\r\n      display: inline-block;\r\n      padding: 10px;\r\n    }\r\n  }\r\n\r\n  .fullHeight{\r\n    height: 100%;\r\n    max-height: 100%;\r\n  }\r\n  .notfullHeight{\r\n    height: calc(100% - 50px);\r\n    max-height: calc(100% - 50px);\r\n  }\r\n}\r\n\r\n</style>\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAAAA,UAAA,EAAAC,YAAA;AACA,SACAC,mBAAA,QACA;AACA;EACAC,IAAA;EACAC,KAAA;IACAC,UAAA;MAAA;MACAC,IAAA,EAAAC;IACA;IACAC,KAAA;MAAA;MACAF,IAAA,EAAAG,KAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACAC,SAAA;MACAN,IAAA,EAAAO,MAAA;MACAH,OAAA,WAAAC,SAAA;IACA;IACAG,WAAA;MAAA;MACAR,IAAA,EAAAC;IACA;IACAQ,MAAA;MAAA;MACAT,IAAA,EAAAU,MAAA;MACAN,OAAA;IACA;IACAO,kBAAA;MACAX,IAAA,EAAAG,KAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACAO,UAAA;MACAZ,IAAA,EAAAC;IACA;IACAY,QAAA;MAAA;MACAb,IAAA,EAAAU,MAAA;MACAN,OAAA;IACA;IACAU,gBAAA;MACAd,IAAA,EAAAC,OAAA;MACAG,OAAA,WAAAC,SAAA;QACA;MACA;IACA;IACAU,SAAA;MAAA;MACAf,IAAA,EAAAC;IACA;IACAe,IAAA;MAAA;MACAhB,IAAA,EAAAU,MAAA;MACAN,OAAA;IACA;IACAa,SAAA;MACAjB,IAAA,EAAAU,MAAA;MACAN,OAAA;IACA;IACAc,QAAA;MAAA;MACAlB,IAAA,EAAAC;IACA;IACAkB,QAAA;MACAnB,IAAA,EAAAU,MAAA;MACAN,OAAA;IACA;IACAgB,WAAA;MACA;MACApB,IAAA,EAAAO,MAAA;MACAH,OAAA,WAAAC,SAAA;QACA;MACA;IACA;IACAgB,SAAA;MACA;MACArB,IAAA,EAAAU,MAAA;MACAN,OAAA;IACA;IACAkB,WAAA;MAAA;MACAtB,IAAA,EAAAuB,QAAA;MACAnB,OAAA,WAAAC,SAAAmB,GAAA,EAAAC,IAAA,EAAAC,IAAA;IACA;IACAC,WAAA;MAAA;MACA3B,IAAA,EAAAuB,QAAA;MACAnB,OAAA,WAAAC,SAAAmB,GAAA,EAAAI,SAAA,EAAAC,cAAA;IACA;IACAC,eAAA;MAAA;MACA9B,IAAA,EAAAuB,QAAA;MACAnB,OAAA,WAAAC,SAAAmB,GAAA,EAAAO,SAAA;IACA;IACAC,eAAA;MAAA;MACAhC,IAAA,EAAAuB,QAAA;MACAnB,OAAA,WAAAC,SAAAH,KAAA;IACA;IACA+B,SAAA;MACAjC,IAAA,GAAAO,MAAA,EAAAG,MAAA;MACAN,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACA6B,WAAA;MACAlC,IAAA,GAAAO,MAAA,EAAAG,MAAA;MACAN,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACA8B,OAAA;MACAnC,IAAA,EAAAC,OAAA;MACAG,OAAA,WAAAC,SAAA;QACA;MACA;IACA;IACA+B,WAAA;MACApC,IAAA,EAAAC;IACA;IACAoC,aAAA;MACArC,IAAA,EAAAC,OAAA;MACAG,OAAA,WAAAC,SAAA;QACA;MACA;IACA;IACAiC,mBAAA;MACAtC,IAAA,EAAAG,KAAA;MACAC,OAAA,WAAAC,SAAA;QACA;MACA;IACA;IACAkC,YAAA;MAAA;MACAvC,IAAA,EAAAO,MAAA;MACAH,OAAA,WAAAC,SAAA;QACA;MACA;IACA;EACA;EACAmC,IAAA,WAAAA,KAAA;IACA;MACAC,UAAA;MACAC,QAAA,OAAA3C,UAAA;MACA4C,SAAA,OAAAR,OAAA;MACAS,YAAA,EAAAC,kBAAA,MAAAP,mBAAA;MAAA;MACAQ,WAAA,EAAAD,kBAAA,MAAAlC,kBAAA;MACA6B,IAAA,OAAAtC,KAAA;MAAA;MACA6C,MAAA,OAAA3B,WAAA;MACA4B,WAAA;MACAC,SAAA;MACAC,YAAA,OAAAb,aAAA;MACAc,cAAA;QAAA;QACAC,UAAA,QAAA5C,WAAA;QACA6C,aAAA,OAAA7C;MACA;MACA8C,QAAA,OAAArC,SAAA;MACAsC,QAAA;MACAC,cAAA,EAAAC,aAAA,KAAA7D,mBAAA;IAEA;EACA;EACA8D,QAAA,EAAAD,aAAA,CAAAA,aAAA,KACA/D,UAAA;IACAiE,UAAA,WAAAA,WAAA;MACA;QACAxC,QAAA,OAAAA,QAAA;QACAE,SAAA,OAAAA,SAAA;QACA0B,MAAA,OAAA3B;MACA;IACA;EAAA,EACA;EACAwC,OAAA,EAAAH,aAAA,CAAAA,aAAA,KACA9D,YAAA;IACA;IACAkE,QAAA,WAAAA,SAAA;MACA,KAAAC,gBAAA;IACA;IACA;IACAA,gBAAA,WAAAA,iBAAA;MACA,KAAAN,cAAA,GAAAjD,MAAA,CAAAwD,MAAA,CACA,IACA,KAAAP,cAAA,EACA,KAAAjB,YACA;IACA;IAEA;IACAyB,QAAA,WAAAA,SAAA;MACA,KAAArB,SAAA,SAAAA,SAAA;MACA,KAAAsB,KAAA,wBAAAtB,SAAA;IACA;IAEA;IACAuB,UAAA,WAAAA,WAAAC,KAAA,EAAA3B,IAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,KAAA2B,KAAA;MACA,IAAAC,WAAA;MACA,IAAAC,OAAA,MAAA/D,SAAA,kBAAAgE,IAAA,CAAAC,SAAA,MAAAjE,SAAA;QACA,KAAAA,SAAA,CAAAkE,KAAA,KAAAJ,WAAA,QAAA9D,SAAA,CAAAkE,KAAA;MACA;MACA,OAAAhC,IAAA,CAAA4B,WAAA,EAAAK,OAAA,CAAAN,KAAA;IACA;IAEA;IACAO,YAAA,WAAAA,aAAA;MAAA,IAAAC,KAAA;MACA,KAAAnC,IAAA,QAAAS,SAAA;MACA,KAAA2B,SAAA;QACAD,KAAA,CAAA3C,eAAA,CAAA2C,KAAA,CAAAnC,IAAA;MACA;IACA;IAEA;IACAqC,WAAA,WAAAA,YAAA;MAAA,IAAAC,MAAA;MAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,IAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACAL,IAAA,GAAAL,MAAA;cAAA,KACAA,MAAA,CAAA9B,WAAA;gBAAAsC,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA;YAAA;cAGAX,MAAA,CAAAvB,QAAA;cACAuB,MAAA,CAAA1C,WAAA,KAAA0C,MAAA,CAAA9B,WAAA;cACAmC,IAAA,CAAA3C,IAAA;cAAA8C,QAAA,CAAAE,IAAA;cAAA,OACAV,MAAA,CAAAY,KAAA,CAAAZ,MAAA,CAAA3D,QAAA,EAAA2D,MAAA,CAAAzD,SAAA,EAAAyD,MAAA,CAAA/B,MAAA,EAAA4C,IAAA,WAAAC,GAAA;gBACA;gBACA,IAAAC,WAAA;gBACA;gBACA,IAAAD,GAAA,CAAApD,IAAA,CAAAsD,OAAA;kBACAD,WAAA,GAAAD,GAAA,IAAAzF,KAAA,CAAA4F,OAAA,CAAAH,GAAA,IAAAA,GAAA,GAAAA,GAAA,CAAAI,IAAA,gBAAAJ,GAAA,CAAApD,IAAA,CAAAsD,OAAA;kBACAD,WAAA,CAAAI,OAAA,WAAAC,IAAA;oBACAA,IAAA,CAAA1B,KAAA,GAAA0B,IAAA,CAAAC,YAAA;oBACAD,IAAA,CAAAF,IAAA,GAAAE,IAAA,CAAAE,EAAA;oBACA,IAAAF,IAAA,CAAAG,QAAA;sBACAH,IAAA,CAAAG,QAAA,CAAAJ,OAAA,WAAAK,KAAA;wBACAA,KAAA,CAAA9B,KAAA,GAAA8B,KAAA,CAAAH,YAAA;wBACAG,KAAA,CAAAN,IAAA,GAAAM,KAAA,CAAAF,EAAA;wBACA,IAAAE,KAAA,CAAAD,QAAA;0BACAC,KAAA,CAAAD,QAAA,CAAAJ,OAAA,WAAAM,KAAA;4BACAA,KAAA,CAAA/B,KAAA,GAAA+B,KAAA,CAAAJ,YAAA;4BACAI,KAAA,CAAAP,IAAA,GAAAO,KAAA,CAAAH,EAAA;0BACA;wBACA;sBACA;oBACA;kBACA;kBACA,IAAAjB,IAAA,CAAAvE,UAAA;oBACA,IAAA4F,MAAA,IACA;sBACAJ,EAAA;sBACA5B,KAAA,EAAAW,IAAA,CAAAtE,QAAA;sBACAmF,IAAA;sBACAS,MAAA;sBACAJ,QAAA,EAAAR;oBACA,EACA;oBACAV,IAAA,CAAA3C,IAAA,GAAAgE,MAAA;oBACAE,OAAA,CAAAC,GAAA,CAAAxB,IAAA,CAAA3C,IAAA;kBACA;oBACA2C,IAAA,CAAA3C,IAAA,GAAAqD,WAAA;kBACA;gBACA;kBACA,IAAAD,GAAA,CAAAI,IAAA;oBACA,IAAAY,OAAA;oBACAA,OAAA,CAAAC,IAAA,CAAAjB,GAAA,CAAApD,IAAA;oBACAkE,OAAA,CAAAC,GAAA,CAAAC,OAAA;oBACAf,WAAA,GAAAD,GAAA,IAAAzF,KAAA,CAAA4F,OAAA,CAAAH,GAAA,IAAAA,GAAA,GAAAA,GAAA,CAAAI,IAAA,gBAAAY,OAAA;oBACAf,WAAA,CAAAI,OAAA,WAAAC,IAAA;sBACAA,IAAA,CAAA1B,KAAA,GAAA0B,IAAA,CAAAC,YAAA;sBACAD,IAAA,CAAAF,IAAA,GAAAE,IAAA,CAAAE,EAAA;sBACA,IAAAF,IAAA,CAAAG,QAAA;wBACAH,IAAA,CAAAG,QAAA,CAAAJ,OAAA,WAAAK,KAAA;0BACAA,KAAA,CAAA9B,KAAA,GAAA8B,KAAA,CAAAH,YAAA;0BACAG,KAAA,CAAAN,IAAA,GAAAM,KAAA,CAAAF,EAAA;0BACA,IAAAE,KAAA,CAAAD,QAAA;4BACAC,KAAA,CAAAD,QAAA,CAAAJ,OAAA,WAAAM,KAAA;8BACAA,KAAA,CAAA/B,KAAA,GAAA+B,KAAA,CAAAJ,YAAA;8BACAI,KAAA,CAAAP,IAAA,GAAAO,KAAA,CAAAH,EAAA;4BACA;0BACA;wBACA;sBACA;oBACA;oBACA,IAAAjB,IAAA,CAAAvE,UAAA;sBACA,IAAA4F,OAAA,IACA;wBACAJ,EAAA;wBACA5B,KAAA,EAAAW,IAAA,CAAAtE,QAAA;wBACAmF,IAAA;wBACAS,MAAA;wBACAJ,QAAA,EAAAR;sBACA,EACA;sBACAV,IAAA,CAAA3C,IAAA,GAAAgE,OAAA;sBACAE,OAAA,CAAAC,GAAA,CAAAxB,IAAA,CAAA3C,IAAA;oBACA;sBACA2C,IAAA,CAAA3C,IAAA,GAAAqD,WAAA;oBACA;kBACA;oBACAA,WAAA,GAAAD,GAAA,IAAAzF,KAAA,CAAA4F,OAAA,CAAAH,GAAA,IAAAA,GAAA,GAAAA,GAAA,CAAAkB,MAAA,gBAAAlB,GAAA,CAAApD,IAAA;oBACAqD,WAAA,CAAAI,OAAA,WAAAC,IAAA;sBACAA,IAAA,CAAA1B,KAAA,GAAA0B,IAAA,CAAAF,IAAA,SAAAE,IAAA,CAAArG,IAAA;sBACA,IAAAqG,IAAA,CAAAG,QAAA;wBACAH,IAAA,CAAAG,QAAA,CAAAJ,OAAA,WAAAK,KAAA;0BACAA,KAAA,CAAA9B,KAAA,GAAA8B,KAAA,CAAAN,IAAA,SAAAM,KAAA,CAAAzG,IAAA;wBACA;sBACA;oBACA;oBACA,IAAAsF,IAAA,CAAAvE,UAAA;sBACA,IAAA4F,QAAA,IACA;wBACAJ,EAAA;wBACA5B,KAAA,EAAAW,IAAA,CAAAtE,QAAA;wBACAmF,IAAA;wBACAS,MAAA;wBACAJ,QAAA,EAAAR;sBACA,EACA;sBACAV,IAAA,CAAA3C,IAAA,GAAAgE,QAAA;sBACAE,OAAA,CAAAC,GAAA,CAAAxB,IAAA,CAAA3C,IAAA;oBACA;sBACA2C,IAAA,CAAA3C,IAAA,GAAAqD,WAAA;oBACA;kBACA;gBACA;gBACA;;gBAEA;gBACAV,IAAA,CAAAnC,WAAA;;gBAEA;gBACAmC,IAAA,CAAA4B,WAAA;kBACAhE,MAAA,EAAAoC,IAAA,CAAAxB,UAAA;kBACAqD,QAAA,EAAA7B,IAAA,CAAA3C;gBACA;gBAEAsC,MAAA,CAAAvB,QAAA,GAAAuB,MAAA,CAAAxB,QAAA;gBACA;gBACA6B,IAAA,CAAAP,SAAA;kBACAO,IAAA,CAAAnD,eAAA,CAAAmD,IAAA,CAAA3C,IAAA;gBACA;cACA,GAAAyE,KAAA,WAAAC,GAAA;gBACAR,OAAA,CAAAC,GAAA,CAAAO,GAAA;cACA;YAAA;YAAA;cAAA,OAAA5B,QAAA,CAAA6B,IAAA;UAAA;QAAA,GAAAjC,OAAA;MAAA;IACA;IAEA;IACAkC,QAAA,WAAAA,SAAA;MAAA;MACA,SAAAlG,QAAA;QACA;QACA,KAAA+B,SAAA,QAAAoE,SAAA,MAAA1D,UAAA;QACA;QACA,SAAAT,YAAA,SAAAD,SAAA;UACA;UACA,KAAAyB,YAAA;QACA;UACA;UACA,KAAAG,WAAA;QACA;MACA;IACA;IAEA;IACAyC,aAAA,WAAAA,cAAAC,CAAA,EAAAC,IAAA;MAAA,IAAA/F,IAAA,GAAA+F,IAAA,CAAA/F,IAAA;QAAAe,IAAA,GAAAgF,IAAA,CAAAhF,IAAA;QAAAiF,KAAA,GAAAD,IAAA,CAAAC,KAAA;MACA,OAAAF,CAAA,UACAA,CAAA;QAAAG,KAAA;MAAA,IACAH,CAAA;QAAAI,KAAA;UAAA;QAAA;MAAA,GAAAlG,IAAA,CAAA+C,KAAA,EACA;IACA;IAEA;IACAoD,iBAAA,WAAAA,kBAAAC,OAAA,EAAAC,KAAA;MAAA,IAAAC,MAAA;MACA;MACA,SAAAvF,IAAA,SAAAA,IAAA,CAAAwF,MAAA;QACA,KAAApD,SAAA;UACA,IAAAqD,OAAA,GAAAF,MAAA,CAAAG,KAAA,CAAAC,IAAA,CAAAC,cAAA;UACAL,MAAA,CAAAnF,YAAA,CAAAoF,MAAA;UACA,KAAAH,OAAA,IAAAI,OAAA;YACAF,MAAA,CAAAM,mBAAA,CAAAJ,OAAA,CAAA7B,EAAA;YACA;UACA;UACA,IAAAkC,QAAA;UACA,IAAAC,GAAA,GAAAR,MAAA,CAAAS,iBAAA,CACAT,MAAA,CAAAvF,IAAA,KACAsF,KAAA,EACAQ,QACA;UACAP,MAAA,CAAAM,mBAAA,CAAAE,GAAA,CAAAnC,EAAA;QACA;MACA;IACA;IACAoC,iBAAA,WAAAA,kBAAAhG,IAAA,EAAAsF,KAAA,EAAAQ,QAAA;MACA,KAAAR,KAAA,IAAAQ,QAAA,GAAAR,KAAA;QACA,IAAAW,SAAA,GAAAjG,IAAA,CAAA6D,QAAA;QACA,IAAAoC,SAAA,IAAAA,SAAA,CAAAT,MAAA;UACA,YAAAQ,iBAAA,CACAC,SAAA,KACAX,KAAA,EACAQ,QAAA,IACA;QACA;MACA;MACA,OAAA9F,IAAA;IACA;IAEA;IAEA;IACAkG,YAAA,WAAAA,aAAA;MACA,YAAAR,KAAA,CAAAC,IAAA;IACA;IAEA;IACAQ,WAAA,WAAAA,YAAA;MACA,KAAAvB,QAAA;IACA;IAEAwB,cAAA,WAAAA,eAAA;MAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAd,MAAA,QAAAc,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,KAAAZ,KAAA,CAAAC,IAAA,SAAAD,KAAA,CAAAC,IAAA,CAAAS,cAAA,CAAAC,IAAA;IACA;IAEAG,cAAA,WAAAA,eAAA;MACA,KAAAd,KAAA,CAAAC,IAAA,SAAAD,KAAA,CAAAC,IAAA,CAAAa,cAAA;IACA;IAEA;IACAC,OAAA,WAAAA,QAAA;MACA,IAAAC,KAAA;MACA,SAAAxG,QAAA;QACAwG,KAAA,QAAAhB,KAAA,CAAAC,IAAA,CAAAgB,eAAA;MACA;QACAD,KAAA,QAAAhB,KAAA,CAAAC,IAAA,CAAAC,cAAA;MACA;MACA,OAAAc,KAAA;IACA;IAEA;IACAb,mBAAA,WAAAA,oBAAAE,GAAA;MACA,KAAAL,KAAA,CAAAC,IAAA,CAAAiB,aAAA,CAAAb,GAAA;MACA,KAAA7F,QAAA,QAAAwF,KAAA,CAAAC,IAAA,CAAAkB,UAAA,CAAAd,GAAA,qBAAAL,KAAA,CAAAC,IAAA,CAAAkB,UAAA,CAAAd,GAAA;MACA,KAAA3F,YAAA,CAAAiE,IAAA,CAAA0B,GAAA;MACA,KAAAjH,WAAA,MAAA4G,KAAA,CAAAC,IAAA,CAAAC,cAAA;IACA;IAEA;IACAkB,aAAA,WAAAA,cAAA9H,GAAA,EAAAC,IAAA;MAAA;MACA,KAAAwC,KAAA,kBAAAzC,GAAA,EAAAC,IAAA,aAAAyG,KAAA,CAAAC,IAAA;IACA;IACAoB,eAAA,WAAAA,gBAAAC,CAAA,EAAAhI,GAAA,EAAAC,IAAA,EAAAC,IAAA;MAAA;MACA,KAAAuC,KAAA,oBAAAzC,GAAA,EAAAC,IAAA,aAAAyG,KAAA,CAAAC,IAAA;IACA;IACAsB,UAAA,WAAAA,WAAAjI,GAAA,EAAAC,IAAA,EAAAC,IAAA;MAAA;MACA,KAAAuC,KAAA,eAAAzC,GAAA,EAAAC,IAAA,EAAAC,IAAA,aAAAwG,KAAA,CAAAC,IAAA;IACA;IACAuB,YAAA,WAAAA,aAAAlI,GAAA,EAAAC,IAAA,EAAAC,IAAA;MAAA;MACA,KAAAuC,KAAA,iBAAAzC,GAAA,EAAAC,IAAA,EAAAC,IAAA,aAAAwG,KAAA,CAAAC,IAAA;IACA;EAAA,EAEA;EACAwB,OAAA,WAAAA,QAAA;IACA,KAAAvC,QAAA;EACA;EACAwC,OAAA,WAAAA,QAAA;IACA,KAAA/F,QAAA;IACA;EACA;;EACAgG,KAAA;IACAtH,YAAA;MACAuH,OAAA,WAAAA,QAAAC,QAAA,EAAAC,QAAA;QACA,KAAAlG,gBAAA;MACA;MACAmG,IAAA;MACAC,SAAA;IACA;IACA,kCAAAC,qBAAAC,GAAA;MACA1D,OAAA,CAAAC,GAAA,WAAAyD,GAAA;MACA,KAAAlC,KAAA,CAAAC,IAAA,CAAAkC,MAAA,CAAAD,GAAA;IACA;IACAnJ,SAAA,WAAAA,UAAAmJ,GAAA;MACA,KAAA9G,QAAA,GAAA8G,GAAA;IACA;IACArK,UAAA,WAAAA,WAAAqK,GAAA;MACA,KAAA1H,QAAA,GAAA0H,GAAA;IACA;IACAjI,OAAA,WAAAA,QAAAiI,GAAA;MACA,KAAAzH,SAAA,GAAAyH,GAAA;IACA;IACA3H,UAAA,WAAAA,WAAA2H,GAAA;MACA,KAAAlC,KAAA,CAAAC,IAAA,CAAAkC,MAAA,CAAAD,GAAA;IACA;IACA/H,aAAA,WAAAA,cAAA+H,GAAA;MACA,KAAAlH,YAAA,GAAAkH,GAAA;IACA;IACAzJ,kBAAA;MACAmJ,OAAA,WAAAA,QAAAQ,QAAA,EAAAN,QAAA;QACA,KAAAlH,WAAA,GAAAwH,QAAA;QACA,KAAAC,YAAA;MACA;MACAL,SAAA;IACA;IACAhK,KAAA;MAAA;MACA4J,OAAA,WAAAA,QAAAQ,QAAA,EAAAN,QAAA;QACA,KAAAxH,IAAA,GAAA8H,QAAA;MACA;MACAJ,SAAA;IACA;IACA9I,WAAA;MACA0I,OAAA,WAAAA,QAAAQ,QAAA,EAAAN,QAAA;QACA,KAAAjH,MAAA,GAAAuH,QAAA;QACA;QACA;MACA;;MACAL,IAAA;MACAC,SAAA;IACA;IACA5H,mBAAA;MACAwH,OAAA,WAAAA,QAAAC,QAAA,EAAAC,QAAA;QACA,KAAApH,YAAA,GAAAmH,QAAA;MACA;MACAG,SAAA;IACA;IACApH,WAAA;MACAgH,OAAA,WAAAA,QAAAQ,QAAA,EAAAN,QAAA;QACAtD,OAAA,CAAAC,GAAA,QAAA2D,QAAA;MACA;MACAJ,SAAA;IACA;EAEA;AAEA"}]}