{"remainingRequest":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\Table\\util\\methods.js","dependencies":[{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\src\\components\\Table\\util\\methods.js","mtime":1694505521569},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\babel.config.js","mtime":1694505520209},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\何小龙\\Desktop\\platformweb-fb\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","iter","Array","from","isArray","_arrayLikeToArray","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","_toPropertyKey","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","_createForOfIteratorHelper","allowArrayLike","it","F","_e","normalCompletion","didErr","step","_e2","minLen","toString","test","len","arr2","tableColumns","filterTypeMap","formatters","util","evalCalcUtil","getColumnMoneyFilterConfig","XEUtils","rowUuidKeyName","rowUniqueLevelKey","setRowUuidKey","rows","instance","level","_iterator","_step","_row$children","row","Reflect","set","uniqueId","concat","children","sortMethods","arrSortGloabal","data","property","order","sort","b","localeCompare","arrSortString","_ref","$table","column","arrSortNumber","_ref2","arrSortStringSuffix","_ref3","rTypeSuffix","arrSortNumberSuffix","_ref4","sortInner","parseFloat","treeConfig","item","_item$children","arrSort","_ref5","sortTypeMap","$vxeMoney","$vxeDays","$vxeCalculate","$vxeTree","$vxeInput","$vxeSelect","$vxeEditDownTextarea","$vxeTime","$vxeRadio","$vxeCheckbox","$$vxeEditDownJson","$vxeEditDownConditions","$vxeInterlet","render","own","editRender","cellRender","contentRender","registFn","registGlobleFormatters","index","$VXETable","formats","add","bind","registGloableConlumsConfig","reverRegistGloableConlumsConfig","arrc","registSingelRowConfig","registSingelRowFilter","registSingRowCalcRenderer","formula","registSingelRowFilter_old","filters","filterRender","itemRender","field","tableConfigCp","filterMethod","_ref6","option","options","filterMultiple","isCase","dataType","vals","sVal","getbasicDataType","props","indexOf","assign","registSingelRowFormater","formatter","registSingelRowRenderer","cellRenderConfig","registSingelRowSorts","registRenderers","reverRegistRenderers","registFilters","registFormatters","registTableRender","renderers","renderer","initMethods","initCreated","initColumnMoneyFilter","initMounted","initFirst","tableGlobalConfigIn","dragColumnsConfig","openDrag","columnDrop","setColumnDrop","rowDrop","setRowDrop","initTableGlobalConfig","initContextMenuConfig","initSeqConfig","initExpandConfig","initToolbar","initEditConfig","initTableFormConfig","initCalculateConstraintConfig","initTableConfig","initEditRules","initTable","initTableData","initTableConlums","setPagerConfig","setColumnMoneyFilter","tableColumnsConfig","completeMoneyFilter","tableGlobalConfig","globalConfig","checkType","seq","sortable","tableConfig","initCacheColumn","JSON","parse","localStorage","getItem","tableId","map","k","stringify","_iterator2","_step2","item2","columnsConfig","calculateConstraintConfigIn","cacheStatus","generateCalcColFormulaMap","tableColumnsConfigIn","unidirectionalData","deepCopy","generateTableConlums","initScrollLoadConfig","scrollLoadConfig","scrollLoadConfigCp","conlums","optionSort","generateOptionRow","hasOptionRow","optionRow","generateBottomGroupTotal","calculateConstraintConfig","cellDataConfig","generatGetDataConfigMap","constrainRowDataMap","toolbarConfig","curtoolbarConfig","toolbarConfigIn","toolbarConfigInCopy","toolbarConfigInCp","visible","yearlist","formSearchData","year","setMoneyUnit","moneyUnit","loadScrollTableData","selection","$refs","xGrid","xTable","tableSourceData","removeCheckboxRow","tableDataIn","getTableData","fullData","addMissingFieldsAndCalcColFormula","$nextTick","reloadData","clearFilter","handleDefaults","initCalcPublicData","_this","tableData","rePerformAllCalcAndConstraintByData","_ref7","dataCodeRowMap","dataCodeRowArr","afterCalcData","tableDataMap","addMissingFields","$emit","tableFormConfig","tableFormConfigIn","startIndex","seqConfig","seqMethod","$seq","pagerConfigIn","pageSize","currentPage","finalSeq","isTreeSeqToFlat","_arr$","toTreeArray","treeExpandData","findIndex","id","editConfig","editConfigIn","trigger","mode","activeMethod","_ref8","rowIndex","columnIndex","showStatus","editable","editConfigInCp","_ref9","refreshTableIsEdit","expandConfig","expandConfigIn","expandAll","contextMenuConfig","contextMenuConfigIn","initTreeConfig","treeConfigIn","dblExpandAll","onlyDblTreeNodeExpand","dblExpand","accordion","initFooterConfig","footerConfigIn","footerConfig","editRulesIn","editRules","tableOptionFn","replaceColumnSlotKey","_key$replace","_key$replace2","_key$replace3","_key$replace4","console","log","replace","transTableCloumnToSource","cloumn","_this2","newColumn","_newColumn$v$children","updateFooter","updateData","_this3","exportData","openExport","original","importDataEvent","importData","setAllCheckboxRow","_this4","clearCheckboxRow","_this5","revertEvent","_this6","$XModal","confirm","reLoadTable","deleteSelectedRow","removeCurrentRow","deleteRowData","copySelectionRowData","_arguments","_this7","_callee","_callee$","_context","rowIndexTo","rowTo","newRowSelectionsData","getCheckboxRecords","insertMark","date","Date","format","isNew","_XID","insert","_ref10","setActiveCell","message","copyRowData","_arguments2","_this8","_callee2","rowSource","rowSourceData","newRowDataObj","_yield$self$$refs$xGr","_callee2$","_context2","getData","insertAt","setCurrentRow","validate","errMap","insertRowData","_arguments3","_this9","_callee3","_callee3$","_context3","dataObj","_ref11","reloadColumn","reLoadTableData","refreshTable","_this10","ifRenderTable","reloadTableConlums","reloadTableRenderData","reCalcAndReLoadTableData","_ref12","modifyItem","modifyData","_ref13","clearDataRenderField","itemN","ki","fliterTableDataUnexpand","_this11","cloneFullData","$XEUtils","clone","_this11$$refs$xGrid","isTreeExpandByRow","deleteProperty","insertRecords","getInsertRecords","updateRecords","getUpdateRecords","removeRecords","getRemoveRecords","_this$$refs$xGrid$$re","keepSource","_this$$refs$xGrid$get","visibleData","footerData","combinedData","getCombinedData","_this12","combinedType","accurateJiafa","transToNumber","getPureTableData","listData","getListData","_this$$refs$xGrid$$re2","_this$$refs$xGrid$get2","getOptionData","getRecordset","getInsertRowData","getSelectionData","validateChangeData","validEvent","_arguments4","_this13","_callee4","_callee4$","_context4","status","fullValidEvent","_arguments5","_this14","_callee5","msgList","_callee5$","_context5","$createElement","fullValidate","errList","params","rules","rule","title","msg","selectValidEvent","_this15","_callee6","selectRecords","_callee6$","_context6","insertEvent","_ref14","transTableColumnsToSource","columns","newColumns","transTableColumnToSource","tableEventFn","_this16","Sortable","$Sortable","$el","querySelector","onEnd","_ref15","oldIndex","targetTrElem","wrapperElem","parentNode","prevTrElem","previousElementSibling","tableTreeData","selfRow","getRowNode","selfNode","findTree","prevRow","prevNode","oldTrElem","insertBefore","currRow","items","splice","unshift","_this17","_ref16","newIndex","_xTable$getTableColum","getTableColumn","fullColumn","tableColumn","targetThElem","fixed","oldColumnIndex","getColumnIndex","newColumnIndex","storageColumn","$store","commit","loadColumn","onContextMenuClick","_ref17","event","menu","window","code","hideColumn","resetColumn","resizable","toggleAllCheckboxRow","remove","clearData","maximize","zoom","$Export","triggerExportOption","print","filename","isHeader","isFooter","clearSort","triggerReverseCheck","_xGrid$getTableData","setCheckboxRow","handleCheckboxChange","_this18","records","handleCheckboxAllChange","_this19","onOptionRowClick","methods","onOptionSortRowClick","_ref18","$rowIndex","optionType","temp","toolBarEvent","toolbarButtonClickEvent","button","callback","onToolbarOperrateClick","_this20","context","exportCustom","triggerImportOption","downloadTemplateCallback","Cb","downLoadImportTemplate","importSuccessCallback","expendAllLoading","setTimeout","expandAllState","_this20$$refs$xGrid","_this20$$refs$xGrid$c","clearTreeExpand","_this20$$refs$xGrid2","_this20$$refs$xGrid2$","setAllTreeExpand","finally","Unitlevel","oldUnitlevel","_this21","moneyUnitOptions","curSelectMoneyUnitOption","$forceUpdate","caliberDeclareHandle","caliberDeclareVisible","pageEvent","pagerConfig","pagerConfigInCp","handlePageChange","_ref19","loadData","handleRefresh","formSearchSubmit","getColumnsList","newColumnsList","delSearchfromMain","filterValue","_ref20","_this22","$event","newTbleDatas","search","dataNews","tableColumnsFieldArr","includes","onFuzzySearchEnter","keyCode","filtertext","filtertextCp","getHighlightedFilterText","val","regf","RegExp","match","searchParams","onAdvancedSearchBtnClick","proxyFn","handleSearch","_this23","filterName","trim","toLowerCase","filterRE","searchProps","rest","searchTree","some","eachTree","apiList","setTreeExpand","defaultExpandRows","searchEvent","debounce","leading","trailing","axiosEvent","$asyncGet","url","cb","_this24","_callee7","_callee7$","_context7","$http","get","origin","$asyncPost","_this25","_callee8","_callee8$","_context8","post","$post","response","$get","tableEvent","cellOptionCallBack","keydown","radioChange","cellClick","_this26","cellClickCheck","shiftKey","isCheckedByCheckboxRow","cellDblclick","treeNode","dblRowExpandAll","toggleTreeExpand","_this27","cellContextMenu","cellMouseenter","cellMouseleave","headerCellClick","headerCellDblclick","footerCellClick","footerCellDblclick","footerCellContextMenu","sortChange","filterChange","resizableChange","toggleRowExpand","contextMenuClick","currentChange","_this28","editClosed","_this29","$grid","performTableDataCalculate","_ref21","editActived","editDisabled","validError","scroll","scrollTop","enabled","target","offsetHeight","scrollHeight","debounceItemChange","performScrollLoad","scrollLoading","curGt","tatal","total","custom","formSubmitInvalid","formReset","formToggleCollapse","calculateTool","_this30","reductionColFormula","colFormulaConfig","reductionRowCodeFormula","rowCodeFormulaConfig","colFormulaMap","_ref22","_ref22$visibleColumn","visibleColumn","visibleColumnObj","colFormulaMapCp","hasCalcColFormulaMap","ifDoWhile","formulaEditable","colFormulaMapArr","cmai","regR","rowsKey","keyCF","keyC","reg","_visibleColumnObj$ite","_visibleColumnObj$ite2","calcResult","eval","Infinity","accurateFixed","accurateChuFa","digits","_visibleColumnObj$ite3","_visibleColumnObj$ite4","formulaDigits","round","reductionRowFormula","rowFormulaMap","rowFormulaMapCp","hasCalcrowFormulaMap","rowFormulaMapArr","formulaArr","split","join","rowCellArr","reverDataCodeRowMap","codeKey","reverCalcRowCodeFormula","itemcode","formColCalList","getFormColCalBack","getDataCodeRowMapCumulativeResult","rowCodeFormulaMap","_self$calculateConstr","calcAndConstraintTableId","calcAndConstraintItemCodeField","gradedSummaryFields","isTreeData","treeData","getDataCodeTreeData","_self$recursiveDataCo","recursiveDataCodeRowMap","rowCodeFormulaMapCp","hasCalcrowCodeFormulaMap","rowCodeFormulaMapArr","rowCodeFormumaMap","checkWhetherExcuteColCalculate","itemCode","curRowCodeFormulaMap","rowCodeFormulaFieldMap","itemCodeIndex","riverColumnsGenerateCalcColFormulaMap","tableColumnsFieldMap","tableColumnsSingArr","tableColumnsTitleFieldMap","tableColumnsSingEditFieldArr","conlum","needResponsive","gradedSummary","formulaConditions","rowFormula","j","rePerformRowCalcAndConstraintSingleAndRerender","generateColumnsAllMap","viewToSourceMap","rowsObjTemp","tableColumnsTitleMap","needMap","multiple","isEditForFormula","isForFormulaData","isForFormula","isActiveCellEdit","_ref23","calcAndConstraint","_this31","getDataConfig","cell","formulaShow","colField","performGetData","_this32","_this32$calculateCons","getDataAxiosConfig","getDataParams","dataFieldArr","dataField","resData","statusField","successCode","generatGetDataMap","getDataRenderMap","performGetDataOption","_ref24","rePerformRowCalcAndConstraintAllAndRerender","_ref25","_this33","_self$calculateConstr2","enabledType","colConstraintConfig","rowCodeConstraintConfig","_self$recursiveDataCo2","performGetDataAll","performColFormula","performColFormulaAll","calcColType","performGradedSummaryAll","performRowCodeFormula","performColConstraint","performRowConstraintAll","performCellConstraint","performCellConstraintAll","updatedDataAfterConstraint","rePerformRowCalcAndConstraintSingle","_ref26","_ref27","_this34","_self$calculateConstr3","_self$recursiveDataCo3","performColFormulaSingle","gradedSummaryRow","performGradedSummarySingle","performRowConstraintSingle","performCellConstraintSingle","listToTreeByNestCodeLength","traverseTree","levelNo","pCode","pNCode","extendMapInfoField","_ref28","isEmptyObj","renderItemKey","renderItemKeyArr","performGetDataSingle","_ref29","_ref30","_ref31","getParentColFormulaConfig","_ref32","_ref33","reduce","preResult","curItemGradedSummaryValue","_ref34","_ref35","genarateRowConstraintMapAll","_ref36","genarateCellConstraintMapAll","_ref37","genarateRowConstraintMapSingle","_ref38","curCellConstraint","genarateCellConstraintMapSingle","constraintTool","_ref39","each","_ref40","dataMap","parsingRowConstraintConfigToMapData","expression","rowConstraintArr","parsingRowConstraintConfigToValueData","evalEpression","replaceRowEpressionValue","transExpressionToObject","pasingExpression","Set","keyF","Function","str","performRowConstraintAndRerender","constraintConfig","genarateRowConstraintMap","refreshColumn","valueArr","result","pos","substring","performConstraintAndRerender","genarateConstraintMap","_ref41","itemkey","itemCodeFieldArr","parsingCellConstraintConfigToValueData","replaceCellEpressionValue","_ref42","curRowConstrainRowDataMap","clear","otherFn","_this$$refs$xGrid$get3","dealData","newData","itemVal","prefix","substr","regTreePrefix","addTreeReg","formValidationConfig","_this35","pattern","addTreePrefixKey2","_this36","treeArr","$set","loopAddSubTotal","itemData","itVal","batchModify","onBatchModifyItemChange","modifyForm","omBatchModifySureClick","_ref43","formData","exportAndImportFn","computedExportRow","moneyKeys","ratioKeys","_this37","getPrintOption","exportModalFormData","checkColumns","isColGroup","onPrintClick","_this38","_this$getTableData","_item$cellRender","_item$cellRender2","_ref44","computedFullData","computedExpandData","fullDataTreeArr","treeExpandDataTreeArr","_fullDataTreeArr$","seqIndex","colItem","exportFormatter","hasOwn","newFormatterValue","_treeExpandDataTreeAr","latestTableData","exportModalData","isExportTree","saveType","fileName","isExportHead","isExportFooter","isExportOnlySourceField","isExportOnlyViewTitle","isExportOriginalData","isExportData","datas","ignoreColsTypes","viewValueFormat","customExportConfig","exportModalVisible","onExportClick","ec","_this39","successCb","onlyConfigExport","exportExcel","dealExportViewData","_this40","viewData","_this$generateColumns","colFormulaConfigm","keyIndex","reverseParseViewDataTosource","deaImportViewData","_this41","valiRules","_this$generateColumns2","validResult","validResultFieldTitle","formatData","process","env","VUE_APP_CONF_ISHB","valiRule","_loop","flag","fieldValue","required","collectValidError","validator","ruleField","importModalVisible","parseViewValue","transValue","viewValue","viewToSourceValueArr","label","newRule","$options","min","max","maxWidth","validCellRules","argObj","_this42","errorRules","syncVailds","cellValue","isFunction","customValid","isError","validRuleErr","isNumber","numVal","toNumber","getSize","all","exportByTempalte","exportConlums","exportConlumsTitle","_this$generateColumns3","tabPanal","config","importConfig","triggerDownloadTemplate","onDownloadTemplateClick","defaultConfig","exportViewTitleType","onImportFileClick","_this43","_callee9","_callee9$","_context9","$Import","importExcel","fileConfig","onImportClick","useMoneyFilter","_this44","_column$cellRender","_this44$tableConfig$g"],"sources":["C:/Users/何小龙/Desktop/platformweb-fb/src/components/Table/util/methods.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\r\n/* eslint-disable no-eval */\r\n/* eslint-disable no-new-func */\r\n// methods   Author:Titans@2396757591@qq.com\r\nimport { tableColumns, filterTypeMap } from '../config/tableDefaultConfig'\r\nimport formatters from './formatter'\r\nimport util from '../tool/util.js'\r\nimport evalCalcUtil from '../../tool/eval/index.js'\r\nimport { getColumnMoneyFilterConfig } from '../tool/tableColumnMoneyFilter'\r\nimport XEUtils from 'xe-utils'\r\n\r\n// 唯一行id属性名称\r\nexport const rowUuidKeyName = '__BOSS_UUID'\r\n// 树形节点深度\r\nexport const rowUniqueLevelKey = '__BOSS_TREE_NODE_LEVEL'\r\n\r\n// 设置树形表格唯一键\r\nconst setRowUuidKey = (rows, instance, level = 0) => {\r\n  if (typeof rows !== 'object') return\r\n  for (let row of Array.isArray(rows) ? rows : [rows]) {\r\n    // 设置唯一标识\r\n    !row[rowUuidKeyName] && Reflect.set(row, rowUuidKeyName, XEUtils.uniqueId(`${rowUuidKeyName}_`))\r\n    // 设置节点层级\r\n    !row[rowUniqueLevelKey] && Reflect.set(row, rowUniqueLevelKey, level)\r\n    if (row?.children && row?.children?.length) {\r\n      setRowUuidKey(row.children, instance, level + 1)\r\n    }\r\n  }\r\n}\r\n\r\nconst sortMethods = {\r\n  arrSortGloabal(data, property, type, order = 'asc') {\r\n    // 通用 排序\r\n    data.sort(function (a, b) {\r\n      if (order === 'asc') {\r\n        if (type === 'number') {\r\n          return a[property] - b[property]\r\n        }\r\n        return (String(a[property])).localeCompare(String(b[property]))\r\n      } else {\r\n        if (type === 'number') {\r\n          return b[property] - a[property]\r\n        }\r\n        return (String(b[property])).localeCompare(String(a[property]))\r\n      }\r\n    })\r\n    return data\r\n  },\r\n  arrSortString({ $table, data, column, property, order }) {\r\n    // 字符 排序\r\n    data.sort(function (a, b) {\r\n      if (order === 'asc') {\r\n        return (String(a[property])).localeCompare(String(b[property]))\r\n      } else {\r\n        return (String(b[property])).localeCompare(String(a[property]))\r\n      }\r\n    })\r\n    return data\r\n  },\r\n  arrSortNumber({ $table, data, column, property, order }) {\r\n    // 数字 排序\r\n    data.sort(function (a, b) {\r\n      if (order === 'asc') {\r\n        return a[property] - b[property]\r\n      } else {\r\n        return b[property] - a[property]\r\n      }\r\n    })\r\n    return data\r\n  },\r\n  arrSortStringSuffix({ $table, data, column, property, order, rTypeSuffix }) {\r\n    // 通用 排序 new\r\n    data.sort(function (a, b) {\r\n      if (order === 'asc') {\r\n        return (String(a[property])).localeCompare(String(b[property]))\r\n      } else {\r\n        return (String(b[property])).localeCompare(String(a[property]))\r\n      }\r\n    })\r\n    return data\r\n  },\r\n  arrSortNumberSuffix({ $table, data, column, property, order, rTypeSuffix }) {\r\n    // 兼容树形表格 => 递归排序后代节点\r\n    function sortInner(data) {\r\n      // 通用 排序 new\r\n      data.sort(function (a, b) {\r\n        if (order === 'asc') {\r\n          return parseFloat(a[property]) - parseFloat(b[property])\r\n        } else {\r\n          return parseFloat(b[property]) - parseFloat(a[property])\r\n        }\r\n      })\r\n      $table.treeConfig && data.forEach(item => {\r\n        if (item?.children?.length) {\r\n          sortInner(item.children)\r\n        }\r\n      })\r\n    }\r\n    sortInner(data)\r\n    return data\r\n  },\r\n  arrSort({ $table, data, column, property, order }) {\r\n    // 排序\r\n    let self = this\r\n    const sortTypeMap = {\r\n      // number类型排序\r\n      $vxeMoney: 'arrSortNumberSuffix',\r\n      $vxeDays: 'arrSortNumberSuffix',\r\n      $vxeCalculate: 'arrSortNumberSuffix',\r\n      // 字符类型排序\r\n      $vxeTree: 'arrSortStringSuffix',\r\n      $vxeInput: 'arrSortStringSuffix',\r\n      $vxeSelect: 'arrSortStringSuffix',\r\n      $vxeEditDownTextarea: 'arrSortStringSuffix',\r\n      $vxeTime: 'arrSortStringSuffix',\r\n      $vxeRadio: 'arrSortStringSuffix',\r\n      $vxeCheckbox: 'arrSortStringSuffix',\r\n      $$vxeEditDownJson: 'arrSortStringSuffix',\r\n      $vxeEditDownConditions: 'arrSortStringSuffix',\r\n      $vxeInterlet: 'arrSortStringSuffix'\r\n    }\r\n    let render = (column.own && (column.own.editRender || column.own.cellRender || column.own.contentRender))\r\n    if (render && render.name && sortTypeMap[render.name]) {\r\n      return self[sortTypeMap[render.name]]({ $table, data, column, property, order, rTypeSuffix: '__viewSort' })\r\n    } else {\r\n      data.sort(function (a, b) {\r\n        if (order === 'asc') {\r\n          if (isNaN(Number(a[property]))) {\r\n            return (a[property].toString()).localeCompare(b[property].toString())\r\n          }\r\n          return a[property] - b[property]\r\n        } else {\r\n          if (isNaN(Number(a[property]))) {\r\n            return (b[property].toString()).localeCompare(a[property].toString())\r\n          }\r\n          return b[property] - a[property]\r\n        }\r\n      })\r\n    }\r\n    return data\r\n  }\r\n}\r\nconst registFn = {\r\n  registGlobleFormatters(obj) {\r\n    let self = this\r\n    Object.keys(obj).forEach((item, index) => {\r\n      self.$VXETable.formats.add(item, obj[item].bind(self))\r\n    })\r\n  },\r\n  registGloableConlumsConfig(arr = []) {\r\n    // 注册列格式化，渲染器，过滤项目等全局函数\r\n    let self = this\r\n    function reverRegistGloableConlumsConfig(arrc) {\r\n      arrc.forEach((item, index) => {\r\n        self.registSingelRowConfig(arrc, item, index)\r\n        if (Array.isArray(item.children) && item.children.length) {\r\n          self.registGloableConlumsConfig(item.children)\r\n        }\r\n      })\r\n    }\r\n    reverRegistGloableConlumsConfig(arr)\r\n  },\r\n  registSingelRowConfig(arr, item, index) {\r\n    // 注册 单条数据配置项\r\n    let self = this\r\n    arr[index] = self.registSingelRowFilter(item)\r\n    // self.registSingelRowFormater(item)\r\n    // self.registSingelRowSorts(item)\r\n    // self.registSingelRowRenderer(item)\r\n    // self.registSingRowCalcRenderer(item)\r\n  },\r\n  registSingRowCalcRenderer(item) {\r\n    // 注册单条数据计算渲染器\r\n    if (item.formula && !item.editRender) {\r\n      item.editRender = {\r\n        name: '$vxeCalculate'\r\n      }\r\n    }\r\n  },\r\n  registSingelRowFilter_old(item) {\r\n    // 绑定单条列过滤器配置\r\n    if (Array.isArray(item.children)) {\r\n      return\r\n    }\r\n    if (item.filters !== undefined || item.filters || item.filterRender !== undefined || item.filterRender) {\r\n      // if (item.filters === false) {\r\n      //   delete item.filters\r\n      //   delete item.filterRender\r\n      //   delete item.filterMethod\r\n      // }\r\n\r\n      // type+editable\r\n      // { value: '$vxeInput', label: '输入框' },\r\n      // { value: '$vxeSelect', label: '下拉选择' },\r\n      // { value: '$vxeCalculate', label: '计算' },\r\n      // { value: '$vxeMoney', label: '金额' },\r\n      // { value: '$vxeEditDownTextarea', label: '文本输入框' },\r\n      // { value: '$vxeDays', label: '天数' },\r\n      // { value: '$vxeTime', label: '时间' },\r\n      // { value: '$vxeRadio', label: '单选' },\r\n      // { value: '$vxeCheckbox', label: '复选' },\r\n      // { value: '$treeinput', label: '下拉树' },\r\n      // { value: '$EditDownJson', label: 'JSON' },\r\n      // { value: '$href', label: '链接' }\r\n      return\r\n    }\r\n    let self = this\r\n    let itemRender = item.cellRender || item.editRender || item.contentRender\r\n    if (item.filters === undefined || item.filters === true) {\r\n      if (item.field && self.tableConfigCp.filters[item.field]) {\r\n        item.filters = self.tableConfigCp.filters[item.field].filters ? self.tableConfigCp.filters[item.field].filters : [{ data: '' }]\r\n        if (typeof (self.tableConfigCp.filters[item.field].filterMethod) === 'function') {\r\n          item.filterMethod = self.tableConfigCp.filters[item.field].filterMethod ? self.tableConfigCp.filters[item.field].filterMethod : ({ option, row, column }) => {\r\n            return row[column.property] === Number(option.data)\r\n          }\r\n        }\r\n      } else if (item.field && itemRender) {\r\n        switch (itemRender.name) {\r\n          case '$select':\r\n            item.filters = Array.isArray(itemRender.options) ? itemRender.options : []\r\n            item.filterMultiple = true\r\n            break\r\n          case '$vxeSelect':\r\n            item.filters = Array.isArray(itemRender.options) ? itemRender.options : []\r\n            item.filterMultiple = true\r\n            break\r\n          case '$calculateRender':\r\n            item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'float' } }]\r\n            item.filterRender = { name: 'FilterComplex' }\r\n            break\r\n          case '$vxeCalculate':\r\n            item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'float' } }]\r\n            item.filterRender = { name: 'FilterComplex' }\r\n            break\r\n          case '$moneyRender':\r\n            item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'float' } }]\r\n            item.filterRender = { name: 'FilterComplex' }\r\n            break\r\n          case '$vxeMoney':\r\n            item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'float' } }]\r\n            item.filterRender = { name: 'FilterComplex' }\r\n            break\r\n          case '$href':\r\n            item.filters = [{ data: '' }]\r\n            item.filterRender = { name: 'FilterInput' }\r\n            break\r\n          case '$vxeRadio':\r\n            item.filters = Array.isArray(itemRender.options) ? itemRender.options : []\r\n            item.filterMultiple = true\r\n            break\r\n          case '$vxeCheckbox':\r\n            item.filters = [{ data: { vals: [], sVal: '' } }]\r\n            item.filterRender = { name: 'FilterChoose' }\r\n            break\r\n          case '$vxeInput':\r\n            // text, search, number, integer, float, password, date, datetime, week, month, year\r\n            if (this.getbasicDataType(itemRender.props) === 'Object' && itemRender.props.type) {\r\n              switch (itemRender.props.type) {\r\n                case 'text':\r\n                  item.filters = [{ data: { vals: [], sVal: '' } }]\r\n                  item.filterRender = { name: 'FilterContent' }\r\n                  break\r\n                case 'float':\r\n                  item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'float' } }]\r\n                  item.filterRender = { name: 'FilterComplex' }\r\n                  break\r\n                case 'number':\r\n                  item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'number' } }]\r\n                  item.filterRender = { name: 'FilterComplex' }\r\n                  break\r\n                case 'year':\r\n                  item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'year' } }]\r\n                  item.filterRender = { name: 'FilterComplex' }\r\n                  break\r\n                case 'date':\r\n                  item.filters = [{ data: { type: 'has', isCase: false, value: '', dataType: 'date' } }]\r\n                  item.filterRender = { name: 'FilterComplex' }\r\n                  break\r\n                default:\r\n                  if (itemRender.name === '$optionSort' || itemRender.name === 'optionRow') {\r\n                    delete item.filters\r\n                    delete item.filterRender\r\n                    delete item.filterMethod\r\n                  } else {\r\n                    item.filters = [{ data: '' }]\r\n                    item.filterRender = { name: 'FilterInput' }\r\n                  }\r\n                  break\r\n              }\r\n            } else {\r\n              item.filters = [{ data: '' }]\r\n              item.filterRender = { name: 'FilterInput' }\r\n            }\r\n            break\r\n          case '$EditDownTextarea':\r\n            item.filters = [{ data: { vals: [], sVal: '' } }]\r\n            item.filterRender = { name: 'FilterContent' }\r\n            break\r\n          case '$vxeEditDownTextarea':\r\n            item.filters = [{ data: { vals: [], sVal: '' } }]\r\n            item.filterRender = { name: 'FilterContent' }\r\n            break\r\n          case '$treeinput':\r\n            item.filters = [{ data: { vals: [], sVal: '' } }]\r\n            item.filterRender = { name: 'FilterContent' }\r\n            break\r\n          default:\r\n            if (['seq', 'checkbox', 'dragSort', 'radio', 'optionRow'].indexOf(item.type)) {\r\n              delete item.filters\r\n              delete item.filterRender\r\n              delete item.filterMethod\r\n            } else {\r\n              item.filters = [{ data: '' }]\r\n              item.filterRender = { name: 'FilterInput' }\r\n            }\r\n            break\r\n        }\r\n      } else {\r\n        item.filters = [{ data: '' }]\r\n        item.filterRender = { name: 'FilterInput' }\r\n      }\r\n    }\r\n  },\r\n  registSingelRowFilter(item) {\r\n    // 绑定单条列过滤器配置\r\n    if (Array.isArray(item.children)) {\r\n      return item\r\n    }\r\n    try {\r\n      let itemRender = item.cellRender || item.editRender\r\n      if (itemRender && ((item.filters + '' === 'true') || item.filters + '' === 'undefined')) {\r\n        if (itemRender.name && filterTypeMap[itemRender.name]) {\r\n          if (itemRender.name === '$vxeInput') {\r\n            if (this.getbasicDataType(itemRender.props) === 'Object' && filterTypeMap['$vxeInput'][itemRender.name + itemRender.props.type]) {\r\n              item = Object.assign({}, item, filterTypeMap['$vxeInput'][itemRender.name + itemRender.props.type])\r\n            } else {\r\n              item = Object.assign({}, item, filterTypeMap['$vxeInput'][itemRender.name + 'global'])\r\n            }\r\n          } else {\r\n            item = Object.assign({}, item, filterTypeMap[itemRender.name])\r\n          }\r\n        } else {\r\n          switch (itemRender.name) {\r\n            default:\r\n              if (['seq', 'checkbox', 'dragSort', 'radio', 'optionRow'].indexOf(item.type) >= 0) {\r\n                delete item.filters\r\n                delete item.filterRender\r\n                delete item.filterMethod\r\n              } else {\r\n                item.filters = [{ data: '' }]\r\n                item.filterRender = { name: 'FilterInput' }\r\n              }\r\n              break\r\n          }\r\n        }\r\n      } else if (!(typeof item.filters === 'object')) {\r\n        item.filters = false\r\n      } else {\r\n      }\r\n    } catch (e) {\r\n      throw (e)\r\n    }\r\n    return item\r\n  },\r\n  registSingelRowFormater(item) {\r\n    // 绑定单条列格式化配置 废弃\r\n    let self = this\r\n    if (item.field && self.tableConfigCp.formatters[item.field]) {\r\n      item.formatter = self.tableConfigCp.formatters[item.field]\r\n    }\r\n  },\r\n  registSingelRowRenderer(item) {\r\n    // 绑定单条列渲染器配置 废弃\r\n    let self = this\r\n    let itemRender = item.cellRender || item.editRender || item.contentRender\r\n    if (item.field && self.tableConfigCp.cellRenderConfig[item.field] && !itemRender) {\r\n      item[self.tableConfigCp.cellRenderConfig[item.field].type] = self.tableConfigCp.cellRenderConfig[item.field]\r\n    }\r\n  },\r\n  registSingelRowSorts(item) {\r\n    // 绑定单条列排序配置\r\n    if (!item.children && item['sortable'] === undefined) {\r\n      item['sortable'] = item['sortable'] || true\r\n    }\r\n  },\r\n  registRenderers(arr = []) {\r\n    // 初始化绑定列渲染器\r\n    let self = this\r\n    function reverRegistRenderers(arrc) {\r\n      arrc.forEach((item, index) => {\r\n        reverRegistRenderers(item)\r\n        if (Array.isArray(item.children) && item.children.length) {\r\n          self.registRenderers(item.children)\r\n        }\r\n      })\r\n    }\r\n    reverRegistRenderers(arr)\r\n  },\r\n  registFilters(arr = []) {\r\n    // 初始化绑定列过滤器函数 废弃\r\n    let self = this\r\n    arr.forEach((item, index) => {\r\n      self.registSingelRowFilter(item)\r\n      if (Array.isArray(item.children) && item.children.length) {\r\n        self.registFormatters(item.children)\r\n      }\r\n    })\r\n  },\r\n  registFormatters(arr = []) {\r\n    // 初始化绑定列格式化函数 废弃\r\n    let self = this\r\n    arr.forEach((item, index) => {\r\n      self.registSingelRowFormater(item)\r\n      if (Array.isArray(item.children) && item.children.length) {\r\n        self.registFormatters(item.children)\r\n      }\r\n    })\r\n  },\r\n  registTableRender(renderers) {\r\n    // 注册渲染器\r\n    for (let i in renderers) {\r\n      this.$VXETable.renderer.add(i, renderers[i])\r\n    }\r\n  }\r\n}\r\nconst initMethods = {\r\n  initCreated() {\r\n    this.initColumnMoneyFilter()\r\n\r\n    // 初始化Created\r\n    // 即将废弃\r\n    // this.registTableRender(defaultRenderers)\r\n    // this.registGlobleFormatters(defaultFormatters)\r\n    // this.tableGlobalConfig.dragColumnsConfig && this.tableGlobalConfig.dragColumnsConfig.openDrag && this.setColumnDrop()\r\n  },\r\n  initMounted() {\r\n    // 初始化Mounted\r\n    this.initFirst()\r\n    if ((this.tableGlobalConfigIn.dragColumnsConfig && this.tableGlobalConfigIn.dragColumnsConfig.openDrag) || this.tableGlobalConfigIn.columnDrop) {\r\n      this.setColumnDrop()\r\n    }\r\n    if (this.tableGlobalConfigIn.rowDrop) {\r\n      this.setRowDrop()\r\n    }\r\n  },\r\n  initFirst() {\r\n    // 组件初始化\r\n    this.initTableGlobalConfig()\r\n    this.initContextMenuConfig()\r\n    this.initSeqConfig()\r\n    this.initExpandConfig()\r\n    this.initToolbar()\r\n    this.initEditConfig()\r\n    this.initTableFormConfig()\r\n    this.initCalculateConstraintConfig()\r\n    this.initTableConfig()\r\n    this.initEditRules()\r\n    this.initTable()\r\n    this.initTableData()\r\n  },\r\n  initTable() {\r\n    this.initTableConlums()\r\n    this.setPagerConfig()\r\n  },\r\n  initColumnMoneyFilter() {\r\n    // 金额过滤\r\n    this.setColumnMoneyFilter(this.tableColumnsConfig)\r\n    this.completeMoneyFilter = true\r\n  },\r\n  initTableGlobalConfig() {\r\n    // 初始化全局配置\r\n    this.tableGlobalConfigIn = Object.assign({}, this.tableGlobalConfigIn, this.tableGlobalConfig)\r\n  },\r\n  initTableConfig() {\r\n    // 初始化表格列和渲染器配置\r\n    this.tableConfigCp = Object.assign({\r\n      globalConfig: {\r\n        checkType: 'checkbox',\r\n        seq: true,\r\n        filters: true,\r\n        sortable: false\r\n      }\r\n    }, this.tableConfig || this.tableGlobalConfigIn.tableConfig)\r\n    this.initTableConlums()\r\n\r\n    this.registTableRender(this.tableConfigCp.renderers)\r\n  },\r\n  initCacheColumn() {\r\n    let data = JSON.parse(localStorage.getItem(this.tableId || '') || '[]').map((k, v) => ({ field: k, index: v }))\r\n    let tableColumnsConfig = JSON.parse(JSON.stringify(this.tableColumnsConfig))\r\n    let arr = data.length\r\n      ? tableColumnsConfig.map(item => {\r\n        let obj = {}\r\n        for (let item2 of data) {\r\n          if (item.field === item2.field) {\r\n            obj = { ...item, ...item2 }\r\n          }\r\n        }\r\n        return obj\r\n      }) : []\r\n    arr.sort((a, b) => {\r\n      return a.index - b.index\r\n    })\r\n    return arr.length ? arr : tableColumnsConfig\r\n  },\r\n  initTableConlums(columnsConfig) {\r\n    // 初始化列配置\r\n    this.calculateConstraintConfigIn = Object.assign({}, this.calculateConstraintConfigIn)\r\n    const tableColumnsConfig = (this.tableGlobalConfig.dragColumnsConfig && this.tableGlobalConfig.dragColumnsConfig.cacheStatus) ? this.initCacheColumn() : (columnsConfig || this.tableColumnsConfig)\r\n    if (tableColumnsConfig.length) {\r\n      this.generateCalcColFormulaMap(tableColumnsConfig)\r\n      this.tableColumnsConfigIn = this.unidirectionalData ? this.deepCopy(this.generateTableConlums(tableColumnsConfig, this.tableConfigCp.globalConfig)) : this.generateTableConlums(tableColumnsConfig, this.tableConfigCp.globalConfig)\r\n    } else {\r\n      this.tableColumnsConfigIn = []\r\n    }\r\n    return this.tableColumnsConfigIn\r\n  },\r\n  initScrollLoadConfig(scrollLoadConfig) {\r\n    this.scrollLoadConfigCp = Object.assign({}, this.scrollLoadConfigCp, scrollLoadConfig || this.scrollLoadConfig)\r\n  },\r\n  generateTableConlums(conlums, globalConfig) {\r\n    // 生成表头\r\n    let tableColumnsConfigIn = []\r\n    if (globalConfig.rowDrop) {\r\n      tableColumnsConfigIn.push(tableColumns['rowDrop'])\r\n    }\r\n    if (globalConfig.checkType) {\r\n      tableColumnsConfigIn.push(tableColumns[globalConfig.checkType])\r\n    }\r\n    if (globalConfig.seq) {\r\n      tableColumnsConfigIn.push(tableColumns['seq'])\r\n    }\r\n    tableColumnsConfigIn = [...tableColumnsConfigIn, ...conlums]\r\n    if (globalConfig.optionSort) {\r\n      tableColumnsConfigIn.push(tableColumns['optionSort'])\r\n    }\r\n    this.registGloableConlumsConfig(tableColumnsConfigIn)\r\n    return tableColumnsConfigIn\r\n  },\r\n  generateOptionRow(tableColumnsConfigIn, globalConfig) {\r\n    // 初始化操作列 废弃\r\n    if (globalConfig.hasOptionRow) {\r\n      let optionRow = tableColumns['optionRow']\r\n      if (this.getbasicDataType(this.tableConfigCp.cellRenderConfig.optionRow) === 'Object') {\r\n        let cellRender = optionRow.cellRender\r\n        cellRender = Object.assign({}, this.tableConfigCp.cellRenderConfig.optionRow)\r\n        optionRow[this.tableConfigCp.cellRenderConfig.optionRow.type] = cellRender\r\n      }\r\n      tableColumnsConfigIn.push(optionRow)\r\n    }\r\n    return tableColumnsConfigIn\r\n  },\r\n  generateBottomGroupTotal() {\r\n    // 根据表格上面已算好的分组合计，求最下面的分组合计\r\n\r\n  },\r\n  initCalculateConstraintConfig() {\r\n    // 初始化计算和约束配置\r\n    this.calculateConstraintConfigIn = Object.assign({}, this.calculateConstraintConfigIn, this.calculateConstraintConfig)\r\n    if (this.calculateConstraintConfigIn.cellDataConfig && this.calculateConstraintConfigIn.cellDataConfig.length) {\r\n      this.generatGetDataConfigMap(this.calculateConstraintConfigIn.cellDataConfig)\r\n    }\r\n    this.constrainRowDataMap = {}\r\n  },\r\n  initToolbar(toolbarConfig) {\r\n    // 初始化工具栏\r\n    let curtoolbarConfig = toolbarConfig || this.toolbarConfig\r\n    if (this.getbasicDataType(curtoolbarConfig) === 'Boolean') {\r\n      this.toolbarConfigIn = undefined\r\n      this.toolbarConfigInCopy = this.toolbarConfigInCp || {}\r\n    } else {\r\n      if (curtoolbarConfig.visible === false) {\r\n        this.toolbarConfigIn = undefined\r\n        this.toolbarConfigInCopy = this.toolbarConfigInCp\r\n      } else {\r\n        this.toolbarConfigIn = Object.assign({}, this.toolbarConfigInCp, curtoolbarConfig)\r\n        this.toolbarConfigInCopy = this.toolbarConfigIn\r\n      }\r\n      if (this.toolbarConfigInCopy.yearlist.length) {\r\n        this.formSearchData.year = this.toolbarConfigInCopy.yearlist[0]\r\n      }\r\n      this.setMoneyUnit(this.moneyUnit)\r\n    }\r\n  },\r\n  loadScrollTableData(data) {\r\n    // 加载滚动加载数据\r\n    let self = this\r\n    this.initCalculateConstraintConfig()\r\n    // 初始化表格数据\r\n    this.selection = []\r\n    if (this.$refs.xGrid) {\r\n      this.$refs.xGrid.$refs.xTable.tableSourceData = []\r\n      this.$refs.xGrid.removeCheckboxRow()\r\n    }\r\n    this.tableDataIn = this.getTableData().fullData.concat(this.addMissingFieldsAndCalcColFormula(data))\r\n    this.$nextTick().then(() => {\r\n      if (self.$refs.xGrid) {\r\n        self.$refs.xGrid.reloadData(self.tableDataIn).then(() => {\r\n          self.$refs.xGrid.clearFilter().then(() => {\r\n            self.$refs.xGrid.$refs.xTable.tableSourceData = self.deepCopy(self.getTableData().fullData)\r\n            self.$refs.xGrid.$refs.xTable.handleDefaults()\r\n          })\r\n        })\r\n      }\r\n    })\r\n    return this.tableDataIn\r\n  },\r\n  initCalcPublicData() {\r\n    // calcPublicData: {\r\n    // }\r\n    // rowCalcData: { },\r\n    // cellCaclData: { },\r\n    // cellCodeCalcData: { }\r\n    // }\r\n  },\r\n  initTableData(data) { // 初始化表格数据\r\n    // 执行顺序： 取数-->行内计算-->分级汇总-->父级行内计算-->单元格交叉计算(涉及的行计算)-->行约束-->单元格约束\r\n    let self = this\r\n    this.initCalculateConstraintConfig()\r\n    this.selection = []\r\n    data = Array.isArray(data || this.tableData) ? (data || this.tableData) : []\r\n\r\n    // 为树形数据设置唯一属性\r\n    setRowUuidKey(data, this)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.rePerformAllCalcAndConstraintByData(self.unidirectionalData ? self.deepCopy(data) : data, true).then(({ dataCodeRowMap, dataCodeRowArr, afterCalcData }) => {\r\n        self.tableDataMap = dataCodeRowMap\r\n        self.tableDataIn = self.addMissingFields(self.deepCopy(afterCalcData))\r\n        self.$nextTick().then(() => {\r\n          let xGrid = self.$refs.xGrid\r\n          if (xGrid) {\r\n            xGrid.reloadData(self.tableDataIn).then(() => {\r\n              xGrid.clearFilter().then(() => {\r\n                xGrid.$refs.xTable.tableSourceData = self.deepCopy(self.getTableData().fullData)\r\n                xGrid.$refs.xTable.handleDefaults()\r\n                self.$emit('onTableDataLoaded', self.tableDataIn, self, xGrid)\r\n                resolve(self.tableDataIn)\r\n              })\r\n            })\r\n          } else {\r\n            resolve(self.tableDataIn)\r\n          }\r\n        })\r\n      })\r\n    })\r\n  },\r\n  initTableFormConfig() {\r\n    if (this.getbasicDataType(this.tableFormConfig) === 'Boolean') {\r\n      this.tableFormConfigIn = undefined\r\n    } else {\r\n      this.tableFormConfigIn = Object.assign({}, this.tableFormConfig)\r\n    }\r\n  },\r\n  initSeqConfig(startIndex = 0) {\r\n    // 初始化序号配置项\r\n    let self = this\r\n\r\n    this.seqConfig = {\r\n      startIndex: 1, // 设置序号的起始值 number0\r\n      seqMethod(data) {\r\n        const { seq, $seq, row } = data\r\n\r\n        if (self.pagerConfigIn && !self.treeConfig) {\r\n          return (self.pagerConfigIn.pageSize > 0 ? self.pagerConfigIn.pageSize : 20) * ((self.pagerConfigIn.currentPage > 0 ? self.pagerConfigIn.currentPage : 1) - 1) + seq\r\n        } else {\r\n          let finalSeq = $seq === '' || $seq === undefined ? seq : $seq + '.' + seq\r\n          if (self.isTreeSeqToFlat) {\r\n            const arr = XEUtils.toTreeArray(self.getTableData().treeExpandData)\r\n            const index = arr.findIndex(item => item[rowUuidKeyName] === row[rowUuidKeyName])\r\n            // 根据第一行是否是合计行判断\r\n            if (arr[0]?.id === '#') {\r\n              finalSeq = row.id === '#' ? '#' : index\r\n            } else {\r\n              finalSeq = index + 1\r\n            }\r\n          }\r\n\r\n          // return $seq === '' || $seq === undefined ? seq : $seq + '.' + seq\r\n          return finalSeq\r\n        }\r\n      }\r\n    }\r\n  },\r\n  initEditConfig() { // 编辑配置\r\n    // 暂时性方案，后期调整\r\n    if (this.getbasicDataType(this.editConfig) === 'Boolean') {\r\n      // this.editConfigIn = false\r\n      this.editConfigIn = {\r\n        trigger: 'dblclick',\r\n        mode: 'cell',\r\n        activeMethod: ({ row, rowIndex, column, columnIndex }) => {\r\n          return false\r\n        },\r\n        showStatus: false\r\n      }\r\n    } else if (this.getbasicDataType(this.editConfig) === 'Object') {\r\n      if (this.editConfig.editable !== false) {\r\n        this.editConfigIn = Object.assign(this.editConfigInCp, this.editConfig)\r\n      } else {\r\n        this.editConfigIn = {\r\n          trigger: 'dblclick',\r\n          mode: 'cell',\r\n          activeMethod: ({ row, rowIndex, column, columnIndex }) => {\r\n            return false\r\n          },\r\n          showStatus: false\r\n        }\r\n      }\r\n    }\r\n  },\r\n  refreshTableIsEdit() {\r\n    // 重新渲染刷新表格\r\n\r\n  },\r\n  initExpandConfig() {\r\n    // 编辑展开配置\r\n    if (this.getbasicDataType(this.expandConfig) === 'Undefined' || this.getbasicDataType(this.expandConfig) === 'Boolean') {\r\n      this.expandConfigIn = {\r\n        expandAll: false\r\n      }\r\n    } else {\r\n      this.expandConfigIn = Object.assign({}, this.expandConfig)\r\n    }\r\n  },\r\n  initContextMenuConfig() {\r\n    // 更新右键配置\r\n    if (this.getbasicDataType(this.contextMenuConfig) === 'Undefined' || this.getbasicDataType(this.contextMenuConfig) === 'Boolean') {\r\n      this.contextMenuConfigIn = {}\r\n    } else {\r\n      this.contextMenuConfigIn = Object.assign({}, this.contextMenuConfigIn, this.contextMenuConfig)\r\n    }\r\n  },\r\n  initTreeConfig() {\r\n    // 表格树配置\r\n    if (this.getbasicDataType(this.treeConfig) === 'Boolean') {\r\n      this.treeConfigIn = this.treeConfig\r\n    } else {\r\n      this.treeConfigIn = Object.assign({\r\n        dblExpandAll: false, // 双击展开当前节点树形数据\r\n        onlyDblTreeNodeExpand: false, // 在不允许编辑模式下是否仅仅双击树列才允许执行展开\r\n        dblExpand: false, // 是否执行双击展开树形数据\r\n        children: 'children',\r\n        // 是否为手风琴效果\r\n        accordion: false\r\n      }, this.treeConfig)\r\n    }\r\n  },\r\n  initFooterConfig() {\r\n    // 更新footer配置\r\n    this.footerConfigIn = Object.assign({}, this.footerConfigIn, this.footerConfig)\r\n  },\r\n  initEditRules() {\r\n    // 编辑校验规则\r\n    this.editRulesIn = Object.assign({}, this.editRules)\r\n    // this.editRulesIn = Object.assign({}, this.editRulesIn, this.addTreeReg({ ...this.editRules }))\r\n  }\r\n}\r\nconst tableOptionFn = {\r\n  replaceColumnSlotKey(key) {\r\n    if (!key) return ''\r\n    console.log(key?.replace?.(/column-/, '') ?? '')\r\n    return key?.replace?.(/column-/, '') ?? ''\r\n  },\r\n  // 获取传入表头数据\r\n  transTableCloumnToSource(cloumn) {\r\n    if (!cloumn) return []\r\n    const newColumn = []\r\n    cloumn.forEach((k, v) => {\r\n      k.own && newColumn.push(k.own)\r\n      if (k && k.children) {\r\n        newColumn[v].children = []\r\n        newColumn[v].children.push(...this.transTableCloumnToSource(k.children))\r\n      }\r\n    })\r\n    return newColumn\r\n  },\r\n  tableOptionFn() {\r\n    // 全局表格组件xgrid调用实例\r\n    return this.$refs.xGrid\r\n  },\r\n  updateFooter() {\r\n    // 更新表尾\r\n    return this.$refs.xGrid.updateFooter()\r\n  },\r\n  updateData() {\r\n    // 刷新数据\r\n    this.$refs.xGrid.updateData().then(() => {\r\n      this.$refs.xGrid.updateFooter()\r\n    })\r\n  },\r\n  exportData(obj) {\r\n    // 导出数据\r\n    this.$refs.xGrid.openExport({\r\n      // 默认勾选源\r\n      original: true\r\n    })\r\n  },\r\n  importDataEvent() {\r\n    // 导入数据\r\n    this.$refs.xGrid.importData()\r\n  },\r\n  setAllCheckboxRow() {\r\n    // 设置所有选中\r\n    this.$refs.xGrid.setAllCheckboxRow(true).then(() => {\r\n      this.updateFooter().then(() => { }).catch(() => { })\r\n    })\r\n  },\r\n  clearCheckboxRow() {\r\n    // 清除所有选中\r\n    this.$refs.xGrid.clearCheckboxRow().then(() => {\r\n      this.updateFooter().then(() => { }).catch(() => { })\r\n    })\r\n  },\r\n  removeCheckboxRow() {\r\n    // 删除选中行操作\r\n    let self = this\r\n    self.$refs.xGrid.removeCheckboxRow()\r\n  },\r\n  revertEvent() {\r\n    // 撤销操作\r\n    this.$XModal.confirm('您确定要还原数据吗?').then(type => {\r\n      if (type === 'confirm') {\r\n        // this.$refs.xGrid.revertData()\r\n        this.reLoadTable()\r\n      }\r\n    })\r\n  },\r\n  deleteSelectedRow() {\r\n    // 删除选中记录行的数据（不是复选框的）\r\n    let self = this\r\n    this.$XModal.confirm('您确定要删除所选中数据吗?').then(type => {\r\n      if (type === 'confirm') {\r\n        self.$refs.xGrid.removeCurrentRow()\r\n      }\r\n    })\r\n  },\r\n  deleteRowData(rows) {\r\n    // 删除选中行操作\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.$XModal.confirm('您确定要删除所选中数据吗?').then(type => {\r\n        if (type === 'confirm') {\r\n          self.$refs.xGrid.removeCheckboxRow(rows).then((res) => {\r\n            resolve(res)\r\n          }).catch(e => {\r\n            reject(e)\r\n          })\r\n        } else {\r\n          resolve(false)\r\n        }\r\n      })\r\n    })\r\n  },\r\n  async copySelectionRowData(obj = {}) {\r\n    // 复制选中行数据\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      const { rowIndexTo, data } = obj\r\n      let rowTo = rowIndexTo === undefined ? -1 : rowIndexTo\r\n      let newRowSelectionsData = data || self.$refs.xGrid.getCheckboxRecords()\r\n      if (newRowSelectionsData.length) {\r\n        newRowSelectionsData.forEach((item, index) => {\r\n          Object.keys(item).forEach((key) => {\r\n            if (key.indexOf('__') >= 0) {\r\n              delete item[key]\r\n            }\r\n          })\r\n          item = Object.assign({}, item, {\r\n            insertMark: '新数据',\r\n            date: new Date().format('YYYY-MM-DD hh:mm:ss:c'),\r\n            isNew: true,\r\n            _XID: ''\r\n          })\r\n        })\r\n        self.$refs.xGrid.insert(newRowSelectionsData).then(({ row, rows }) => {\r\n          self.$refs.xGrid.setActiveCell(rowTo).then(() => {\r\n            resolve({ tableData: self.getTableData, row: row }, self)\r\n          }).catch(e => {\r\n            reject(e)\r\n          })\r\n        }).catch(e => {\r\n          reject(e)\r\n        })\r\n      } else {\r\n        reject(new Error('请先选择新增数据的模版!'))\r\n        self.$XModal.message({ message: '请先选择新增数据的模版!' })\r\n      }\r\n    })\r\n  },\r\n  async copyRowData(obj = {}) {\r\n    // 复制行\r\n    let self = this\r\n    const { rowSource, rowIndexTo } = obj\r\n    let rowSourceData = rowSource === undefined ? 0 : rowSource\r\n    let rowTo = rowIndexTo === undefined ? -1 : rowIndexTo\r\n    // 复制行\r\n    let newRowDataObj = { ...self.$refs.xGrid.getData(rowSourceData) }\r\n    Object.keys(newRowDataObj).forEach((key) => {\r\n      if (key.indexOf('__') >= 0) {\r\n        delete newRowDataObj[key]\r\n      }\r\n    })\r\n    newRowDataObj = Object.assign({}, newRowDataObj, {\r\n      insertMark: '新数据',\r\n      date: new Date().format('YYYY-MM-DD hh:mm:ss:c'),\r\n      isNew: true,\r\n      _XID: ''\r\n    })\r\n    let { row } = await self.$refs.xGrid.insertAt(newRowDataObj, rowTo)\r\n    await self.$refs.xGrid.setCurrentRow(row)\r\n    await self.$refs.xGrid.setActiveCell(row)\r\n    await self.$refs.xGrid.validate(row).catch(errMap => errMap)\r\n    // this.$XModal.message({ message: `复制单条数据完成，行号为 ${rowTo + 1}` })\r\n  },\r\n  async insertRowData(obj = {}) {\r\n    // 新增行\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      const { data, rowIndexTo } = obj\r\n      let rowTo = rowIndexTo === undefined ? -1 : rowIndexTo\r\n      let dataObj = Object.assign({}, data === undefined ? {} : data, {\r\n        insertMark: '新数据',\r\n        date: new Date().format('YYYY-MM-DD hh:mm:ss:c'),\r\n        isNew: true,\r\n        _XID: ''\r\n      })\r\n      Object.keys(dataObj).forEach((key) => {\r\n        if (key.indexOf('__') >= 0) {\r\n          delete dataObj[key]\r\n        }\r\n      })\r\n      self.$refs.xGrid.insertAt(dataObj, rowTo).then(({ row }) => {\r\n        self.$refs.xGrid.setCurrentRow(row).then(() => {\r\n          self.$refs.xGrid.setActiveCell(row).then(() => {\r\n            self.$refs.xGrid.validate(row).then(() => {\r\n              resolve({ tableData: self.getTableData, row: row }, self)\r\n            }).catch(errMap => {\r\n              console.log('validate', errMap)\r\n              resolve({ tableData: self.getTableData, row: row, errMap: errMap }, self)\r\n            })\r\n          }).catch(e => {\r\n            reject(e)\r\n          })\r\n        }).catch(e => {\r\n          reject(e)\r\n        })\r\n      }).catch(e => {\r\n        reject(e)\r\n      })\r\n    })\r\n    // await this.$refs.xGrid.fullValidate(row).catch(errMap => {\r\n    //   console.log('fullValidate', errMap)\r\n    //   return errMap\r\n    // })\r\n    // this.$XModal.message({ message: `复制单条数据完成，行号为 ${rowTo + 1}` })\r\n  },\r\n  reLoadTable() {\r\n    let self = this\r\n    let xGrid = this.$refs.xGrid\r\n    this.initTable()\r\n    // xGrid.reloadData(xGrid.getTableData().fullData)\r\n    xGrid.reloadColumn(self.initTableConlums())\r\n    xGrid.reloadData(self.initTableData()).then().catch()\r\n  },\r\n  reLoadTableData() {\r\n    let xGrid = this.$refs.xGrid\r\n    // xGrid.reloadData(xGrid.getTableData().fullData)\r\n    xGrid.reloadData(this.initTableData()).then().catch()\r\n  },\r\n  refreshTable(data) {\r\n    // 重新加载所有\r\n    if (data) {\r\n      // 重新加载数据刷新视图 调整 即将废弃\r\n      let xGrid = this.$refs.xGrid\r\n      // xGrid.reloadData(xGrid.getTableData().fullData)\r\n      xGrid.reloadData(data || this.tableDataIn).then().catch()\r\n    } else {\r\n      this.initMounted()\r\n      this.ifRenderTable = false\r\n      this.$nextTick(() => {\r\n        this.ifRenderTable = true\r\n      })\r\n    }\r\n  },\r\n  reloadTableConlums(conlums) {\r\n    // 重加载表头\r\n    this.$refs.xGrid.reloadColumn(conlums ? this.generateTableConlums(conlums, this.tableConfigCp.globalConfig) : self.initTableConlums()).then().catch()\r\n  },\r\n  reloadTableRenderData(data = []) {\r\n    // 重加载渲染数据\r\n    let xGrid = this.$refs.xGrid\r\n    xGrid.reloadData(data)\r\n    this.selection = []\r\n    if (xGrid) {\r\n      xGrid.removeCheckboxRow()\r\n    }\r\n  },\r\n  reCalcAndReLoadTableData({ data, modifyItem, modifyData }) {\r\n    // 重新计算tableData并刷新视图\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.rePerformAllCalcAndConstraintByData(data, true).then(({ dataCodeRowMap, dataCodeRowArr, afterCalcData }) => {\r\n        self.updateFooter().then(() => {\r\n          resolve({ data: afterCalcData, modifyItem, modifyData })\r\n        }).catch((e) => {\r\n          reject(e)\r\n        })\r\n      })\r\n    })\r\n  },\r\n  clearDataRenderField(data) {\r\n    // 删除__字段\r\n    let self = this\r\n    return data.map((item, index) => {\r\n      let itemN = Object.assign({}, item)\r\n      Object.keys(itemN).forEach((key, ki) => {\r\n        if (key.indexOf('__') >= 0) {\r\n          delete itemN[key]\r\n        }\r\n        if (Array.isArray(itemN.children) && itemN.children.length) {\r\n          itemN.children = self.clearDataRenderField(itemN.children)\r\n        }\r\n      })\r\n      return itemN\r\n    })\r\n  },\r\n  /**\r\n   * 根据列表展开情况过滤导出数据\r\n   * @param fullData\r\n   * @param cloneFullData\r\n   * @returns {*}\r\n   */\r\n  fliterTableDataUnexpand(fullData, cloneFullData = this.$XEUtils.clone(fullData, true)) {\r\n    fullData.forEach((row, rowIndex) => {\r\n      if (!this.$refs.xGrid?.isTreeExpandByRow(row)) {\r\n        Reflect.deleteProperty(cloneFullData[rowIndex], 'children')\r\n      } else {\r\n        this.fliterTableDataUnexpand(row.children, cloneFullData[rowIndex].children)\r\n      }\r\n    })\r\n    return cloneFullData\r\n  },\r\n  getTableData() {\r\n    // 获取表格数据\r\n    // const listData = this.getListData()\r\n    const insertRecords = this.$refs.xGrid.getInsertRecords()\r\n    const updateRecords = this.$refs.xGrid.getUpdateRecords()\r\n    const removeRecords = this.$refs.xGrid.getRemoveRecords()\r\n    const { keepSource, tableSourceData } = this.$refs.xGrid.$refs.xTable\r\n    const { fullData, visibleData, tableData, footerData } = this.$refs.xGrid.getTableData()\r\n    const treeExpandData = this.fliterTableDataUnexpand(fullData)\r\n\r\n    const selection = this.$refs.xGrid.getCheckboxRecords(true)\r\n    const { tableColumnsConfig, editRules } = this\r\n    // const combinedData = this.getCombinedData(fullData, tableColumnsConfig)\r\n    const combinedData = []\r\n    return { combinedData, keepSource, tableSourceData, fullData, visibleData, tableData, footerData, tableColumnsConfig, selection, editRules, insertRecords, removeRecords, updateRecords, treeExpandData }\r\n  },\r\n  getCombinedData(data, tableColumnsConfig, combinedData = {}) {\r\n    let self = this\r\n    data.forEach((row, index) => {\r\n      tableColumnsConfig.forEach((column, columnIndex) => {\r\n        if (Array.isArray(column.children) && column.children.length) {\r\n          self.getCombinedData(data, column.children, combinedData)\r\n        } else if (column.combinedType && column.combinedType.indexOf('total') >= 0) {\r\n          combinedData[column.field] = this.accurateJiafa((combinedData[column.field] || 0), (+this.transToNumber(row[column.field], 3) || 0))\r\n        }\r\n      })\r\n    })\r\n    return combinedData\r\n  },\r\n  getPureTableData() {\r\n    // 获取表格纯净数据\r\n    const listData = this.getListData()\r\n    const insertRecords = this.$refs.xGrid.getInsertRecords()\r\n    const updateRecords = this.$refs.xGrid.getUpdateRecords()\r\n    const removeRecords = this.$refs.xGrid.getRemoveRecords()\r\n    const { keepSource, tableSourceData } = this.$refs.xGrid.$refs.xTable\r\n    const { fullData, visibleData, tableData, footerData } = this.$refs.xGrid.getTableData()\r\n    const selection = this.$refs.xGrid.getCheckboxRecords()\r\n    const { tableColumnsConfig, editRules } = this\r\n    // const combinedData = this.getCombinedData(fullData, tableColumnsConfig)\r\n    const combinedData = []\r\n    return { combinedData, keepSource, tableSourceData: this.clearDataRenderField(tableSourceData), fullData: this.clearDataRenderField(fullData), visibleData: this.clearDataRenderField(visibleData), tableData: this.clearDataRenderField(tableData), footerData, tableColumnsConfig, selection: this.clearDataRenderField(selection), editRules, listData: this.clearDataRenderField(listData), insertRecords: this.clearDataRenderField(insertRecords), updateRecords: this.clearDataRenderField(updateRecords), removeRecords: this.clearDataRenderField(removeRecords) }\r\n  },\r\n  getOptionData() {\r\n    // 获取当前操作数据\r\n    return this.$refs.xGrid.getRecordset()\r\n  },\r\n  getInsertRowData() {\r\n    // 获取新增行\r\n    return this.$refs.xGrid.getInsertRecords()\r\n    // this.$XModal.alert(insertRecords.length)\r\n  },\r\n  getSelectionData() {\r\n    // 获取选中\r\n    return this.$refs.xGrid.getCheckboxRecords()\r\n    // this.$XModal.alert(selectRecords.length)\r\n  },\r\n  getData(rowIndex = []) {\r\n    return this.$refs.xGrid.getData(rowIndex)\r\n  },\r\n  validate(row = true) {\r\n    return this.$refs.xGrid.validate(row)\r\n  },\r\n  validateChangeData() {\r\n    // 只校验临时变动的数据，例如新增或修改\r\n    return this.$refs.xGrid.validate()\r\n  },\r\n  async validEvent(row = true) {\r\n    // 校验\r\n    const errMap = await this.$refs.xGrid.validate(row).catch(errMap => errMap)\r\n    if (errMap) {\r\n      this.$XModal.message({ status: 'error', message: '校验不通过！' })\r\n    } else {\r\n      this.$XModal.message({ status: 'success', message: '校验成功！' })\r\n    }\r\n  },\r\n  async fullValidEvent(row = true) {\r\n    // 所有校验\r\n    const errMap = await this.$refs.xGrid.fullValidate(row).catch(errMap => errMap)\r\n    if (errMap) {\r\n      let msgList = []\r\n      Object.values(errMap).forEach(errList => {\r\n        errList.forEach(params => {\r\n          let { rowIndex, column, rules } = params\r\n          rules.forEach(rule => {\r\n            msgList.push(`第 ${rowIndex} 行 ${column.title} 校验错误：${rule.message}`)\r\n          })\r\n        })\r\n      })\r\n      this.$XModal.message({\r\n        status: 'error',\r\n        message: () => {\r\n          return [\r\n            <div class=\"red\" style=\"max-height: 400px;overflow: auto;\">\r\n              {\r\n                msgList.map(msg => <div>{msg}</div>)\r\n              }\r\n            </div>\r\n          ]\r\n        }\r\n      })\r\n    } else {\r\n      this.$XModal.message({ status: 'success', message: '校验成功！' })\r\n    }\r\n  },\r\n  async selectValidEvent() {\r\n    // 选中校验\r\n    let selectRecords = this.$refs.xGrid.getCheckboxRecords()\r\n    if (selectRecords.length > 0) {\r\n      const errMap = await this.$refs.xGrid.validate(selectRecords).catch(errMap => errMap)\r\n      if (errMap) {\r\n        this.$XModal.message({ status: 'error', message: '校验不通过！' })\r\n        return false\r\n      } else {\r\n        this.$XModal.message({ status: 'success', message: '校验成功！' })\r\n        return true\r\n      }\r\n    } else {\r\n      this.$XModal.message({ status: 'warning', message: '未选中数据！' })\r\n    }\r\n  },\r\n  insertEvent(row, column) {\r\n    // 插入数据\r\n    let xTable = this.$refs.xTable\r\n    xTable.insertAt(null, row)\r\n      .then(({ row }) => xTable.setActiveCell(row, column.property))\r\n  },\r\n  transTableColumnsToSource(columns) {\r\n    // 表格渲染数据转换为传入数据格式\r\n    if (!columns) return []\r\n    const newColumns = []\r\n    let self = this\r\n    columns.forEach((column, columnIndex) => {\r\n      newColumns.push(column.own || {})\r\n      if (Array.isArray(column.children) && column.children.length) {\r\n        newColumns[columnIndex].children = self.transTableColumnToSource(column.children)\r\n      }\r\n    })\r\n    return newColumns\r\n  }\r\n}\r\nconst tableEventFn = {\r\n  setRowDrop() {\r\n    // 行拖拽排序\r\n    this.$nextTick(() => {\r\n      const xTable = this.$refs.xGrid\r\n      if (!xTable) return\r\n      let Sortable = this.$Sortable\r\n      let XEUtils = this.$XEUtils\r\n      this.sortable = Sortable.create(xTable.$el.querySelector('.body--wrapper>.vxe-table--body tbody'), {\r\n        handle: '.drag-btn',\r\n        onEnd: ({ item, oldIndex }) => {\r\n          const options = { children: 'children' }\r\n          const targetTrElem = item\r\n          const wrapperElem = targetTrElem.parentNode\r\n          const prevTrElem = targetTrElem.previousElementSibling\r\n          const tableTreeData = this.tableDataIn\r\n          const selfRow = xTable.getRowNode(targetTrElem).item\r\n          const selfNode = XEUtils.findTree(tableTreeData, row => row === selfRow, options)\r\n          if (prevTrElem) {\r\n            // 移动到节点\r\n            const prevRow = xTable.getRowNode(prevTrElem).item\r\n            const prevNode = XEUtils.findTree(tableTreeData, row => row === prevRow, options)\r\n            if (XEUtils.findTree(selfRow[options.children], row => prevRow === row, options)) {\r\n              // 错误的移动\r\n              const oldTrElem = wrapperElem.children[oldIndex]\r\n              wrapperElem.insertBefore(targetTrElem, oldTrElem)\r\n              return this.$XModal.message({ message: '不允许自己给自己拖动！', status: 'error' })\r\n            }\r\n            const currRow = selfNode.items.splice(selfNode.index, 1)[0]\r\n            if (xTable.isTreeExpandByRow(prevRow)) {\r\n              // 移动到当前的子节点\r\n              prevRow[options.children].splice(0, 0, currRow)\r\n            } else {\r\n              // 移动到相邻节点\r\n              prevNode.items.splice(prevNode.index + (selfNode.index < prevNode.index ? 0 : 1), 0, currRow)\r\n            }\r\n          } else {\r\n            // 移动到第一行\r\n            const currRow = selfNode.items.splice(selfNode.index, 1)[0]\r\n            tableTreeData.unshift(currRow)\r\n          }\r\n          // 如果变动了树层级，需要刷新数据\r\n          this.tableDataIn = [...tableTreeData]\r\n        }\r\n      })\r\n    })\r\n  },\r\n  setColumnDrop() { // 设置列拖拽\r\n    let self = this\r\n    let Sortable = this.$Sortable\r\n    this.$nextTick(() => {\r\n      const xTable = this.$refs.xGrid\r\n      this.sortable = Sortable.create(xTable.$el.querySelector('.body--wrapper>.vxe-table--header .vxe-header--row'), {\r\n        handle: '.vxe-header--column:not(.col--fixed)',\r\n        onEnd: ({ item, newIndex, oldIndex }) => {\r\n          const { fullColumn, tableColumn } = xTable.getTableColumn()\r\n          const targetThElem = item\r\n          const wrapperElem = targetThElem.parentNode\r\n          const newColumn = fullColumn[newIndex]\r\n          if (newColumn.fixed) {\r\n            // 错误的移动\r\n            if (newIndex > oldIndex) {\r\n              wrapperElem.insertBefore(targetThElem, wrapperElem.children[oldIndex])\r\n            } else {\r\n              wrapperElem.insertBefore(wrapperElem.children[oldIndex], targetThElem)\r\n            }\r\n            return this.$XModal.message({ message: '固定列不允许拖动！', status: 'error' })\r\n          }\r\n          // 转换真实索引\r\n          const oldColumnIndex = xTable.getColumnIndex(tableColumn[oldIndex])\r\n          const newColumnIndex = xTable.getColumnIndex(tableColumn[newIndex])\r\n          // 移动到目标列\r\n          const currRow = fullColumn.splice(oldColumnIndex, 1)[0]\r\n          fullColumn.splice(newColumnIndex, 0, currRow)\r\n          // 是否开启列顺序缓存\r\n          if (this.tableGlobalConfig.dragColumnsConfig.cacheStatus) {\r\n            // resize之后的宽度拿不到，故暂时只缓存字段名\r\n            const storageColumn = this.transTableCloumnToSource(fullColumn).filter(k => !!k.field).map(k => k && k.field)\r\n            this.$store.commit('setCacheColumn', { key: this.tableId, value: storageColumn })\r\n          }\r\n          xTable.loadColumn(fullColumn)\r\n          self.$emit('ProxyEvent', 'columnDrag', tableColumn)\r\n          self.$emit('columnDrag', tableColumn)\r\n        }\r\n      })\r\n    })\r\n  },\r\n  onContextMenuClick({ menu, row, column, columnIndex, rowIndex }, event) { // 右键菜单\r\n    event = event || window.event\r\n    let self = this\r\n    let xGrid = this.$refs.xGrid\r\n    switch (menu.code) {\r\n      case 'hideColumn':// 隐藏当前列\r\n        xGrid.hideColumn(column)\r\n        break\r\n      case 'showAllColumn': // 显示所有列\r\n        xGrid.resetColumn()\r\n        break\r\n      case 'recover_all': // 显示所有列\r\n        self.reloadTableConlums(self.tableColumnsConfig)\r\n        break\r\n      case 'resetColumn': // 重新加载\r\n        xGrid.resetColumn({ visible: true, resizable: true })\r\n        break\r\n      case 'toggleAllCheckboxRow': // 重新加载\r\n        xGrid.toggleAllCheckboxRow()\r\n        break\r\n      case 'reload': // 重新加载\r\n        break\r\n      case 'insertAt': // 插入数据\r\n        // self.copySelectionRowData()\r\n        self.insertRowData({})\r\n        break\r\n      case 'remove': // 移除数据\r\n        xGrid.remove(row)\r\n        break\r\n      case 'clear': // 清除单元格数据\r\n        xGrid.clearData(row, column.property)\r\n        break\r\n      case 'verify': // 校验并定位到第一个错误\r\n        // this.validate().catch(errMap => console.log(errMap))\r\n        this.validEvent()\r\n        break\r\n      case 'maximize': // 表格最大化\r\n        xGrid.maximize()\r\n        break\r\n      case 'revert': // 表格还原\r\n        self.revertEvent()\r\n        break\r\n      case 'zoom': // 切换表格最大化\r\n        xGrid.zoom()\r\n        break\r\n      // case 'copy': // 复制文本\r\n      //   if (self.$XEClipboard.copy(row[column.property])) {\r\n      //     self.$XModal.message({ message: '已复制到剪贴板！', status: 'success' })\r\n      //   }\r\n      //   break\r\n      // case 'paste': // 复制文本\r\n      //   debugger\r\n      //   let clipboardData = (event.clipboardData || event.originalEvent.clipboardData)\r\n      //   debugger\r\n      //   row[column.property] = clipboardData\r\n      //   break\r\n      //  case 'save':\r\n      //  self.$XModal.message({ message: '保存成功', status: 'success' })\r\n      //  break\r\n      case 'exportDataXlsx':\r\n        console.log('this.$Export', this, this.$Export)\r\n        this.triggerExportOption()\r\n        // this.$Export.exportExcel({\r\n        //   columns: this.tableColumnsConfig,\r\n        //   datas: this.getTableData().fullData\r\n        // })\r\n        // xGrid.openExport({\r\n        //   filename: 'export',\r\n        //   sheetName: 'Sheet1',\r\n        //   type: 'xlsx',\r\n        //   isPrint: true\r\n        // })\r\n        break\r\n      case 'print':\r\n        xGrid.print({\r\n          filename: 'printData',\r\n          mode: 'current',\r\n          isHeader: true,\r\n          isFooter: true\r\n        })\r\n        break\r\n      case 'logCurrentData':\r\n        console.log('当前行数据:', row, '\\n', '当前单元格数据:', row && row[column.property], '\\n', '当前列配置数据:', column, '\\n', '当前行索引:', rowIndex, '\\n', '当前列索引:', columnIndex, '\\n')\r\n        // console.log(row && row[column.property], row, column, columnIndex, rowIndex)\r\n        console.log('当前表格数据:', this.getTableData())\r\n        break\r\n      case 'exportDataPdf':\r\n        xGrid.exportData({\r\n          filename: '导出',\r\n          type: 'pdf'\r\n        })\r\n        break\r\n      case 'clearSort':\r\n        xGrid.clearSort()\r\n        break\r\n      case 'sortAsc':\r\n        xGrid.sort(column.property, 'asc')\r\n        break\r\n      case 'sortDesc':\r\n        xGrid.sort(column.property, 'desc')\r\n        break\r\n    }\r\n    return false\r\n  },\r\n  triggerReverseCheck() {\r\n    // 反选\r\n    let self = this\r\n    let xGrid = self.$refs.xGrid\r\n    return new Promise((resolve, reject) => {\r\n      // let selectionNew = []\r\n      let selection = xGrid.getCheckboxRecords()\r\n      let { tableData } = xGrid.getTableData()\r\n      // tableData.forEach((row, rowIndex) => {\r\n      //   if (!selection.some((item, index) => {\r\n      //     return row._XID === item._XID\r\n      //   })) {\r\n      //     selectionNew.push(row)\r\n      //   }\r\n      // })\r\n      // xGrid.clearCheckboxRow().then(() => {\r\n      xGrid.setCheckboxRow(tableData, true).then(() => {\r\n        xGrid.setCheckboxRow(selection, false).then(() => {\r\n          self.selection = xGrid.getCheckboxRecords()\r\n          resolve(self.selection)\r\n        }).catch(e => {\r\n          reject(e)\r\n        })\r\n      }).catch(e => {\r\n        reject(e)\r\n      })\r\n      // }).catch(e => {\r\n      //   reject(e)\r\n      // })\r\n    })\r\n  },\r\n  handleCheckboxChange(obj, e) {\r\n    // 多选选中或去选某一条事件\r\n    this.selection = obj ? obj.records : this.getSelectionData()\r\n    this.updateFooter().then(() => {\r\n      this.$emit('checkboxChange', obj, e)\r\n      this.$emit('ProxyEvent', 'checkboxChange', obj, this, this.$refs.xGrid)\r\n    }).catch(() => { })\r\n  },\r\n  handleCheckboxAllChange(obj, e) {\r\n    // 全选选中或去选某一条事件\r\n    this.selection = obj.records\r\n    this.updateFooter().then(() => {\r\n      this.$emit('checkboxAll', obj, e)\r\n      this.$emit('ProxyEvent', 'checkboxAll', obj, this, this.$refs.xGrid)\r\n    }).catch(() => { })\r\n  },\r\n  onOptionRowClick(obj) {\r\n    // 操作列点击事件\r\n    this.$emit('onOptionRowClick', obj, this)\r\n    this.$emit('ProxyEvent', 'onOptionRowClick', obj, this, this.$refs.xGrid)\r\n    let methods = this.tableConfigCp.methods\r\n    typeof (methods.onOptionRowClick) === 'function' && methods.onOptionRowClick(obj, this)\r\n  },\r\n  onOptionSortRowClick({ row, column, $rowIndex, data, items, optionType }) {\r\n    switch (optionType) {\r\n      case 'upSort':\r\n        if ($rowIndex > 0) {\r\n          let temp = data[$rowIndex - 1]\r\n          data[$rowIndex - 1] = data[$rowIndex]\r\n          data[$rowIndex] = temp\r\n          // [data[$rowIndex - 1]], data[$rowIndex]] = [data[$rowIndex], data[$rowIndex-1]] ts\r\n        }\r\n        break\r\n      case 'downSort':\r\n        if ($rowIndex < data.length - 1) {\r\n          let temp = data[$rowIndex + 1]\r\n          data[$rowIndex + 1] = data[$rowIndex]\r\n          data[$rowIndex] = temp\r\n          // [data[$rowIndex + 1]], data[$rowIndex]] = [data[$rowIndex], data[$rowIndex + 1]] ts\r\n        }\r\n        break\r\n      case 'topSort':\r\n        if ($rowIndex > 0) {\r\n          data.unshift(data.splice($rowIndex, 1)[0])\r\n        }\r\n        break\r\n      case 'bottomSort':\r\n        if ($rowIndex < data.length - 1) {\r\n          data.push(data.splice($rowIndex, 1)[0])\r\n        }\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    this.$refs.xGrid.reloadData(data).then().catch()\r\n  }\r\n}\r\nconst toolBarEvent = {\r\n  toolbarButtonClickEvent(obj, e) { // toolbar事件代理\r\n    // 工具栏左侧按钮点击事件\r\n    let self = this\r\n    self.$emit('onToolbarBtnClick', obj, this)\r\n    let methods = this.tableConfigCp.methods\r\n    if (typeof (obj.button.callback) === 'function') {\r\n      obj.button.callback(obj, self, e)\r\n    } else {\r\n      typeof (methods.toolbarButtonClickEvent) === 'function' && methods.toolbarButtonClickEvent(obj, self, e)\r\n    }\r\n  },\r\n  onToolbarOperrateClick(code) {\r\n    let self = this\r\n    switch (code) {\r\n      case 'reverseCheck':\r\n        this.triggerReverseCheck().then((res) => {\r\n          this.$emit('triggerReverseCheck', { records: res }, this)\r\n          this.$emit('ProxyEvent', 'triggerReverseCheck', { records: res }, this)\r\n        }).catch(e => {\r\n          console.log(e)\r\n          throw (e)\r\n        })\r\n        break\r\n      case 'refresh':\r\n        this.$emit('onToolbarBtnClick', { context: this, xGrid: this.$refs.xGrid, code: 'refresh' })\r\n        // this.reloadTableConlums(this.tableColumnsConfig)\r\n        // this.refreshTable()\r\n        break\r\n      case 'calculator':\r\n        this.$XModal.message({ status: 'info', message: '此功能正在开发中' })\r\n        break\r\n      case 'zoom':\r\n        this.$refs.xGrid.zoom().then(() => { }).catch(() => { })\r\n        break\r\n      case 'export':\r\n        console.info('toolbarConfigIn.exportCustom==' + this.toolbarConfigIn.exportCustom)\r\n        if (this.toolbarConfigIn && this.toolbarConfigIn.exportCustom) {\r\n          this.$emit('onToolbarBtnClick', { context: this, xGrid: this.$refs.xGrid, code: 'export' })\r\n        } else {\r\n          this.triggerExportOption()\r\n        }\r\n        break\r\n      case 'custom':\r\n        break\r\n      case 'import':\r\n        this.triggerImportOption(\r\n          {\r\n            downloadTemplateCallback(Cb) {\r\n              self.downLoadImportTemplate()\r\n            },\r\n            importSuccessCallback(res) {\r\n              this.$emit('importSuccessCallback', res)\r\n            }\r\n          }\r\n        )\r\n        break\r\n      case 'expandAll':\r\n        this.expendAllLoading = true\r\n        // 设置宏任务，延迟执行避免js进程同步运行大量操作导致渲染进程loading假死\r\n        setTimeout(() => {\r\n          const handle = this.expandAllState\r\n            ? () => this.$refs.xGrid?.clearTreeExpand?.()\r\n            : () => this.$refs.xGrid?.setAllTreeExpand?.(true)\r\n          handle()\r\n            .finally(() => {\r\n              this.expandAllState = !this.expandAllState\r\n              this.expendAllLoading = false\r\n            })\r\n        }, 16.67)\r\n        break\r\n    }\r\n  },\r\n  setMoneyUnit(Unitlevel, oldUnitlevel) { // 设置金额单位\r\n    this.toolbarConfigInCopy.moneyUnitOptions.forEach((item, index) => {\r\n      if (item.value === Unitlevel) {\r\n        this.curSelectMoneyUnitOption = item\r\n      }\r\n    })\r\n    let xGrid = this.$refs.xGrid\r\n    if (!xGrid) {\r\n      return\r\n    }\r\n    xGrid.$forceUpdate()\r\n    xGrid.updateFooter().then(() => { }).catch(() => { })\r\n  },\r\n  /**\r\n   * 口径说明点击（显示弹窗）\r\n   */\r\n  caliberDeclareHandle() {\r\n    this.caliberDeclareVisible = !this.caliberDeclareVisible\r\n  }\r\n}\r\nconst pageEvent = { // 分页事件\r\n  setPagerConfig() {\r\n    // 更新分页配置\r\n    if (this.getbasicDataType(this.pagerConfig) === 'Boolean') {\r\n      this.pagerConfigIn = undefined\r\n    } else {\r\n      this.pagerConfigIn = Object.assign({}, this.pagerConfigIn ? this.pagerConfigIn : this.pagerConfigInCp, this.pagerConfig)\r\n    }\r\n  },\r\n  handlePageChange({ currentPage, pageSize }) {\r\n    // 分页改变事件\r\n    this.pagerConfigIn.currentPage = currentPage\r\n    this.pagerConfigIn.pageSize = pageSize\r\n    this.loadData()\r\n  },\r\n  handleRefresh() {\r\n    // 刷新\r\n    this.formSearchSubmit({ data: {} })\r\n  },\r\n  getColumnsList() {\r\n    let newColumnsList = []\r\n    this.tableColumnsConfig.forEach(v => {\r\n      newColumnsList.push(v.field)\r\n    })\r\n    return newColumnsList\r\n  },\r\n  delSearchfromMain() {\r\n    // 父组件调用此方法清空查询数据\r\n    this.formSearchData.filterValue = ''\r\n  },\r\n  formSearchSubmit({ data, $event }) {\r\n    let newTbleDatas = []\r\n    // this.formSearchData.filterValue\r\n    let search = this.formSearchData.filterValue\r\n    if (search !== '') {\r\n      this.tableDataIn.forEach(dataNews => {\r\n        let newColumnsList = this.tableColumnsFieldArr\r\n        console.log(newColumnsList)\r\n        for (let i = 0; i < Object.keys(dataNews).length; i++) {\r\n          if (newColumnsList.includes(Object.keys(dataNews)[i]) && String(dataNews[Object.keys(dataNews)[i]]).indexOf(search) > -1) {\r\n            newTbleDatas.push(dataNews)\r\n            break\r\n          }\r\n        }\r\n      })\r\n      this.reloadTableRenderData(newTbleDatas)\r\n    } else {\r\n      this.reloadTableRenderData(this.tableDataIn)\r\n    }\r\n  },\r\n  onFuzzySearchEnter() {\r\n    if (this.toolbarConfigInCopy.search !== 'remoteSearch') {\r\n      if (window.event.keyCode === 13 && this.filtertext) {\r\n\r\n      }\r\n    } else {\r\n      if (window.event.keyCode === 13 && this.filtertext) {\r\n        this.filtertextCp = this.filtertext\r\n        this.$refs.xGrid.updateData()\r\n      } else {\r\n        this.filtertextCp = ''\r\n        this.$refs.xGrid.updateData()\r\n      }\r\n    }\r\n  },\r\n  getHighlightedFilterText(val) { // 渲染施加高亮\r\n    if (this.filtertextCp) {\r\n      let regf = new RegExp(this.filtertextCp, 'ig')\r\n      return String(val).replace(regf, match => {\r\n        if (match) {\r\n          return `<span class=\"filter-lighting\">${match}</span>`\r\n        } else {\r\n          return ''\r\n        }\r\n      })\r\n    } else {\r\n      return val\r\n    }\r\n  },\r\n  loadData() {\r\n    // 加载数据\r\n    let self = this\r\n    let searchParams = {\r\n      params: this.formSearchData,\r\n      currentPage: this.pagerConfigIn.currentPage,\r\n      pageSize: this.pagerConfigIn.pageSize\r\n    }\r\n    self.$emit('ajaxData', searchParams, this)\r\n  },\r\n  onAdvancedSearchBtnClick() {\r\n    this.$emit('onAdvancedSearchBtnClick', {\r\n      params: this.formSearchData,\r\n      currentPage: this.pagerConfigIn.currentPage,\r\n      pageSize: this.pagerConfigIn.pageSize\r\n    }, this)\r\n  }\r\n}\r\nconst proxyFn = {\r\n  // resgistEventProxy() {\r\n  // let arg=[...arguments]\r\n  //   // 注册事件代理\r\n  //   let self = this\r\n  //   Object.keys(self.tableEventIn).forEach((item, index) => {\r\n  //     self.$on(self.hyphenate(item), self.tableEventIn[item].bind(self))\r\n  //   })\r\n  // }\r\n  handleSearch() {\r\n    const filterName = this.$XEUtils.toString(this.filterName).trim().toLowerCase()\r\n    if (filterName) {\r\n      const filterRE = new RegExp(filterName, 'gi')\r\n      const options = { children: 'list' }\r\n      const searchProps = ['name', 'desc', 'type', 'enum', 'defVal']\r\n      const rest = this.$XEUtils.searchTree(this.tableData, item => searchProps.some(key => item[key].toLowerCase().indexOf(filterName) > -1), options)\r\n      this.$XEUtils.eachTree(rest, item => {\r\n        searchProps.forEach(key => {\r\n          item[key] = item[key].replace(filterRE, match => `<span class=\"keyword-lighten\">${match}</span>`)\r\n        })\r\n      }, options)\r\n      this.apiList = rest\r\n      this.$nextTick(() => {\r\n        if (this.$refs.xTable) {\r\n          this.$refs.xTable.setAllTreeExpand(true)\r\n        }\r\n      })\r\n    } else {\r\n      this.apiList = this.tableData\r\n      this.$nextTick(() => {\r\n        if (this.$refs.xTable) {\r\n          this.$refs.xTable.setTreeExpand(this.defaultExpandRows, true)\r\n        }\r\n      })\r\n    }\r\n  },\r\n  // 调用频率间隔 500 毫秒\r\n  searchEvent() {\r\n    this.$XEUtils.debounce(function () {\r\n      this.handleSearch()\r\n    }, 500, { leading: false, trailing: true })\r\n  }\r\n}\r\nconst axiosEvent = {\r\n  async $asyncGet(url, params, cb) { // 使用异步调用，返回结果后再执行\r\n    await this.$http.get(url, params, origin)\r\n  },\r\n  async $asyncPost(url, params, cb) { // 使用异步调用，返回结果后再执行\r\n    await this.$http.post(url, params, origin)\r\n  },\r\n  $post(url, params, origin) {\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.$http.post(url, {\r\n        params: params\r\n      })\r\n        .then(response => {\r\n          if (response.code === 200) {\r\n            resolve(response.data)\r\n          } else {\r\n            resolve([])\r\n          }\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  },\r\n  $get(url, params, origin) {\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.$http.get(url, {\r\n        params: params\r\n      })\r\n        .then(response => {\r\n          if (response.code === 200) {\r\n            resolve(response.data)\r\n          } else {\r\n            resolve([])\r\n          }\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n}\r\nconst tableEvent = {\r\n  cellOptionCallBack() { // 渲染器回调事件\r\n    this.$emit('cellOptionCallBack', ...arguments, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'cellOptionCallBack', ...arguments, this, this.$refs.xGrid)\r\n  },\r\n  // cellChange() { // 渲染器回调事件\r\n  //   this.$emit('cellChange', ...arguments, this, this.$refs.xGrid)\r\n  // },\r\n  keydown(obj) {\r\n    // 添加enter 切换下一个编辑单元格\r\n    // let self = this\r\n    // let event = obj.event || window.event\r\n    // const { xGrid } = self.$refs\r\n    // const { row, rowIndex, column } = xGrid.getActiveRecord()\r\n    // if (event.keyCode === 13 && row !== null) {\r\n    //   const { fullData } = self.getTableData()\r\n    //   let indexof = self.tableColumnsSingEditFieldArr.indexOf(column.property)\r\n    //   if (indexof + 1 < self.tableColumnsSingEditFieldArr.length) {\r\n    //     xGrid.setActiveCell(row, self.tableColumnsSingEditFieldArr[indexof + 1])\r\n    //   } else {\r\n    //     xGrid.setCurrentRow(fullData[rowIndex + 1]).then(() => {\r\n    //       xGrid.setActiveCell(fullData[rowIndex + 1], self.tableColumnsSingEditFieldArr[0])\r\n    //     })\r\n    //   }\r\n    // } else {\r\n    this.$emit('keydown', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'keydown', obj, this, this.$refs.xGrid)\r\n    // }\r\n  }, // 当表格被激活且键盘被按下时会触发的事件  { $event }\r\n  radioChange(obj) {\r\n    this.$emit('radioChange', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'radioChange', obj, this, this.$refs.xGrid)\r\n  }, // 只对 type = radio 有效， 当手动勾选并且值发生改变时触发的事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  cellClick(obj) {\r\n    let self = this\r\n    const { xGrid } = this.$refs\r\n    if (this.tableConfigCp.globalConfig.cellClickCheck && this.tableGlobalConfigIn.cellClickCheck) {\r\n      // const { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, triggerRadio, triggerCheckbox, triggerTreeNode, triggerExpandNode, $event } = obj\r\n      const { row, $event, column } = obj\r\n      if (column.type !== 'checkbox') {\r\n        if ($event.shiftKey) {\r\n          // option\r\n        } else {\r\n          xGrid.setCheckboxRow([row], !xGrid.isCheckedByCheckboxRow(row)).then(() => {\r\n            self.selection = this.$refs.xGrid.getCheckboxRecords()\r\n            self.updateFooter().then(() => {\r\n              xGrid.setCurrentRow(row).then(() => {\r\n\r\n              })\r\n            }).catch(() => { })\r\n          })\r\n        }\r\n      }\r\n    }\r\n    this.$emit('cellClick', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'cellClick', obj, this, this.$refs.xGrid)\r\n  }, // 单元格被点击时会触发该事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  cellDblclick(obj) {\r\n    const { row, column } = obj\r\n    if (this.treeConfigIn && this.treeConfigIn.dblExpand) {\r\n      if (this.editConfigIn && column.treeNode) {\r\n        if (this.treeConfigIn.dblExpandAll) {\r\n          this.dblRowExpandAll(row)\r\n        } else {\r\n          this.tableOptionFn().toggleTreeExpand(row).then(() => { })\r\n        }\r\n      } else if (!this.editConfigIn && this.treeConfigIn.onlyDblTreeNodeExpand && column.treeNode) {\r\n        if (this.treeConfigIn.dblExpandAll) {\r\n          this.dblRowExpandAll(row)\r\n        } else {\r\n          this.tableOptionFn().toggleTreeExpand(row).then(() => { })\r\n        }\r\n      } else if (!this.editConfigIn) {\r\n        if (this.treeConfigIn.dblExpandAll) {\r\n          this.dblRowExpandAll(row)\r\n        } else {\r\n          this.tableOptionFn().toggleTreeExpand(row).then(() => { })\r\n        }\r\n      } else {\r\n\r\n      }\r\n    } else {\r\n      this.$emit('cellDblclick', obj, this, this.$refs.xGrid)\r\n      this.$emit('ProxyEvent', 'cellDblclick', obj, this, this.$refs.xGrid)\r\n    }\r\n  }, // 单元格被双击时会触发该事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  dblRowExpandAll(row) {\r\n    let self = this\r\n    self.tableOptionFn().toggleTreeExpand(row).then((res) => {\r\n      if (Array.isArray(row[this.treeConfigIn.children]) && row[this.treeConfigIn.children].length) {\r\n        row[this.treeConfigIn.children].forEach((item, index) => {\r\n          self.dblRowExpandAll(item)\r\n        })\r\n      }\r\n    })\r\n  },\r\n  cellContextMenu(obj) {\r\n    this.$emit('cellContextMenu', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'cellContextMenu', obj, this, this.$refs.xGrid)\r\n  }, // 只对 context - menu 配置时有效， 单元格被鼠标右键时触发该事件 { type, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  cellMouseenter(obj) {\r\n    this.$emit('cellMouseenter', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'cellMouseenter', obj, this, this.$refs.xGrid)\r\n  }, // 当单元格 hover 进入时会触发该事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  cellMouseleave(obj) {\r\n    this.$emit('cellMouseleave', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'cellMouseleave', obj, this, this.$refs.xGrid)\r\n  }, // 当单元格 hover 退出时会触发该事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  headerCellClick(obj) {\r\n    this.$emit('headerCellClick', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'headerCellClick', obj, this, this.$refs.xGrid)\r\n  }, // 表头单元格被点击时会触发该事件 { $rowIndex, column, columnIndex, $columnIndex, triggerResizable, triggerSort, triggerFilter, $event }\r\n  headerCellDblclick(obj) {\r\n    this.$emit('headerCellDblclick', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'headerCellDblclick', obj, this, this.$refs.xGrid)\r\n  }, // 表头单元格被双击时会触发该事件 { $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  // headerCellContextMenu(obj) {\r\n  //   this.$emit('headerCellContextMenu', obj, this, this.$refs.xGrid)\r\n  // }, // 只对 context-menu 配置时有效，表头单元格被鼠标右键时触发该事件 { type, column, columnIndex, $event }\r\n  footerCellClick(obj) {\r\n    this.$emit('footerCellClick', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'footerCellClick', obj, this, this.$refs.xGrid)\r\n  }, // 表尾单元格被点击时会触发该事件 // { items, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  footerCellDblclick(obj) {\r\n    this.$emit('footerCellDblclick', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'footerCellDblclick', obj, this, this.$refs.xGrid)\r\n  }, // 表尾单元格被双击时会触发该事件 { items, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  footerCellContextMenu(obj) {\r\n    this.$emit('footerCellContextMenu', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'footerCellContextMenu', obj, this, this.$refs.xGrid)\r\n  }, // 只对 context - menu 配置时有效， 表尾单元格被鼠标右键时触发该事件 { type, column, columnIndex, $event }\r\n  sortChange(obj) {\r\n    this.$emit('sortChange', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'sortChange', obj, this, this.$refs.xGrid)\r\n  }, // 当排序条件发生变化时会触发该事件 { column, column.property, order, $event }\r\n  filterChange(obj) {\r\n    this.$emit('filterChange', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'filterChange', obj, this, this.$refs.xGrid)\r\n  }, // 当筛选条件发生变化时会触发该事件 { column, property, values, datas, filters, $event }{ column, property, values, datas, filters, $event }\r\n  resizableChange(obj) {\r\n    this.$emit('resizableChange', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'resizableChange', obj, this, this.$refs.xGrid)\r\n  }, // 当列宽拖动发生变化时会触发该事件 { $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  toggleRowExpand(obj) {\r\n    // 懒加载子节点需要给子节点设置唯一键\r\n    setRowUuidKey(obj.row, this)\r\n\r\n    this.$emit('toggleRowExpand', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'toggleRowExpand', obj, this, this.$refs.xGrid)\r\n  }, // 当行展开或收起时会触发该事件 { expanded, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  toggleTreeExpand(obj) {\r\n    this.$emit('toggleTreeExpand', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'toggleTreeExpand', obj, this, this.$refs.xGrid)\r\n  }, // 当树节点展开或收起时会触发该事件 { expanded, row, column, columnIndex, $columnIndex, $event }\r\n  contextMenuClick(obj) {\r\n    this.$emit('contextMenuClick', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'contextMenuClick', obj, this, this.$refs.xGrid)\r\n  }, // 只对 context-menu 配置时有效，当点击快捷菜单时会触发该事件 { menu, type, row, rowIndex, column, columnIndex, $event }\r\n  currentChange(obj) {\r\n    // this.performTableDataCalculate(obj)\r\n    this.$nextTick(() => {\r\n      this.$emit('currentChange', obj, this, this.$refs.xGrid)\r\n      this.$emit('ProxyEvent', 'currentChange', obj, this, this.$refs.xGrid)\r\n    })\r\n  }, // 只对 highlightCurrentRow 有效，当手动选中行并且值发生改变时触发的事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  editClosed(obj) {\r\n    // this.performAfterEditClosedCalculate(obj).then((row) => {\r\n    obj.data = obj.data || obj.$grid.getTableData().fullData || []\r\n    this.performTableDataCalculate(obj).then(({ row }) => {\r\n      this.$emit('editClosed', obj, this, this.$refs.xGrid)\r\n      this.$emit('ProxyEvent', 'editClosed', obj, this, this.$refs.xGrid)\r\n    })\r\n  }, //\r\n  editActived(obj) {\r\n    this.$emit('editActived', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'editActived', obj, this, this.$refs.xGrid)\r\n  }, // 只对 edit-config 配置时有效，单元格被激活编辑时会触发该事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex }\r\n  editDisabled(obj) {\r\n    this.$emit('editDisabled', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'editDisabled', obj, this, this.$refs.xGrid)\r\n  }, // 只对 edit-config 配置时有效，当单元格激活时如果是禁用状态时会触发该事件 { row, rowIndex, $rowIndex, column, columnIndex, $columnIndex }\r\n  validError(obj) {\r\n    this.$emit('validError', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'validError', obj, this, this.$refs.xGrid)\r\n  }, // 只对 edit-rules 配置时有效，当数据校验不通过时会触发该事件 { rule, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex }\r\n  scroll(obj) {\r\n    // 页面滚动\r\n    let self = this\r\n    // const { type, scrollTop, scrollLeft, isX, isY, $event } = obj\r\n    const { scrollTop, $event } = obj\r\n    this.$emit('scroll', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'scroll', obj, this, this.$refs.xGrid)\r\n    if (self.scrollLoadConfigCp && self.scrollLoadConfigCp.enabled) {\r\n      if (+scrollTop + $event.target.offsetHeight > ($event.target.scrollHeight - 20)) {\r\n        self.debounceItemChange(() => { self.performScrollLoad(obj) })\r\n      }\r\n    }\r\n  }, // 表格滚动时会触发该事件 { type, scrollTop, scrollLeft, isX, isY, $event }\r\n  performScrollLoad(obj) {\r\n    // 兼容手机端和PC端滚动加载\r\n    let self = this\r\n    // 滚动条的位置 在页面上返回内容的可视高度 返回整个元素的高度（包括带滚动条的隐蔽的地方）\r\n    self.scrollLoading = true\r\n    self.scrollLoadConfigCp.loadData(self.scrollLoadConfigCp, this.formSearchData)\r\n      .then((res) => {\r\n        self.scrollLoading = false\r\n        if (res && res.data && res.data.length) {\r\n          self.loadScrollTableData(res.data)\r\n          Object.assign(self.scrollLoadConfigCp, {\r\n            curGt: self.scrollLoadConfigCp.curGt + res.data.length,\r\n            currentPage: self.scrollLoadConfigCp.currentPage + 1,\r\n            tatal: res.total\r\n          })\r\n        }\r\n      })\r\n  },\r\n  custom(obj) {\r\n    this.$emit('custom', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'custom', obj, this, this.$refs.xGrid)\r\n  },\r\n  formSubmitInvalid(obj) {\r\n    this.$emit('formSubmitInvalid', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'formSubmitInvalid', obj, this, this.$refs.xGrid)\r\n  }, // 只对 form-config 配置时有效，表单提交时如果校验不通过会触发该事件 { data, errMap, $event }\r\n  formReset(obj) {\r\n    this.$emit('formReset', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'formReset', obj, this, this.$refs.xGrid)\r\n  }, // 只对 form-config 配置时有效，表单重置时会触发该事件 { data, $event }\r\n  formToggleCollapse(obj) {\r\n    this.$emit('formToggleCollapse', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'formToggleCollapse', obj, this, this.$refs.xGrid)\r\n  }, // 只对 form-config 配置时有效，当折叠按钮被手动点击时会触发该事件 { collapse, data, $event }\r\n  zoom(obj) {\r\n    this.$emit('zoom', obj, this, this.$refs.xGrid)\r\n    this.$emit('ProxyEvent', 'zoom', obj, this, this.$refs.xGrid)\r\n  } // 当最大化或还原操作被手动点击时会后触发该事件 { type, $event }\r\n  // checkboxChange(obj) {\r\n  //   this.$emit('checkboxChange', obj,  this, this.$refs.xGrid)\r\n  // } // 只对 type=checkbox 有效，当手动勾选并且值发生改变时触发的事件 { records, reserves, indeterminates, checked, row, rowIndex, $rowIndex, column, columnIndex, $columnIndex, $event }\r\n  //  checkboxAll(obj) {\r\n  //    this.$emit('checkboxAll', obj,  this, this.$refs.xGrid)\r\n  //  }, // 只对 type=checkbox 有效，当手动勾选全选时触发的事件 { records, reserves, indeterminates, checked, $event }\r\n  // 如果与工具栏关联， 在自定义列按钮被手动点击后会触发该事件 { type, $event }\r\n  // pageChange(obj) {\r\n  //      this.$emit('pageChange', obj,  this, this.$refs.xGrid)\r\n  // }, // 只对 pager-config 配置时有效，分页发生改变时会触发该事件 { type, currentPage, pageSize, $event }\r\n  // formSubmit (obj) {\r\n  //   this.$emit('formSubmit', obj,  this, this.$refs.xGrid)\r\n  // }, // 只对 form-config 配置时有效，表单提交时会触发该事件 { data, $event }\r\n}\r\nconst calculateTool = {\r\n  // 执行顺序： 取数-->行内计算-->分级汇总-->父级行内计算-->单元格交叉计算(涉及的行计算)-->行约束-->单元格约束\r\n  addMissingFieldsAndCalcColFormula(tableData) {\r\n    // 添加缺失字段并执行全量列计算\r\n    let self = this\r\n    tableData = Array.isArray(tableData) ? tableData : []\r\n    tableData.forEach((row) => {\r\n      self.tableColumnsFieldArr.forEach((item) => {\r\n        // let render = self.tableColumnsFieldMap[item].editRender || self.tableColumnsFieldMap[item].cellRender\r\n        // 遍历配置项生成的前缀数组，并且其前缀在数据包中不存在时，动态给其绑定一个前缀\r\n        // if (render && render.props && render.props.multiple) {\r\n        //   if (Array.isArray(row[item])) {\r\n        //     row[item + '__multiple'] = [...row[item]]\r\n        //   } else if (typeof row[item] === 'string') {\r\n        //     row[item + '__multiple'] = row[item].split(',')\r\n        //   } else {\r\n        //     row[item + '__multiple'] = []\r\n        //   }\r\n        // } else if (render && render.name === '$vxeMoney') {\r\n        //   row[item + '__moneySwitchinput'] = self.accurateChuFa((row[item] + '').replace(/null|undefined|NaN/ig, ''), self.moneyUnit) + ''\r\n        // } else {\r\n        // }\r\n        // 遍历配置项生成的前缀数组，并且其前缀在数据包中不存在时，动态给其绑定一个前缀\r\n        row[item] = typeof row[item] !== 'object' ? (row[item] === undefined ? '' : row[item]) : (row[item] === null ? '' : row[item])\r\n      })\r\n      row = this.reductionColFormula(this.calculateConstraintConfigIn.colFormulaConfig, row)\r\n      if (Array.isArray(row.children) && row.children.length && this.treeConfigIn) {\r\n        row.children = self.addMissingFieldsAndCalcColFormula(row.children)\r\n      }\r\n    })\r\n    self.reductionRowCodeFormula(this.calculateConstraintConfigIn.rowCodeFormulaConfig, tableData, self.id)\r\n    return tableData\r\n  },\r\n  reductionColFormula(colFormulaMap, row, property) {\r\n    // 单条数据计算\r\n    // rowFormulaMap= { \"colfield\":\"{colfield}[运算符]\" }\r\n    let xGrid = this.$refs.xGrid\r\n    const { visibleColumn = [] } = (xGrid && xGrid.getTableColumn && xGrid.getTableColumn()) || {}\r\n    let visibleColumnObj = {}\r\n    visibleColumn.forEach(item => {\r\n      if (!visibleColumnObj[item.property]) {\r\n        visibleColumnObj[item.property] = item\r\n      }\r\n    })\r\n    // property 标识当前编辑字段配置的有公式，但是该字段值是可编辑的，标记候后的值保存，不用重新按公式计算新值\r\n    let colFormulaMapCp = this.deepCopy(colFormulaMap)\r\n    let hasCalcColFormulaMap = {}\r\n    let i = 0\r\n    let ifDoWhile = true\r\n    // 处理当前编辑字段配置的有公式，但是该字段值是可编辑的，编辑后的值保存，不用重新按公式计算新值\r\n    // debugger\r\n    if (this.editConfigIn.formulaEditable && property && colFormulaMapCp[property]) {\r\n      delete colFormulaMapCp[property]\r\n    }\r\n    // 初始化回显时如果该字段有值，就显示自身默认值，不做公式计算\r\n    if (this.editConfigIn.formulaEditable && !property) {\r\n      const colFormulaMapArr = Object.keys(colFormulaMapCp)\r\n      colFormulaMapArr.forEach(key => {\r\n        if (row[key] || row[key] === 0) {\r\n          delete colFormulaMapCp[key]\r\n        }\r\n      })\r\n    }\r\n    try {\r\n      while (ifDoWhile) {\r\n        let colFormulaMapArr = Object.keys(colFormulaMapCp)\r\n        if (colFormulaMapArr.length) {\r\n          for (let cmai = 0; cmai < colFormulaMapArr.length; cmai++) {\r\n            i++\r\n            let item = colFormulaMapArr[cmai]\r\n            let formula = colFormulaMapCp[item]\r\n            let regR = new RegExp('({[a-zA-Z0-9_]*})', 'ig')\r\n            let rowsKey = formula.match(regR) === null ? [] : formula.match(regR)\r\n            if (rowsKey.length) {\r\n              for (let keyCF in rowsKey) {\r\n                let keyC = rowsKey[keyCF].replace(/\\{|\\}/g, '')\r\n                let reg = new RegExp('({' + keyC.replace(/\\$/ig, '\\\\$') + '})', 'ig')\r\n                if (row[keyC] !== undefined && !(hasCalcColFormulaMap[keyC] !== undefined || colFormulaMapCp[keyC])) {\r\n                  colFormulaMapCp[item] = formula.replace(reg, isNaN(parseFloat(row[keyC])) ? 0 : parseFloat(row[keyC]))\r\n                } else if (hasCalcColFormulaMap[keyC] !== undefined) {\r\n                  colFormulaMapCp[item] = formula.replace(reg, hasCalcColFormulaMap[keyC])\r\n                } else if (!colFormulaMapCp[keyC]) {\r\n                  colFormulaMapCp[item] = formula.replace(reg, 0)\r\n                }\r\n              }\r\n            } else {\r\n              // let calcResult = eval(formula)\r\n              let calcResult = evalCalcUtil.eval(formula)\r\n              hasCalcColFormulaMap[item] = calcResult === Infinity || calcResult === -Infinity || isNaN(calcResult) || calcResult === null ? '' : util.accurateFixed(calcResult, 2)\r\n              // 列单独配置元和万元单位\r\n              if (visibleColumnObj[item] && visibleColumnObj[item].params && visibleColumnObj[item].params.moneyUnit) {\r\n                hasCalcColFormulaMap[item] = this.accurateFixed(this.transToNumber(this.accurateChuFa(hasCalcColFormulaMap[item], visibleColumnObj[item].params.moneyUnit), visibleColumnObj[item].params.digits || 2), 2)\r\n              }\r\n              // feat：对于$vxeRatio渲染的百分比 可根据配置保留小数位\r\n              if (visibleColumnObj[item]?.cellRender?.name === '$vxeRatio') {\r\n                // 保留小数位数支持：外部单列配置 || 全局配置 || 默认配置\r\n                const digits = visibleColumnObj[item]?.params?.digits || this.formulaDigits || 2\r\n                // XEUtils.round四舍五入\r\n                hasCalcColFormulaMap[item] = calcResult === Infinity || calcResult === -Infinity || isNaN(calcResult) || calcResult === null\r\n                  ? ''\r\n                  : XEUtils.round(calcResult, digits)\r\n              }\r\n              delete colFormulaMapCp[item]\r\n            }\r\n          }\r\n        } else {\r\n          ifDoWhile = false\r\n        }\r\n        if (i === 100000) {\r\n          console.log(colFormulaMap, hasCalcColFormulaMap)\r\n          console.error('请核查公式')\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // console.log(i)\r\n      // console.log(colFormulaMap, hasCalcColFormulaMap)\r\n      // console.error('请核查公式')\r\n    }\r\n    // console.log(hasCalcColFormulaMap)\r\n    // debugger\r\n    return Object.assign(row, hasCalcColFormulaMap)\r\n  },\r\n  reductionRowFormula(rowFormulaMap, data, tableId) {\r\n    // 单元格交叉计算\r\n    // rowFormulaMap= { \"colField:rowIndex\":\"{tableId:colField:rowIndex}[运算符]\" }\r\n    let rowFormulaMapCp = this.deepCopy(rowFormulaMap)\r\n    let hasCalcrowFormulaMap = {}\r\n    let i = 0\r\n    let ifDoWhile = true\r\n    try {\r\n      while (ifDoWhile) {\r\n        let rowFormulaMapArr = Object.keys(rowFormulaMapCp)\r\n        if (rowFormulaMapArr.length) {\r\n          for (let cmai = 0; cmai < rowFormulaMapArr.length; cmai++) {\r\n            i++\r\n            let item = rowFormulaMapArr[cmai]\r\n            let formula = rowFormulaMapCp[item]\r\n            let regR = new RegExp('({[a-zA-Z0-9_:\\$]*})', 'ig')\r\n            let rowsKey = formula.match(regR) === null ? [] : formula.match(regR)\r\n            if (rowsKey.length) {\r\n              for (let keyCF in rowsKey) {\r\n                let formulaArr = rowsKey[keyCF].replace(/\\{|\\}/g, '').split(':')\r\n                let reg = new RegExp('({' + formulaArr.join(':').replace(/\\$/ig, '\\\\$') + '})', 'ig')\r\n                if (formulaArr[0] === tableId) {\r\n                  if (data[formulaArr[2]] && data[formulaArr[2]][formulaArr[1]] !== undefined && !(hasCalcrowFormulaMap[formulaArr[1] + ':' + formulaArr[2]] !== undefined || rowFormulaMapCp[formulaArr[1] + ':' + formulaArr[2]])) {\r\n                    rowFormulaMapCp[item] = formula.replace(reg, isNaN(parseFloat(data[formulaArr[2]][formulaArr[1]])) ? 0 : parseFloat(data[formulaArr[2]][formulaArr[1]]))\r\n                  } else if (hasCalcrowFormulaMap[formulaArr[1] + ':' + formulaArr[2]] !== undefined) {\r\n                    rowFormulaMapCp[item] = formula.replace(reg, hasCalcrowFormulaMap[formulaArr[1] + ':' + formulaArr[2]])\r\n                  } else if (!rowFormulaMapCp[formulaArr[1] + ':' + formulaArr[2]]) {\r\n                    rowFormulaMapCp[item] = formula.replace(reg, 0)\r\n                  }\r\n                } else {\r\n                  rowFormulaMapCp[item] = formula.replace(reg, 0)\r\n                }\r\n              }\r\n            } else {\r\n              let calcResult = evalCalcUtil.eval(formula)\r\n              hasCalcrowFormulaMap[item] = calcResult === Infinity || calcResult === -Infinity || isNaN(calcResult) ? '' : util.accurateFixed(calcResult, 2)\r\n              delete rowFormulaMapCp[item]\r\n            }\r\n          }\r\n        } else {\r\n          ifDoWhile = false\r\n        }\r\n        if (i === 1000000) {\r\n          console.log(rowFormulaMap, hasCalcrowFormulaMap)\r\n          console.error('请核查公式')\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(rowFormulaMap, hasCalcrowFormulaMap)\r\n      console.error('请核查公式')\r\n    }\r\n    Object.keys(hasCalcrowFormulaMap).forEach((item, index) => {\r\n      let rowCellArr = item.split(':')\r\n      if (data[rowCellArr[1]]) {\r\n        data[rowCellArr[1]][rowCellArr[0]] = hasCalcrowFormulaMap[item] === '0.00' ? '' : hasCalcrowFormulaMap[item]\r\n      }\r\n    })\r\n    return data\r\n  },\r\n  reverDataCodeRowMap(data, codeKey, obj) {\r\n    // 递归生成数据code映射\r\n    let self = this\r\n    obj = obj || {\r\n      dataCodeRowMap: {}\r\n    }\r\n    data.forEach((item, index) => {\r\n      if (Array.isArray(item.children) && item.children.length) {\r\n        self.reverDataCodeRowMap(item.children, codeKey, obj)\r\n      } else {\r\n        obj.dataCodeRowMap[item[codeKey]] = item\r\n      }\r\n    })\r\n    return obj\r\n  },\r\n  reverCalcRowCodeFormula(reverCalcRowCodeFormula, data, tableId) {\r\n    // 递归进行单元格交叉依赖计算\r\n    let self = this\r\n    Object.keys(reverCalcRowCodeFormula).map((item, index) => {\r\n      return {\r\n        itemcode: item.split(':')[1],\r\n        property: item.split(':')[0]\r\n      }\r\n    }).forEach((item, id) => {\r\n      let formColCalList = self.getFormColCalBack(self.id + item.property + item.itemcode)\r\n      if (Object.keys(formColCalList).length) {\r\n        self.reductionRowCodeFormula(formColCalList, self.$refs.xGrid.getTableData().fullData, self.id)\r\n      }\r\n    })\r\n  },\r\n  getDataCodeRowMapCumulativeResult(dataCodeRowMap, field) {\r\n    // 获取重复itemcode的计算结果\r\n    return isNaN(parseFloat(dataCodeRowMap[field])) ? 0 : parseFloat(dataCodeRowMap[field])\r\n  },\r\n  reductionRowCodeFormula(rowCodeFormulaMap, data, tableId) {\r\n    // 单元格交叉计算根据行 code\r\n    // rowCodeFormulaMap= { \"colField:rowCode\":\"{tableId:colField:rowCode}[运算符]\" }\r\n    let self = this\r\n    let { calcAndConstraintTableId, dataType, calcAndConstraintItemCodeField, gradedSummaryFields } = self.calculateConstraintConfigIn\r\n    let isTreeData = dataType === undefined ? self.treeConfigIn : dataType === 'tree' ? 1 : 0\r\n    tableId = calcAndConstraintTableId || self.id\r\n    let treeData = this.getDataCodeTreeData(data, calcAndConstraintItemCodeField, gradedSummaryFields, isTreeData)\r\n    let { dataCodeRowMap } = self.recursiveDataCodeRowMap(treeData, calcAndConstraintItemCodeField, true)\r\n    let rowCodeFormulaMapCp = this.deepCopy(rowCodeFormulaMap)\r\n    let hasCalcrowCodeFormulaMap = {}\r\n    let i = 0\r\n    let ifDoWhile = true\r\n    try {\r\n      while (ifDoWhile) {\r\n        let rowCodeFormulaMapArr = Object.keys(rowCodeFormulaMapCp)\r\n        if (rowCodeFormulaMapArr.length) {\r\n          for (let cmai = 0; cmai < rowCodeFormulaMapArr.length; cmai++) {\r\n            i++\r\n            let item = rowCodeFormulaMapArr[cmai]\r\n            let formula = rowCodeFormulaMapCp[item]\r\n            let regR = new RegExp('({[a-zA-Z0-9_:\\$]*})', 'ig')\r\n            let rowsKey = formula.match(regR) === null ? [] : formula.match(regR)\r\n            if (rowsKey.length) {\r\n              for (let keyCF in rowsKey) {\r\n                let formulaArr = rowsKey[keyCF].replace(/\\{|\\}/g, '').split(':')\r\n                let reg = new RegExp('({' + formulaArr.join(':').replace(/\\$/ig, '\\\\$') + '})', 'ig')\r\n                if (formulaArr[0] === tableId) {\r\n                  if (dataCodeRowMap[formulaArr[2]] && !(hasCalcrowCodeFormulaMap[formulaArr[1] + ':' + formulaArr[2]] || rowCodeFormulaMapCp[formulaArr[1] + ':' + formulaArr[2]])) {\r\n                    rowCodeFormulaMapCp[item] = formula.replace(reg, self.getDataCodeRowMapCumulativeResult(dataCodeRowMap[formulaArr[2]], formulaArr[1]))\r\n                  } else if (hasCalcrowCodeFormulaMap[formulaArr[1] + ':' + formulaArr[2]]) {\r\n                    rowCodeFormulaMapCp[item] = formula.replace(reg, hasCalcrowCodeFormulaMap[formulaArr[1] + ':' + formulaArr[2]])\r\n                  } else if (!rowCodeFormulaMapCp[formulaArr[1] + ':' + formulaArr[2]]) {\r\n                    rowCodeFormulaMapCp[item] = formula.replace(reg, 0)\r\n                  }\r\n                } else {\r\n                  rowCodeFormulaMapCp[item] = formula.replace(reg, 0)\r\n                }\r\n              }\r\n            } else {\r\n              let calcResult = evalCalcUtil.eval(formula)\r\n              hasCalcrowCodeFormulaMap[item] = calcResult === Infinity || calcResult === -Infinity || isNaN(calcResult) ? '' : util.accurateFixed(calcResult, 2)\r\n              delete rowCodeFormulaMapCp[item]\r\n            }\r\n          }\r\n        } else {\r\n          ifDoWhile = false\r\n        }\r\n        if (i === 1000000) {\r\n          console.log(rowCodeFormulaMap, hasCalcrowCodeFormulaMap)\r\n          console.error('请核查公式')\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(rowCodeFormulaMap, hasCalcrowCodeFormulaMap)\r\n      throw (e)\r\n    }\r\n    try {\r\n      let rowCodeFormumaMap = self.checkWhetherExcuteColCalculate(this.deepCopy(hasCalcrowCodeFormulaMap))\r\n      for (let itemCode in rowCodeFormumaMap) {\r\n        let row = dataCodeRowMap[itemCode]\r\n        if (row) {\r\n          row = Object.assign(row, rowCodeFormumaMap[itemCode].curRowCodeFormulaMap)\r\n          self.reductionColFormula(rowCodeFormumaMap[itemCode].rowCodeFormulaFieldMap, row)\r\n        }\r\n      }\r\n    } catch (e) {\r\n      throw (e)\r\n    }\r\n\r\n    // Object.keys(hasCalcrowCodeFormulaMap).forEach((item, index) => {\r\n    //   let rowCellArr = item.split(':')\r\n    //   if (dataCodeRowMap[rowCellArr[1]]) {\r\n    //     dataCodeRowMap[rowCellArr[1]].forEach((row, rowIndex) => {\r\n    //       row[rowCellArr[0]] = hasCalcrowCodeFormulaMap[item] === '0.00' ? '' : hasCalcrowCodeFormulaMap[item]\r\n    //       row = self.reductionColFormula(, row)\r\n    //     })\r\n    //   }\r\n    // })\r\n    // this.reverCalcRowCodeFormula(rowCodeFormulaMap, data, tableId)\r\n    return data\r\n  },\r\n  checkWhetherExcuteColCalculate(hasCalcrowCodeFormulaMap) {\r\n    // 记录当前数据单元格交叉公式计算字段\r\n    let self = this\r\n    let rowCodeFormumaMap = {}\r\n    Object.keys(hasCalcrowCodeFormulaMap).forEach((item, index) => {\r\n      rowCodeFormumaMap[item.split(':')[0]] = {}\r\n    })\r\n    Object.keys(rowCodeFormumaMap).forEach((itemCode, itemCodeIndex) => {\r\n      let rowCodeFormulaFieldMap = Object.assign({}, self.calculateConstraintConfigIn.colFormulaConfig) // 单元格交叉计算\r\n      let curRowCodeFormulaMap = {}\r\n      Object.keys(hasCalcrowCodeFormulaMap).forEach((item, index) => {\r\n        let rowCellArr = item.split(':')\r\n        if (rowCellArr[0] === itemCode) {\r\n          curRowCodeFormulaMap[rowCellArr[1]] = hasCalcrowCodeFormulaMap[item] === '0.00' ? '' : hasCalcrowCodeFormulaMap[item]\r\n          delete rowCodeFormulaFieldMap[rowCellArr[0]]\r\n        }\r\n      })\r\n      rowCodeFormumaMap[itemCode] = {\r\n        rowCodeFormulaFieldMap: Object.assign({}, self.calculateConstraintConfigIn.colFormulaConfig, rowCodeFormulaFieldMap),\r\n        curRowCodeFormulaMap: curRowCodeFormulaMap\r\n      }\r\n    })\r\n    return rowCodeFormumaMap\r\n  },\r\n  riverColumnsGenerateCalcColFormulaMap(columns, obj) {\r\n    // 递归生成列计算全量映射\r\n    let self = this\r\n    obj = obj || {\r\n      tableColumnsFieldMap: {},\r\n      tableColumnsFieldArr: [],\r\n      tableColumnsSingArr: [],\r\n      tableColumnsTitleFieldMap: {},\r\n      colFormulaConfig: {},\r\n      tableColumnsSingEditFieldArr: [],\r\n      gradedSummaryFields: []\r\n    }\r\n    columns.forEach((conlum, index) => {\r\n      if (Array.isArray(conlum.children) && conlum.children.length) {\r\n        self.riverColumnsGenerateCalcColFormulaMap(conlum.children, obj)\r\n      } else {\r\n        if (conlum.field) {\r\n          obj.tableColumnsFieldMap[conlum.field] = conlum\r\n          obj.tableColumnsFieldArr.push(conlum.field)\r\n          obj.tableColumnsSingArr.push(conlum)\r\n          obj.tableColumnsTitleFieldMap[conlum.title] = conlum.field\r\n          if (conlum.formula) {\r\n            obj.colFormulaConfig[conlum.field] = conlum.formula\r\n          }\r\n          if (conlum.editRender) {\r\n            obj.tableColumnsSingEditFieldArr.push(conlum.field)\r\n          }\r\n          if ((conlum.combinedType && conlum.combinedType.indexOf('needGradedSummary') >= 0) || conlum.needResponsive || conlum.gradedSummary) {\r\n            obj.gradedSummaryFields.push(conlum.field)\r\n          }\r\n        }\r\n      }\r\n    })\r\n    return obj\r\n  },\r\n  generateCalcColFormulaMap(columns) {\r\n    // 生成列计算公式映射\r\n    let self = this\r\n    let obj = this.riverColumnsGenerateCalcColFormulaMap(columns)\r\n    self.tableColumnsFieldMap = obj.tableColumnsFieldMap\r\n    self.tableColumnsFieldArr = obj.tableColumnsFieldArr\r\n    self.tableColumnsSingArr = obj.tableColumnsSingArr\r\n    self.gradedSummaryFields = (Array.isArray(obj.gradedSummaryFields) && obj.gradedSummaryFields.length) ? obj.gradedSummaryFields : null\r\n    self.tableColumnsTitleFieldMap = obj.tableColumnsTitleFieldMap\r\n    self.tableColumnsSingEditFieldArr = obj.tableColumnsSingEditFieldArr\r\n    this.calculateConstraintConfigIn = Object.assign({}, this.calculateConstraintConfigIn, {\r\n      colFormulaConfig: obj.colFormulaConfig\r\n    })\r\n  },\r\n  getFormColCalBack(formulaConditions) {\r\n    // 根据单元格位置查询计算的公式\r\n    // let self = this\r\n    let formColCalList = {}\r\n    let rowFormula = this.calculateConstraintConfigIn.rowFormula\r\n    if (rowFormula) {\r\n      Object.keys(rowFormula).forEach((v, index) => {\r\n        if (v === formulaConditions) {\r\n          rowFormula[v].forEach(j => {\r\n            formColCalList = Object.assign(formColCalList, j)\r\n          })\r\n        }\r\n      })\r\n      return formColCalList\r\n    } else {\r\n      return ''\r\n    }\r\n  },\r\n  performTableDataCalculate(obj) { // 行改变事件执行单元格计算并刷新视图\r\n    // 执行顺序： 取数-->行内计算-->分级汇总-->父级行内计算-->单元格交叉计算(涉及的行计算)-->行约束-->单元格约束\r\n    return this.rePerformRowCalcAndConstraintSingleAndRerender(obj)\r\n  },\r\n  generateColumnsAllMap(columns, obj) {\r\n    // 生成导入view映射数据\r\n    let self = this\r\n    obj = obj || {\r\n      tableColumnsFieldMap: {},\r\n      tableColumnsTitleFieldMap: {},\r\n      viewToSourceMap: {},\r\n      colFormulaConfig: {},\r\n      rowsObjTemp: {},\r\n      tableColumnsTitleMap: {}\r\n    }\r\n    columns.forEach((conlum, index) => {\r\n      if (Array.isArray(conlum.children) && conlum.children.length) {\r\n        self.riverColumnsGenerateCalcColFormulaMap(conlum.children, obj)\r\n      } else {\r\n        if (conlum.formula) {\r\n          obj.colFormulaConfig[conlum.field] = conlum.formula\r\n          obj.tableColumnsTitleMap[conlum.title] = conlum\r\n        }\r\n        if (conlum.field) {\r\n          obj.rowsObjTemp[conlum.field] = ''\r\n          let map = {\r\n            needMap: true,\r\n            options: [],\r\n            multiple: false,\r\n            formula: conlum.formula\r\n          }\r\n          obj.tableColumnsFieldMap[conlum.field] = conlum\r\n          obj.tableColumnsTitleFieldMap[conlum.title] = conlum.field\r\n          let itemRender = conlum.cellRender || conlum.editRender || conlum.contentRender\r\n          if (itemRender) {\r\n            switch (itemRender.name) {\r\n              case '$vxeSelect':\r\n                if (itemRender.props && itemRender.props.multiple) {\r\n                  map = Object.assign({}, map, {\r\n                    needMap: true,\r\n                    name: itemRender.name,\r\n                    options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                    multiple: true\r\n                  })\r\n                } else {\r\n                  map = Object.assign({}, map, {\r\n                    needMap: true,\r\n                    name: itemRender.name,\r\n                    options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                    multiple: false\r\n                  })\r\n                }\r\n                break\r\n              case '$vxeRadio':\r\n                map = Object.assign({}, map, {\r\n                  needMap: true,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: false\r\n                })\r\n                break\r\n              case '$vxeCheckbox':\r\n                map = Object.assign({}, map, {\r\n                  needMap: true,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: true\r\n                })\r\n                break\r\n              case '$vxeSwitch':\r\n                map = Object.assign({}, map, {\r\n                  needMap: true,\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: false\r\n                })\r\n                break\r\n              default:\r\n                map = Object.assign({}, map, {\r\n                  needMap: false,\r\n                  // pattern: ((itemRenderName, itemRenderType) => {\r\n                  //   switch (itemRenderName) {\r\n                  //     case '$vxeInput':\r\n                  //       // text, search, number, integer, float, password, date, time, datetime, week, month, year\r\n                  //       switch (itemRenderType) {\r\n                  //         case 'string':\r\n                  //           return (str) => {\r\n                  //             // 空\r\n                  //             str = str && str.toString()\r\n                  //             return !(str && str.trim() !== '')\r\n                  //           }\r\n                  //         case 'number':\r\n                  //           // 数字\r\n                  //           return (str) => {\r\n                  //             return /^[0-9]*$/.test(str)\r\n                  //           }\r\n                  //         case 'integer':\r\n                  //           // 数字\r\n                  //           return (str) => {\r\n                  //             return /^[1-9]+[0-9]*$/.test(str)\r\n                  //           }\r\n                  //         case 'time':\r\n                  //           // 时间\r\n                  //           return (str) => {\r\n                  //             return /^\\d*(?:\\.\\d{0,2})?$/.test(str)\r\n                  //           }\r\n                  //         case 'year':\r\n                  //           // 年\r\n                  //           return (str) => {\r\n                  //             return /^[1,9]{4}/.test(str)\r\n                  //           }\r\n                  //         case 'float':\r\n                  //           // 2位小叔\r\n                  //           return (str) => {\r\n                  //             return /^-?\\d+\\.?\\d{0,2}$/.test(str)\r\n                  //           }\r\n                  //       }\r\n                  //       break\r\n                  //     case '$vxeMoney':\r\n                  //       return (str) => {\r\n                  //         return /^-?\\d+\\.?\\d{0,2}$/.test(str)\r\n                  //       }\r\n                  //     case '$vxeCalculate':\r\n                  //       return (str) => {\r\n                  //         return /^-?\\d+\\.?\\d{0,2}$/.test(str)\r\n                  //       }\r\n                  //     case '$vxeEditDownTextarea':\r\n                  //       return (str) => {\r\n                  //         str = str && str.toString()\r\n                  //         return !(str && str.trim() !== '')\r\n                  //       }\r\n                  //     case '$vxeDays': {\r\n                  //       return (str) => {\r\n                  //         return /^-?\\d+\\.?\\d{0,2}$/.test(str)\r\n                  //       }\r\n                  //     }\r\n                  //     case '$vxeTime': {\r\n                  //       return (str) => {\r\n                  //         return /^-?\\d+\\.?\\d{0,2}$/.test(str)\r\n                  //       }\r\n                  //     }\r\n                  //     case '$vxeText': {\r\n                  //       return (str) => {\r\n                  //         return /^-?\\d+\\.?\\d{0,2}$/.test(str)\r\n                  //       }\r\n                  //     }\r\n\r\n                  //     default:\r\n                  //       break\r\n                  //   }\r\n                  // })(itemRender.name, itemRender.props && itemRender.props.type),\r\n                  name: itemRender.name,\r\n                  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n                  multiple: false\r\n                })\r\n                break\r\n            }\r\n          } else {\r\n            map = Object.assign({}, map, {\r\n              needMap: false\r\n            })\r\n          }\r\n          obj.viewToSourceMap[conlum.field] = map\r\n        }\r\n      }\r\n    })\r\n    return obj\r\n  },\r\n  isEditForFormula(row, rowIndex, column, columnIndex) {\r\n    let isForFormulaData = column.property + ':' + row.itemcode\r\n    let isForFormula = true\r\n    let self = this\r\n    if (self.calculateConstraintConfigIn.rowCodeFormulaConfig[isForFormulaData] || self.calculateConstraintConfigIn.colFormulaConfig[column.property]) {\r\n      isForFormula = false\r\n    } else {\r\n      isForFormula = true\r\n    }\r\n    return isForFormula\r\n    // if (this.calculateConstraintConfigIn.constraintConfig === '') {\r\n    //   return true\r\n    // } else {\r\n    //   return false\r\n    // }\r\n  },\r\n  isActiveCellEdit({ row, rowIndex, column, columnIndex }) {\r\n    let isEditForFormula = this.isEditForFormula(row, rowIndex, column, columnIndex)\r\n    return isEditForFormula\r\n  }\r\n}\r\nconst calcAndConstraint = { // 计算约束部分\r\n  // 执行顺序： 取数--> 行内计算--> 分级汇总--> 父级行内计算--> 单元格交叉计算(涉及的行计算)--> 行约束--> 单元格约束\r\n  addMissingFields(tableData) {\r\n    // 添加缺失字段并执行全量列计算\r\n    let self = this\r\n    tableData = Array.isArray(tableData) ? tableData : []\r\n    tableData.forEach((row) => {\r\n      self.tableColumnsFieldArr.forEach((item) => {\r\n        row[item] = typeof row[item] !== 'object' ? (row[item] === undefined ? '' : row[item]) : (row[item] === null ? '' : row[item])\r\n      })\r\n      if (Array.isArray(row.children) && row.children.length && this.treeConfigIn) {\r\n        row.children = self.addMissingFields(row.children)\r\n      }\r\n    })\r\n    return tableData\r\n  },\r\n  // 取数\r\n  generatGetDataConfigMap(cellDataConfig) { // 生成取数和单元格计算\r\n    //  [{ itemcode: \"002\", itemname: \"一般公共预算\", cells: [{ itemcode: \"002\", colField: \"f001\", inputType: 1, formulaShow: \"提取\",formula:'tableId:colField:itemcode' }] }]\r\n    let rowCodeFormulaConfig = {}\r\n    let getDataConfig = {}\r\n    cellDataConfig.forEach((cell) => {\r\n      if (cell.formulaShow === '提取') {\r\n        getDataConfig[cell.itemCode + ':' + cell.colField] = cell.formula\r\n      } else if (cell.formulaShow === '计算') {\r\n        rowCodeFormulaConfig[cell.itemCode + ':' + cell.colField] = cell.formula\r\n      } else {\r\n      }\r\n    })\r\n    this.calculateConstraintConfigIn.rowCodeFormulaConfig = rowCodeFormulaConfig\r\n    this.calculateConstraintConfigIn.getDataConfig = getDataConfig\r\n  },\r\n  performGetData() { // 获取数据\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      let { getDataAxiosConfig, getDataParams, getDataConfig } = this.calculateConstraintConfigIn\r\n      let dataFieldArr = getDataAxiosConfig.dataField ? getDataAxiosConfig.dataField.split('.')[0] ? getDataAxiosConfig.dataField.split('.') : ['data'] : ['data']\r\n      if (!getDataAxiosConfig.url || getDataAxiosConfig.data) {\r\n        resolve(getDataConfig)\r\n      } else {\r\n        self.$http[getDataAxiosConfig.method](\r\n          getDataAxiosConfig.url,\r\n          Object.assign({ tableId: this.id }, getDataParams || {})\r\n        ).then((res) => {\r\n          let resData = {}\r\n          if (self.getbasicDataType(res) === 'Array') {\r\n            resData = res\r\n            self.$XModal.message({ status: 'success', message: '操作成功' })\r\n          } else if (self.getbasicDataType(res) === 'Object') {\r\n            if (\r\n              res[getDataAxiosConfig.statusField || 'rscode'] ===\r\n              (getDataAxiosConfig.successCode || '200')\r\n            ) {\r\n              dataFieldArr.forEach((item, index) => {\r\n                if (index === 0) {\r\n                  resData = res[item]\r\n                } else {\r\n                  resData = resData[item]\r\n                }\r\n              })\r\n              resolve(self.generatGetDataMap(resData))\r\n              self.$XModal.message({ status: 'success', message: '操作成功' })\r\n            } else {\r\n              console.log('获取取树数据异常，当前返回数据为：\\n', res)\r\n              self.$XModal.message({ status: 'error', message: '获取取树数据异常' })\r\n              reject(res)\r\n            }\r\n          } else {\r\n            console.log('获取取数数据异常，当前返回数据为：\\n', res)\r\n            self.$XModal.message({ status: 'error', message: '获取取树数据异常' })\r\n            reject(res)\r\n          }\r\n        }).catch(e => {\r\n          self.$XModal.message({ status: 'error', message: '获取取树数据异常' })\r\n          reject(e)\r\n        })\r\n      }\r\n    })\r\n  },\r\n  generatGetDataMap(res) { // 生成取数map\r\n    //  [{ itemCode: \"002\", colField: \"f005\", value: \"1500.0\" }, { itemCode: \"002001\", colField: \"f005\", value: \"500.0\" }]\r\n    let getDataRenderMap = {}\r\n    res.forEach((item, index) => {\r\n      getDataRenderMap[item.itemCode + ':' + item.colField] = item.value\r\n    })\r\n    this.calculateConstraintConfigIn.getDataRenderMap = getDataRenderMap\r\n    return getDataRenderMap\r\n  },\r\n  // 全量计算和生成约束数据\r\n  performGetDataOption(data) { // 执行取数 并 重新计算和执行约束并渲染表格\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.performGetData().then((getDataRenderMap) => {\r\n        self.calculateConstraintConfigIn.getDataRenderMap = getDataRenderMap\r\n        self.rePerformAllCalcAndConstraintByData(data || self.getTableData().fullData).then(({\r\n          dataCodeRowMap,\r\n          dataCodeRowArr,\r\n          afterCalcData }) => {\r\n          resolve(data)\r\n        }).catch(e => {\r\n          reject(e)\r\n        })\r\n      }).catch(e => {\r\n        reject(e)\r\n      })\r\n    })\r\n  },\r\n  rePerformRowCalcAndConstraintAllAndRerender(data) { // 执行行所设计的所有计算约束并重新渲染\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.rePerformAllCalcAndConstraintByData(data).then(({\r\n        dataCodeRowMap,\r\n        dataCodeRowArr,\r\n        afterCalcData }) => {\r\n        self.updateFooter().then(() => {\r\n        }).catch((e) => {\r\n          throw (e)\r\n        })\r\n      }).catch(e => {\r\n        throw (e)\r\n      })\r\n    })\r\n  },\r\n  rePerformAllCalcAndConstraintByData(data) { // 重新计算和生成约束数据\r\n    // 执行顺序： 取数--> 行内计算--> 分级汇总--> 父级行内计算--> 单元格交叉计算(涉及的行计算)--> 行约束--> 单元格约束\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        if (Array.isArray && data.length) {\r\n          let { enabledType, colFormulaConfig, calcAndConstraintTableId, dataType, calcAndConstraintItemCodeField, rowCodeFormulaConfig, colConstraintConfig, rowCodeConstraintConfig, getDataRenderMap, gradedSummaryFields, enabled } = self.calculateConstraintConfigIn\r\n          if (enabled) {\r\n            let isTreeData = dataType === undefined ? self.treeConfigIn : dataType === 'tree' ? 1 : 0\r\n            let tableId = calcAndConstraintTableId || self.id\r\n            let treeData = this.getDataCodeTreeData(data, calcAndConstraintItemCodeField, self.gradedSummaryFields || gradedSummaryFields, isTreeData)\r\n            let { dataCodeRowMap, dataCodeRowArr } = self.recursiveDataCodeRowMap(treeData, calcAndConstraintItemCodeField, true)\r\n            if (enabledType.performGetData) {\r\n              self.performGetDataAll({ data, dataCodeRowMap, dataCodeRowArr, getDataRenderMap, tableId: tableId }) // 渲染取数\r\n            }\r\n            if (enabledType.performColFormula) {\r\n              self.performColFormulaAll({ data, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields: self.gradedSummaryFields || gradedSummaryFields, colFormulaConfig, tableId: tableId, calcColType: 'lastLevel' }) // 行内计算\r\n            }\r\n            if (enabledType.gradedSummary) {\r\n              self.performGradedSummaryAll({ data: treeData, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields: self.gradedSummaryFields || gradedSummaryFields, tableId: tableId }) // 分级汇总\r\n            }\r\n            if (enabledType.performColFormula) {\r\n              self.performColFormulaAll({ data, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields: self.gradedSummaryFields || gradedSummaryFields, colFormulaConfig, tableId: tableId, calcColType: 'parent' }) // 父级行内计算\r\n            }\r\n            if (enabledType.performRowCodeFormula) {\r\n              self.performRowCodeFormula({ data, dataCodeRowMap, dataCodeRowArr, rowCodeFormulaConfig, tableId: tableId }) // 单元格交叉计算\r\n            }\r\n            if (enabledType.performColConstraint) {\r\n              self.performRowConstraintAll({ data, dataCodeRowMap, dataCodeRowArr, colConstraintConfig, tableId: tableId }) // 行内约束\r\n            }\r\n            if (enabledType.performCellConstraint) {\r\n              self.performCellConstraintAll({ data, dataCodeRowMap, dataCodeRowArr, rowCodeConstraintConfig, tableId: tableId }) // 单元格约束\r\n            }\r\n            if (enabledType.performColConstraint || enabledType.performCellConstraint) {\r\n              self.updatedDataAfterConstraint({ data, constrainRowDataMap: self.constrainRowDataMap, dataCodeRowMap, dataCodeRowArr })\r\n            }\r\n            resolve({\r\n              dataCodeRowMap,\r\n              dataCodeRowArr,\r\n              afterCalcData: data\r\n            })\r\n          } else {\r\n            resolve({\r\n              dataCodeRowMap: {},\r\n              dataCodeRowArr: data,\r\n              afterCalcData: data\r\n            })\r\n          }\r\n        } else {\r\n          resolve({\r\n            dataCodeRowMap: {},\r\n            dataCodeRowArr: [],\r\n            afterCalcData: []\r\n          })\r\n        }\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    })\r\n  },\r\n  rePerformRowCalcAndConstraintSingleAndRerender(obj) { // 执行行所涉及的所有计算约束并重新渲染\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      self.rePerformRowCalcAndConstraintSingle(obj).then(({ row, data, dataCodeRowMap, dataCodeRowArr }) => {\r\n        self.updateFooter().then(() => {\r\n          resolve(true)\r\n        }).catch((e) => {\r\n          resolve(false)\r\n        })\r\n      }).catch(e => {\r\n        resolve(false)\r\n      })\r\n    })\r\n  },\r\n\r\n  rePerformRowCalcAndConstraintSingle({ row, data, column }) { // 重新计算和生成单条约束数据\r\n    // 执行顺序： 取数-->行内计算-->分级汇总-->父级行内计算-->单元格交叉计算(涉及的行计算)-->行约束-->单元格约束\r\n    let self = this\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let { enabledType, colFormulaConfig, calcAndConstraintTableId, dataType, calcAndConstraintItemCodeField, colConstraintConfig, rowCodeConstraintConfig, rowCodeFormulaConfig, gradedSummaryFields, enabled } = self.calculateConstraintConfigIn\r\n        if (enabled) {\r\n          let isTreeData = dataType === undefined ? self.treeConfigIn : dataType === 'tree' ? 1 : 0\r\n          let tableId = calcAndConstraintTableId || self.id\r\n          let treeData = this.getDataCodeTreeData(data, calcAndConstraintItemCodeField, self.gradedSummaryFields || gradedSummaryFields, isTreeData)\r\n          let { dataCodeRowMap, dataCodeRowArr } = self.recursiveDataCodeRowMap(treeData, calcAndConstraintItemCodeField, true)\r\n          // self.performGetDataAll({ data, dataCodeRowMap, dataCodeRowArr, getDataRenderMap, tableId: tableId, row }) // 渲染取数\r\n          if (enabledType.performColFormula) {\r\n            self.performColFormulaSingle({ column, data, dataCodeRowMap, gradedSummaryFields: self.gradedSummaryFields || gradedSummaryFields, calcAndConstraintItemCodeField, dataCodeRowArr, colFormulaConfig, tableId: tableId, row, calcColType: 'lastLevel' }) // 行内计算\r\n          }\r\n          if (enabledType.gradedSummary) {\r\n            let gradedSummaryRow = dataCodeRowMap[row['item__pNestCode'].split('_')[0]]\r\n            if (gradedSummaryRow) {\r\n              self.performGradedSummarySingle({ column, data: treeData, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields: self.gradedSummaryFields || gradedSummaryFields, row: gradedSummaryRow, tableId: tableId }) // 分级汇总\r\n            }\r\n          }\r\n          if (enabledType.performColFormula) {\r\n            self.performColFormulaSingle({ data, dataCodeRowMap, column, dataCodeRowArr, calcAndConstraintItemCodeField, gradedSummaryFields: self.gradedSummaryFields || gradedSummaryFields, colFormulaConfig, row, tableId: tableId, calcColType: 'parent' }) // 父级行内计算\r\n          }\r\n          if (enabledType.performRowCodeFormula) {\r\n            self.performRowCodeFormula({ data, dataCodeRowMap, column, dataCodeRowArr, rowCodeFormulaConfig, tableId: tableId }) // 单元格交叉计算\r\n          }\r\n          if (enabledType.performColConstraint) {\r\n            self.performRowConstraintSingle({ data, row, column, dataCodeRowMap, dataCodeRowArr, colConstraintConfig, tableId: tableId }) // 行内约束\r\n          }\r\n          if (enabledType.performCellConstraint) {\r\n            self.performCellConstraintSingle({ data, row, column, dataCodeRowMap, dataCodeRowArr, rowCodeConstraintConfig, tableId: tableId }) // 单元格约束\r\n          }\r\n          if (enabledType.performColConstraint || enabledType.performCellConstraint) {\r\n            self.updatedDataAfterConstraint({ data, constrainRowDataMap: self.constrainRowDataMap, dataCodeRowMap, dataCodeRowArr })\r\n          }\r\n          resolve({ row, data, dataCodeRowMap, dataCodeRowArr })\r\n        } else {\r\n          resolve({ row, data, dataCodeRowMap: {}, dataCodeRowArr: data })\r\n        }\r\n      } catch (e) {\r\n        console.error(e)\r\n        reject(e)\r\n      }\r\n    })\r\n  },\r\n  getDataCodeTreeData(data, calcAndConstraintItemCodeField, gradedSummaryFields, isTreeData) { // 平行数据生成树形数据，以便下一步转换添加映射\r\n    if (isTreeData) {\r\n      return data\r\n    } else if (Array.isArray(gradedSummaryFields) && gradedSummaryFields.length && calcAndConstraintItemCodeField) {\r\n      return this.listToTreeByNestCodeLength(data, calcAndConstraintItemCodeField)\r\n    } else {\r\n      return data\r\n    }\r\n  },\r\n  recursiveDataCodeRowMap(data, codeKey, traverseTree, levelNo = 1, pCode = '', pNCode, obj = { dataCodeRowMap: {}, dataCodeRowArr: [] }) { // 递归生成数据code映射\r\n    let { extendMapInfoField } = this.calculateConstraintConfigIn\r\n    let self = this\r\n    data.forEach((row, index) => {\r\n      if (extendMapInfoField) {\r\n        row['item__level'] = levelNo\r\n        row['item__pcode'] = pCode\r\n        row['item__pNestCode'] = (pNCode ? pNCode + '_' + row[codeKey] : row[codeKey])\r\n      }\r\n      obj.dataCodeRowMap[row[codeKey]] = row\r\n      obj.dataCodeRowArr.push(row)\r\n      if (traverseTree) {\r\n        if (Array.isArray(row.children) && row.children.length) {\r\n          row['last__level'] = 0\r\n          self.recursiveDataCodeRowMap(row.children, codeKey, traverseTree, levelNo + 1, row[codeKey], row['item__pNestCode'], obj)\r\n        } else {\r\n          row['last__level'] = 1\r\n        }\r\n      } else {\r\n        row['last__level'] = 1\r\n      }\r\n    })\r\n    return obj\r\n  },\r\n  performGetDataAll({ data, dataCodeRowMap, getDataRenderMap, tableId }) { // 执行 取数\r\n    if (this.isEmptyObj(getDataRenderMap)) {\r\n      return data\r\n    }\r\n    Object.keys(getDataRenderMap).forEach((renderItemKey) => {\r\n      let renderItemKeyArr = renderItemKey.split(':')\r\n      if (dataCodeRowMap[renderItemKeyArr[0]]) {\r\n        dataCodeRowMap[renderItemKeyArr[0]][renderItemKeyArr[1]] = getDataRenderMap[renderItemKey] || ''\r\n      }\r\n    })\r\n  },\r\n  performGetDataSingle({ data, dataCodeRowMap, calcAndConstraintItemCodeField, getDataRenderMap, tableId, row }) { // 执行 单条数据 取数\r\n    if (this.isEmptyObj(getDataRenderMap)) {\r\n      return data\r\n    }\r\n    Object.keys(getDataRenderMap).forEach((renderItemKey) => {\r\n      let renderItemKeyArr = renderItemKey.split(':')\r\n      if (renderItemKeyArr[0] === row[calcAndConstraintItemCodeField]) {\r\n        row[renderItemKeyArr[0]][renderItemKeyArr[1]] = getDataRenderMap[renderItemKey]\r\n      }\r\n    })\r\n    return data\r\n  },\r\n  performColFormulaAll({ data, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields, colFormulaConfig, tableId, calcColType }) { // 执行 行计算\r\n    // calcColType  执行  lastLevel:最底级，parent:父级 all:全部\r\n    if (this.isEmptyObj(colFormulaConfig)) {\r\n      return data\r\n    }\r\n    let self = this\r\n    dataCodeRowArr.forEach((row) => {\r\n      self.performColFormulaSingle({ data, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields, colFormulaConfig, tableId, calcColType, row })\r\n    })\r\n    return data\r\n  },\r\n  performColFormulaSingle({ data, dataCodeRowMap, dataCodeRowArr, gradedSummaryFields, colFormulaConfig, tableId, calcColType, row }) { // 执行 单条 行计算\r\n    // calcColType  执行  lastLevel:最底级，parent:父级 all:全部\r\n    if (this.isEmptyObj(colFormulaConfig)) {\r\n      return row\r\n    }\r\n    let self = this\r\n    switch (calcColType) {\r\n      case 'all': // 全部计算\r\n        self.reductionColFormula(colFormulaConfig, row)\r\n        break\r\n      case 'parent': // 仅计算父级\r\n        if (row['last__level'] === 1) {\r\n          self.reductionColFormula(colFormulaConfig, row)\r\n        } else if ((Array.isArray(row.children) && row.children.length) || (row['last__level'] !== 0)) {\r\n          self.reductionColFormula(self.getParentColFormulaConfig(self.deepCopy(colFormulaConfig), gradedSummaryFields), row)\r\n        } else {\r\n          self.reductionColFormula(colFormulaConfig, row)\r\n        }\r\n        break\r\n      case 'lastLevel': // 仅计算最低级\r\n        if (!(Array.isArray(row.children) && row.children.length) || (row['last__level'] !== 0)) {\r\n          self.reductionColFormula(colFormulaConfig, row)\r\n        }\r\n        break\r\n    }\r\n    return row\r\n  },\r\n  getParentColFormulaConfig(colFormulaConfig, gradedSummaryFields) { // 分级汇总后如果父级既有分级汇总 也有 计算 以分级汇总为主\r\n    gradedSummaryFields.forEach((item) => {\r\n      delete colFormulaConfig[item]\r\n    })\r\n    return colFormulaConfig\r\n  },\r\n  performGradedSummaryAll({ data, dataCodeRowMap, gradedSummaryFields, tableId }) { // 执行 数组分级汇总计算\r\n    if (!(Array.isArray(gradedSummaryFields) && gradedSummaryFields.length)) {\r\n      return data\r\n    }\r\n    let self = this\r\n    data.forEach((row) => {\r\n      self.performGradedSummarySingle({ row, gradedSummaryFields })\r\n    })\r\n    return data\r\n  },\r\n  performGradedSummarySingle({ row, data, gradedSummaryFields }) { // 执行 单条数据分级汇总计算\r\n    if (!(Array.isArray(gradedSummaryFields) && gradedSummaryFields.length)) {\r\n      return row\r\n    }\r\n    let self = this\r\n    if (Array.isArray(row.children) && row.children.length) {\r\n      gradedSummaryFields.forEach((key) => {\r\n        row[key] = row.children.reduce((preResult, next) => {\r\n          let curItemGradedSummaryValue = 0\r\n          if (Array.isArray(next.children) && next.children.length) {\r\n            curItemGradedSummaryValue = parseFloat(self.performGradedSummarySingle({ row: next, gradedSummaryFields })[key])\r\n          } else {\r\n            curItemGradedSummaryValue = parseFloat(next[key])\r\n          }\r\n          return preResult + (isNaN(curItemGradedSummaryValue) ? 0 : curItemGradedSummaryValue)\r\n        }, 0)\r\n      })\r\n    }\r\n    return row\r\n  },\r\n  performRowCodeFormula({ data, dataCodeRowMap, rowCodeFormulaConfig, tableId }) { // 执行 单元格交叉计算\r\n    this.reductionRowCodeFormula(rowCodeFormulaConfig, data, tableId)\r\n  },\r\n  performRowConstraintAll({ data, dataCodeRowMap, dataCodeRowArr, colConstraintConfig, tableId }) { // 执行 行内约束\r\n    this.genarateRowConstraintMapAll({ data, dataCodeRowMap, dataCodeRowArr, colConstraintConfig, tableId })\r\n  },\r\n  performCellConstraintAll({ data, dataCodeRowMap, rowCodeConstraintConfig, dataCodeRowArr, tableId }) { // 执行 单元格约束\r\n    this.genarateCellConstraintMapAll({ data, dataCodeRowMap, rowCodeConstraintConfig, dataCodeRowArr, tableId })\r\n  },\r\n  performRowConstraintSingle({ data, dataCodeRowMap, colConstraintConfig, dataCodeRowArr, tableId, row }) { // 执行 单条数据的行内约束\r\n    this.genarateRowConstraintMapSingle({ data, dataCodeRowMap, colConstraintConfig, tableId, row })\r\n  },\r\n  performCellConstraintSingle({ rowCodeConstraintConfig, data, dataCodeRowMap, tableId, row, column }) { // 执行 单条数据的行内约束\r\n    let { calcAndConstraintItemCodeField } = this.calculateConstraintConfigIn\r\n    let curCellConstraint = rowCodeConstraintConfig[row[calcAndConstraintItemCodeField] + ':' + (column.property || column.field)]\r\n    if (curCellConstraint) {\r\n      this.genarateCellConstraintMapSingle(dataCodeRowMap, curCellConstraint, tableId)\r\n    }\r\n  }\r\n}\r\nconst constraintTool = {\r\n  // 约束部分 行内约束\r\n  // 底级取数-->行计算-->分级汇总-->父级行计算-->单元格交叉计算-->约束\r\n  genarateRowConstraintMapAll({ colConstraintConfig, tableData, dataCodeRowMap, dataCodeRowArr, tableId }) {\r\n    // 生成约束map\r\n    let self = this\r\n    this.each(dataCodeRowArr, (rowIndex, row) => {\r\n      self.genarateRowConstraintMapSingle({ colConstraintConfig, row, tableId })\r\n    })\r\n  },\r\n  genarateRowConstraintMapSingle({ colConstraintConfig, row, tableId }) { // 生成单条数据约束map\r\n    let self = this\r\n    let { calcAndConstraintItemCodeField } = this.calculateConstraintConfigIn\r\n    self.constrainRowDataMap[row[calcAndConstraintItemCodeField]] = self.constrainRowDataMap[row[calcAndConstraintItemCodeField]] || {}\r\n    let dataMap = self.constrainRowDataMap[row[calcAndConstraintItemCodeField]]\r\n    this.each(colConstraintConfig, (key, item) => {\r\n      self.parsingRowConstraintConfigToMapData(colConstraintConfig[key], row, dataMap, tableId, colConstraintConfig)\r\n    })\r\n  },\r\n  parsingRowConstraintConfigToMapData(expression, row, dataMap, tableId, colConstraintConfig) { // 生成单条数据约束map\r\n    let self = this\r\n    expression.split('--&&--').forEach((item, index) => {\r\n      let rowConstraintArr = item.split('::')\r\n      dataMap[rowConstraintArr[0]] = dataMap[rowConstraintArr[0]] || {}\r\n      dataMap[rowConstraintArr[0]][rowConstraintArr[1]] = self.parsingRowConstraintConfigToValueData(rowConstraintArr[2], rowConstraintArr[1], row)\r\n      if (rowConstraintArr[1] === 'value' || rowConstraintArr[1] === 'clear') { // 如果a的值改变导致c的值改变，c的值改变又会改变其他，则递归调用\r\n        if (colConstraintConfig[rowConstraintArr[0]]) {\r\n          self.parsingRowConstraintConfigToValueData(colConstraintConfig[rowConstraintArr[0]], row, dataMap, tableId, colConstraintConfig)\r\n        }\r\n      }\r\n    })\r\n  },\r\n  parsingRowConstraintConfigToValueData(expression, type, row, tableId) {\r\n    // 生成当条age:1001:1001\r\n    // type: visible editble clear style value getData\r\n    let value = null\r\n    switch (type) {\r\n      case 'visible':\r\n        value = !!this.evalEpression(this.replaceRowEpressionValue(expression, row, tableId))\r\n        break\r\n      case 'editable':\r\n        value = !!this.evalEpression(this.replaceRowEpressionValue(expression, row, tableId))\r\n        break\r\n      case 'clear':\r\n        value = !!this.evalEpression(this.replaceRowEpressionValue(expression, row, tableId))\r\n        break\r\n      case 'value':\r\n        value = this.evalEpression(this.replaceRowEpressionValue(expression, row, tableId))\r\n        break\r\n      case 'style':\r\n        value = this.transExpressionToObject(this.pasingExpression(this.replaceRowEpressionValue(expression, row, tableId)), row)\r\n        break\r\n      case 'getData':\r\n        value = {}\r\n        break\r\n    }\r\n    return value\r\n  },\r\n  replaceRowEpressionValue(expression, row, tableId) {\r\n    let regR = new RegExp('({[a-zA-Z0-9_]*})', 'ig')\r\n    let rowsKey = expression.match(regR) || []\r\n    rowsKey = Array.from(new Set(rowsKey))\r\n    if (rowsKey.length) {\r\n      for (let keyC in rowsKey) {\r\n        let reg = new RegExp('(' + rowsKey[keyC].replace(/\\$/ig, '\\\\$') + ')', 'ig')\r\n        let keyF = rowsKey[keyC].replace(/\\{|\\}/g, '')\r\n        expression = expression.replace(reg, row[keyF] || 0)\r\n      }\r\n    }\r\n    return expression\r\n  },\r\n  evalEpression(expression) {\r\n    // 执行表达式\r\n    // eslint-disable-next-line no-new-func\r\n    return new Function('return ' + expression)()\r\n  },\r\n  pasingExpression(expression) {\r\n    let str = ''\r\n    try {\r\n      this.each(expression.split('--+--'), (index, item) => {\r\n        if (index === 0) {\r\n          str += 'if(' + item.split('--??--')[0] + '){return \"' + item.split('--??--')[1] + '\"}'\r\n        } else {\r\n          str += 'else if(' + item.split('--??--')[0] + '){return \"' + item.split('--??--')[1] + '\"}'\r\n        }\r\n      })\r\n      str += 'else{return \"\"}'\r\n      return new Function(str)()\r\n    } catch (e) {\r\n      console.error(e)\r\n      return ''\r\n    }\r\n  },\r\n  performRowConstraintAndRerender(row) {\r\n    // 执行当前行约束并重新渲染\r\n    let calcAndConstraintItemCodeField = this.calculateConstraintConfigIn.calcAndConstraintItemCodeField\r\n    if (this.calculateConstraintConfigIn.constraintConfig.row) {\r\n      this.constrainRowDataMap[row[calcAndConstraintItemCodeField]] = self.constrainRowDataMap[row[calcAndConstraintItemCodeField]] || {}\r\n      this.constrainRowDataMap[row[calcAndConstraintItemCodeField]] = self.genarateRowConstraintMap(self.deepCopy(this.calculateConstraintConfigIn.constraintConfig.row), row, self.constrainRowDataMap[row[calcAndConstraintItemCodeField]])\r\n      this.$refs.xGrid.refreshColumn()\r\n    }\r\n  },\r\n  transExpressionToObject(value) {\r\n    // 获取全部参数,并转换成json对象\r\n    try {\r\n      let valueArr = value.split('&')\r\n      let len = valueArr.length\r\n      let result = {}\r\n      for (let i = 0; i < len; i++) {\r\n        let pos = valueArr[i].indexOf('=')\r\n        if (pos === -1) {\r\n          continue\r\n        }\r\n        let name = valueArr[i].substring(0, pos)\r\n        result[name] = valueArr[i].substring(pos + 1).match(new RegExp('({[a-zA-Z0-9_:\\$]*})', 'ig')) ? this.evalEpression(valueArr[i].substring(pos + 1)) : valueArr[i].substring(pos + 1)\r\n      }\r\n      return result\r\n    } catch (e) {\r\n      console.error(e)\r\n      return {}\r\n    }\r\n  },\r\n  performConstraintAndRerender() {\r\n    // 执行约束并重新渲染\r\n    this.constrainRowDataMap = {}\r\n    this.genarateConstraintMap(this.calculateConstraintConfigIn.constraintConfig, this.getTableData().fullData)\r\n    this.$refs.xGrid.refreshColumn()\r\n  },\r\n  // 约束部分 单元格间约束\r\n  genarateCellConstraintMapAll({ rowCodeConstraintConfig, data, dataCodeRowMap, tableId }) {\r\n    let self = this\r\n    self.each(rowCodeConstraintConfig, (itemkey, item) => {\r\n      self.genarateCellConstraintMapSingle(dataCodeRowMap, item, tableId, rowCodeConstraintConfig)\r\n    })\r\n  },\r\n  genarateCellConstraintMapSingle(dataCodeRowMap, item, tableId, rowCodeConstraintConfig) {\r\n    let self = this\r\n    try {\r\n      let { constrainRowDataMap } = this\r\n      item.split('--&&--').forEach((item, index) => {\r\n        let rowConstraintArr = item.split('::')\r\n        let itemCodeFieldArr = rowConstraintArr[0].split(':')\r\n        constrainRowDataMap[itemCodeFieldArr[0]] = constrainRowDataMap[itemCodeFieldArr[0]] || {}\r\n        constrainRowDataMap[itemCodeFieldArr[0]][itemCodeFieldArr[1]] = constrainRowDataMap[itemCodeFieldArr[0]][itemCodeFieldArr[1]] || {}\r\n        constrainRowDataMap[itemCodeFieldArr[0]][itemCodeFieldArr[1]][rowConstraintArr[1]] = self.parsingCellConstraintConfigToValueData(rowConstraintArr[2], rowConstraintArr[1], dataCodeRowMap, tableId)\r\n        if (rowConstraintArr[1] === 'value' || rowConstraintArr[1] === 'clear') { // 如果a的值改变导致c的值改变，c的值改变又会改变其他，则递归调用\r\n          if (rowCodeConstraintConfig[itemCodeFieldArr[0] + ':' + itemCodeFieldArr[1]]) {\r\n            self.genarateCellConstraintMapSingle(dataCodeRowMap, rowCodeConstraintConfig[itemCodeFieldArr[0] + ':' + itemCodeFieldArr[1]], tableId, rowCodeConstraintConfig)\r\n          }\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  },\r\n  parsingCellConstraintConfigToValueData(expression, type, dataCodeRowMap, tableId) {\r\n    // 生成当条age:1001:1001\r\n    // type: visible editble clear style value getData\r\n    let value = null\r\n    switch (type) {\r\n      case 'visible':\r\n        value = !!this.evalEpression(this.replaceCellEpressionValue(expression, dataCodeRowMap, tableId))\r\n        break\r\n      case 'editable':\r\n        value = !!this.evalEpression(this.replaceCellEpressionValue(expression, dataCodeRowMap, tableId))\r\n        break\r\n      case 'clear':\r\n        value = !!this.evalEpression(this.replaceCellEpressionValue(expression, dataCodeRowMap, tableId))\r\n        break\r\n      case 'value':\r\n        value = this.evalEpression(this.replaceCellEpressionValue(expression, dataCodeRowMap, tableId))\r\n        break\r\n      case 'style':\r\n        value = this.transExpressionToObject(this.pasingExpression(this.replaceCellEpressionValue(expression, dataCodeRowMap, tableId)), dataCodeRowMap)\r\n        break\r\n      case 'getData':\r\n        value = {}\r\n        break\r\n    }\r\n    return value\r\n  },\r\n  replaceCellEpressionValue(expression, dataCodeRowMap, tableId) {\r\n    try {\r\n      let self = this\r\n      let regR = new RegExp('({[a-zA-Z0-9_:\\$]*})', 'ig')\r\n      let rowsKey = expression.match(regR) || []\r\n      rowsKey = Array.from(new Set(rowsKey))\r\n      if (rowsKey.length) {\r\n        for (let keyCF in rowsKey) {\r\n          let formulaArr = rowsKey[keyCF].replace(/\\{|\\}/g, '').split(':')\r\n          let reg = new RegExp('({' + formulaArr.join(':').replace(/\\$/ig, '\\\\$') + '})', 'ig')\r\n          if (formulaArr[0] === tableId) {\r\n            if (dataCodeRowMap[formulaArr[2]]) {\r\n              expression = expression.replace(reg, self.getDataCodeRowMapCumulativeResult(dataCodeRowMap[formulaArr[2]], formulaArr[1]))\r\n            } else {\r\n              expression = expression.replace(reg, 0)\r\n            }\r\n          } else {\r\n            expression = expression.replace(reg, 0)\r\n          }\r\n        }\r\n      }\r\n      return expression\r\n    } catch (e) {\r\n      console.error(e)\r\n      return ''\r\n    }\r\n  },\r\n  updatedDataAfterConstraint({ data, constrainRowDataMap, dataCodeRowMap, dataCodeRowArr }) { // 更新表格数据\r\n    let self = this\r\n    let calcAndConstraintItemCodeField = this.calculateConstraintConfigIn.calcAndConstraintItemCodeField\r\n    self.each(dataCodeRowArr, (rowIndex, row) => {\r\n      let curRowConstrainRowDataMap = constrainRowDataMap[row[calcAndConstraintItemCodeField]]\r\n      self.each(curRowConstrainRowDataMap, (itemkey, item) => {\r\n        if (item.value !== undefined) {\r\n          row[itemkey] = item.value\r\n        } else if (item.clear) {\r\n          row[itemkey] = ''\r\n        } else {\r\n\r\n        }\r\n      })\r\n    })\r\n    return data\r\n  }\r\n}\r\nconst otherFn = {\r\n  getListData() {\r\n    // 获取表单数据\r\n    const { fullData } = this.$refs.xGrid.getTableData()\r\n    const data = fullData || []\r\n    return this.dealData(data)\r\n  },\r\n  dealData(data) {\r\n    let newData = []\r\n    data.forEach((item) => {\r\n      const itemVal = Object.assign({}, item)\r\n      Object.keys(itemVal).map((val) => {\r\n        let value = String(itemVal[val]) || ''\r\n        if (value.includes('initId')) {\r\n          const prefix = val.substr(0, val.indexOf('id'))\r\n          itemVal[val] = ''\r\n          itemVal[prefix + 'code'] = ''\r\n          itemVal[prefix + 'name'] = ''\r\n        }\r\n      })\r\n      newData.push(itemVal)\r\n    })\r\n    return newData\r\n  },\r\n  regTreePrefix(item) {\r\n    const reg = /\\w*_$/g\r\n    return reg.test(item)\r\n  },\r\n  // 遍历正则对象，给树统一自动添加正则\r\n  addTreeReg(formValidationConfig) {\r\n    const reg = /^(?!initId)/g\r\n    Object.keys(formValidationConfig).forEach((item) => {\r\n      if (this.regTreePrefix(item)) {\r\n        formValidationConfig[item][0].pattern = reg\r\n      }\r\n    })\r\n\r\n    return formValidationConfig\r\n  },\r\n  // 遍历，动态给树组件添加双向绑定的前缀\r\n  addTreePrefixKey2(treeData) {\r\n    const reg = /_id$/\r\n    let treeArr = treeData || []\r\n    treeArr.forEach((row) => {\r\n      Object.keys(row).forEach((item) => {\r\n        // 以_id结尾，并且其前缀在数据包中不存在时，动态给其绑定一个前缀\r\n        if (reg.test(item)) {\r\n          const prefix = item.substr(0, item.indexOf('id'))\r\n          if (!row.hasOwnProperty(prefix)) {\r\n            this.$set(row, prefix, '')\r\n          }\r\n        }\r\n      })\r\n    })\r\n    return treeData\r\n  },\r\n  // 递归总计带children的合计总和\r\n  loopAddSubTotal(total = 0, itemData = {}, property) {\r\n    if (itemData.children && itemData.children.length) {\r\n      itemData.children.forEach(it => {\r\n        total = otherFn.loopAddSubTotal(total, it, property)\r\n      })\r\n    }\r\n    let itVal = ((typeof (itemData[property]) === 'number' || typeof (itemData[property]) === 'string') && itemData[property] !== '') ? parseFloat(itemData[property].toString().split(',').join('')) : 0\r\n    total += Number(itVal)\r\n    return total\r\n  }\r\n}\r\nconst batchModify = { // 批量修改\r\n  onBatchModifyItemChange(obj, modifyForm) {\r\n    this.$emit('onBatchModifyItemChange', obj, modifyForm)\r\n  },\r\n  omBatchModifySureClick({ modifyItem, formData }) {\r\n    // 批量修改确认\r\n    const selection = this.selection\r\n    selection.forEach((row, index) => {\r\n      row = Object.assign(row, formData)\r\n    })\r\n    self.reCalcAndReLoadTableData({ data: this.getTableData().fullData, modifyItem, modifyData: formData }).then((obj) => {\r\n      self.$emit('onBatchModifySuccess', obj, self, self.$refs.xGrid)\r\n    })\r\n  }\r\n}\r\nconst exportAndImportFn = {\r\n  /**\r\n   * 导出数据行相关数据字段计算\r\n   * @description 金额列根据单位计算；进度百分比列添加'%'\r\n   * @params row {Object} 当前行数据\r\n   * @params moneyKeys {Array} 金额列field数组\r\n   * @params ratioKeys {Array} 进度列field数组\r\n   * */\r\n  computedExportRow(row, moneyKeys, ratioKeys) {\r\n    // 金额列根据单位进行计算\r\n    moneyKeys.forEach(key => {\r\n      row[key] = (row[key] && this.moneyUnit) ? (row[key] / this.moneyUnit) : ''\r\n    })\r\n    // 进度列增加%\r\n    // ratioKeys.forEach(key => {\r\n    //   row[key] = row[key] ? Number.prototype.toFixed.call(row[key], 1) : ''\r\n    // })\r\n  },\r\n  getPrintOption(exportModalFormData) {\r\n    const checkColumns = []\r\n    this.$XEUtils.eachTree(exportModalFormData.columns, column => {\r\n      const isColGroup = column.children && column.children.length\r\n      if (!isColGroup) {\r\n        checkColumns.push(column)\r\n      }\r\n    })\r\n    return {\r\n      data: exportModalFormData[exportModalFormData.dataType],\r\n      isHeader: true,\r\n      columns: checkColumns\r\n    }\r\n  },\r\n  onPrintClick(obj) {\r\n    this.$refs.xGrid.$refs.xTable.print(Object.assign({}, this.getPrintOption(obj)))\r\n    // this.$VXETable.print()\r\n  },\r\n  triggerExportOption(obj) {\r\n    // 触发导出动作\r\n    let self = this\r\n    const columns = this.deepCopy(this.tableColumnsConfig)\r\n    const { tableData, fullData, treeExpandData, selection } = this.getTableData()\r\n\r\n    // 获取金额、进度特殊字段列表\r\n    const [moneyKeys, ratioKeys] = [[], []]\r\n    this.$XEUtils.eachTree(columns, item => {\r\n      if (item?.type === 'money' || item.cellRender?.name === '$vxeMoney') {\r\n        moneyKeys.push(item.field)\r\n      } else if (item.cellRender?.name === '$vxeRatio') {\r\n        ratioKeys.push(item.field)\r\n      }\r\n    })\r\n    // 深拷贝，为后续计算真实值做准备\r\n    const [\r\n      computedFullData,\r\n      computedExpandData\r\n    ] = [\r\n      this.$XEUtils.clone(fullData, true),\r\n      this.$XEUtils.clone(treeExpandData, true)\r\n    ]\r\n    const fullDataTreeArr = XEUtils.toTreeArray(computedFullData)\r\n    const treeExpandDataTreeArr = XEUtils.toTreeArray(computedExpandData)\r\n\r\n    this.$XEUtils.eachTree(computedFullData, item => {\r\n      if (self.isTreeSeqToFlat) {\r\n        const findIndex = fullDataTreeArr.findIndex(it => it[rowUuidKeyName] === item[rowUuidKeyName])\r\n        item.seqIndex = fullDataTreeArr[0]?.id === '#' ? item.id === '#' ? '#' : findIndex : findIndex + 1\r\n      }\r\n      columns.forEach(colItem => { // 添加导出formatter字段的配置\r\n        if (colItem.exportFormatter) {\r\n          let field = colItem.field\r\n          if (Object.hasOwn(item, field) && item[colItem.field]) {\r\n            let newFormatterValue = colItem.formatter({ row: item })\r\n            Reflect.set(item, field, newFormatterValue)\r\n            return item\r\n          }\r\n        }\r\n      })\r\n      this.computedExportRow(item, moneyKeys, ratioKeys)\r\n    })\r\n\r\n    this.$XEUtils.eachTree(computedExpandData, item => {\r\n      if (self.isTreeSeqToFlat) {\r\n        const findIndex = treeExpandDataTreeArr.findIndex(it => it[rowUuidKeyName] === item[rowUuidKeyName])\r\n        item.seqIndex = treeExpandDataTreeArr[0]?.id === '#' ? item.id === '#' ? '#' : findIndex : findIndex + 1\r\n      }\r\n      columns.forEach(colItem => { // 添加导出formatter字段的配置\r\n        if (colItem.exportFormatter) {\r\n          let field = colItem.field\r\n          if (Object.hasOwn(item, field) && item[colItem.field]) {\r\n            let newFormatterValue = colItem.formatter({ row: item })\r\n            Reflect.set(item, field, newFormatterValue)\r\n            return item\r\n          }\r\n        }\r\n      })\r\n      this.computedExportRow(item, moneyKeys, ratioKeys)\r\n    })\r\n\r\n    const latestTableData = {\r\n      columns, // 表头配置\r\n      fullData: computedFullData, // 使用计算后的fullData\r\n      tableData,\r\n      treeExpandData: computedExpandData, // 使用计算后的expendData\r\n      selection\r\n    }\r\n    this.exportModalData = Object.assign({\r\n      isExportTree: !!self.treeConfigIn,\r\n      saveType: '.xlsx',\r\n      fileName: 'export', // 文件名\r\n      dataType: !self.treeConfigIn ? 'fullData' : 'fullData',\r\n      isExportHead: true, // 是否导出表头\r\n      isExportFooter: false, // 是否导出表尾部\r\n      isExportOnlySourceField: false, // 是否只导出数据源表头字段，\r\n      isExportOnlyViewTitle: false, // 是否只导出数据表头名称，\r\n      isExportOriginalData: false, // 是否导出源数据\r\n      isExportData: true, // 是否导出数据\r\n      columns: columns, // 表头配置\r\n      fullData: fullData,\r\n      tableData: tableData,\r\n      treeExpandData: treeExpandData,\r\n      datas: [], // 源数据, 如果胃空数组则取dataType 对应的数据，否则直接以datas导出\r\n      selection: selection, // 选中数据\r\n      index: true, // 是否添加序号,\r\n      ignoreColsTypes: [\r\n        'dragSort',\r\n        'seq',\r\n        'checkbox',\r\n        'radio',\r\n        'optionRow',\r\n        'expand',\r\n        'attach',\r\n        'ach',\r\n        'list',\r\n        'attachlist'\r\n      ], // 忽略导出的列类型\r\n      viewValueFormat(value, row, column) {\r\n        // 视图数据格式化方法\r\n        // return value\r\n      }\r\n    }, this.tableGlobalConfig.customExportConfig, this.exportModalData || {}, obj || {}, latestTableData)\r\n    this.exportModalVisible = true\r\n  },\r\n  onExportClick(obj, ec) {\r\n    // 确定导出点击事件\r\n    obj.successCb = () => {\r\n      this.exportModalVisible = false\r\n    }\r\n    if (obj.onlyConfigExport) {\r\n      this.$emit('onExportClick', obj, ec)\r\n    } else {\r\n      console.log(obj)\r\n      this.$Export.exportExcel(obj, this)\r\n    }\r\n  },\r\n  dealExportViewData(obj = {\r\n    conlums: [],\r\n    viewData: []\r\n  }) {\r\n    // 处理 导入数据\r\n    let self = this\r\n    let { viewToSourceMap, tableColumnsTitleFieldMap, rowsObjTemp, colFormulaConfigm, colFormulaConfig } = this.generateColumnsAllMap(obj.conlums)\r\n    return obj.viewData.map((row, rowIndex) => {\r\n      Object.keys(row).map((key, keyIndex) => {\r\n        row[tableColumnsTitleFieldMap[key]] = self.reverseParseViewDataTosource(viewToSourceMap[tableColumnsTitleFieldMap[key]], row[key])\r\n      })\r\n      row = Object.assign({}, rowsObjTemp, row)\r\n      return this.reductionColFormula(colFormulaConfigm, self.reductionColFormula(colFormulaConfig, row))\r\n    })\r\n  },\r\n  deaImportViewData(obj = {\r\n    conlums: [],\r\n    viewData: [],\r\n    valiRules: {}\r\n  }) {\r\n    // 处理 导入数据\r\n    let self = this\r\n    let { viewToSourceMap, tableColumnsTitleFieldMap, tableColumnsFieldMap, rowsObjTemp, colFormulaConfig } = this.generateColumnsAllMap(obj.conlums)\r\n    let validResult = true\r\n    let validResultFieldTitle = []\r\n    let formatData = false\r\n    // let valiRule = []\r\n    if (process.env.VUE_APP_CONF_ISHB) {\r\n      let valiRule = {}\r\n      obj.viewData.map((row, rowIndex) => {\r\n        for (let key in tableColumnsFieldMap) {\r\n          let column = tableColumnsFieldMap[key]\r\n          let flag = false\r\n          // 每一列不重复校验\r\n          let fieldValue = row[column.title]\r\n          let field = column.field\r\n          if (column.required) {\r\n            // 必填\r\n            if (field === 'pay_amt' || field === 'pay_app_amt' || field === 'xpay_amt') {\r\n              // 金额需大于0\r\n              if (!fieldValue || isNaN(fieldValue) || row[field] * 1 < 0) {\r\n                flag = true\r\n                let msg = `第${rowIndex + 1}行${column.title}需为大于0的数字`\r\n                this.collectValidError(valiRule, rowIndex, field, column, msg)\r\n              }\r\n            } else {\r\n              if (!fieldValue) {\r\n                flag = true\r\n                this.collectValidError(valiRule, rowIndex, field, column, `第${rowIndex + 1}行${column.title}为必填项`)\r\n              }\r\n            }\r\n          }\r\n          if (column.reg && !flag) {\r\n            let value = fieldValue\r\n            if (!column.reg.test(value)) {\r\n              flag = true\r\n              this.collectValidError(valiRule, rowIndex, field, column, `第${rowIndex + 1}行${column.msg}`)\r\n            }\r\n          }\r\n          if (column.validator && typeof (column.validator) === 'function' && !flag) {\r\n            let data = row\r\n            let res = column.validator.call(this, data)\r\n            if (!res.result) {\r\n              this.collectValidError(valiRule, rowIndex, field, column, `第${rowIndex + 1}行${res.msg}`)\r\n            }\r\n          }\r\n          // 校验规则\r\n          if (obj.valiRules) {\r\n            let valiRules = Object.keys(obj.valiRules)\r\n            if (valiRules && valiRules.length > 0) {\r\n              if (fieldValue) {\r\n                valiRules.forEach(ruleField => {\r\n                  if (ruleField === field) {\r\n                    let reg = obj.valiRules[ruleField]\r\n                    if (reg instanceof RegExp) {\r\n                      let r = new RegExp(reg)\r\n                      if (!r.test(fieldValue)) {\r\n                        this.collectValidError(valiRule, rowIndex, field, column, `第${rowIndex + 1}行${obj.valiRules[ruleField + '_msg']}`)\r\n                      }\r\n                    } else if (reg instanceof Function) {\r\n                      let res = reg.call(this, fieldValue, row, column.title)\r\n                      if (res && !res.result) {\r\n                        this.collectValidError(valiRule, rowIndex, field, column, `第${rowIndex + 1}行${res.msg}`)\r\n                      }\r\n                    }\r\n                  }\r\n                })\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n      if (Object.keys(valiRule).length > 0) {\r\n        return {\r\n          result: false,\r\n          valiRule: valiRule\r\n        }\r\n      }\r\n      this.importModalVisible = false\r\n    }\r\n    let viewData = obj.viewData.map((row, rowIndex) => {\r\n      Object.keys(row).forEach((key, keyIndex) => {\r\n        let parseViewValue = self.reverseParseViewDataTosource(viewToSourceMap[tableColumnsTitleFieldMap[key]], row[key])\r\n        // const customVal = String(parseViewValue).replace(/null|undefined|\\s+/ig, '') !== ''\r\n        if (tableColumnsFieldMap[tableColumnsTitleFieldMap[key]]) {\r\n          // self.validCellRules({ type: 'all', row, column: tableColumnsFieldMap[tableColumnsTitleFieldMap[key]], val: parseViewValue, valiRules: obj.valiRules })\r\n          //   .then(() => {\r\n          //     if (customVal) {\r\n          row[tableColumnsTitleFieldMap[key]] = parseViewValue\r\n          if (tableColumnsTitleFieldMap[key] === 'iname') {\r\n            row['itemcode'] = parseViewValue.split('-')[0].replace(/\\s+/ig, '')\r\n          }\r\n          //   }\r\n          // })\r\n          // .catch(({ rule }) => {\r\n          //   validResult = false\r\n          //   valiRule.push(rule)\r\n          //   if (customVal) {\r\n          //     row[tableColumnsTitleFieldMap[key]] = parseViewValue\r\n          //   }\r\n          // })\r\n        } else {\r\n          if (key !== '序号' || key !== 'seqIndex') {\r\n            validResultFieldTitle.push(key)\r\n          }\r\n        }\r\n      })\r\n      row = Object.assign({}, rowsObjTemp, row)\r\n      formatData = true\r\n      return this.reductionColFormula(colFormulaConfig, self.reductionColFormula(colFormulaConfig, row))\r\n    })\r\n    if (formatData) return viewData\r\n    self.reductionRowCodeFormula(this.calculateConstraintConfigIn.rowCodeFormulaConfig, viewData, self.id)\r\n    return validResult && !validResultFieldTitle.length && viewData\r\n  },\r\n  reverseParseViewDataTosource(viewToSourceMap, value) {\r\n    // 处理单个 导入数据\r\n    //  needMap: true,\r\n    //  name: itemRender.name,\r\n    //  options: Array.isArray(itemRender.options) ? itemRender.options : [],\r\n    //  multiple: true,\r\n    //  formula: conlum.formula\r\n    if (viewToSourceMap && viewToSourceMap.needMap) {\r\n      let transValue = ''\r\n      let viewValue = typeof (value) === 'string' ? value : ''\r\n      if (viewToSourceMap.multiple) {\r\n        if (viewValue.length) {\r\n          let viewToSourceValueArr = []\r\n          viewToSourceMap.options.forEach((item, index) => {\r\n            if (viewValue.indexOf(item.label) >= 0) {\r\n              viewToSourceValueArr.push(item.value)\r\n            }\r\n          })\r\n          transValue = viewToSourceValueArr.join(',')\r\n        } else {\r\n          transValue = ''\r\n        }\r\n      } else {\r\n        viewToSourceMap.options.forEach((item, index) => {\r\n          if (viewValue.indexOf(item.label) >= 0) {\r\n            transValue = item.value\r\n          }\r\n        })\r\n      }\r\n      return transValue\r\n    } else {\r\n      return value + ''.replace(/null|NaN|undefined|,/ig, '')\r\n    }\r\n  },\r\n  newRule(rule) {\r\n    // 错误规则信息\r\n    return Object.assign({}, {\r\n      $options: rule,\r\n      required: rule.required,\r\n      min: rule.min,\r\n      max: rule.min,\r\n      type: rule.type,\r\n      pattern: rule.pattern,\r\n      validator: rule.validator,\r\n      maxWidth: rule.maxWidth,\r\n      message: rule.message\r\n    })\r\n  },\r\n  validCellRules(argObj) {\r\n    // 校验单元格\r\n    let self = this\r\n    const { type, row, column, val, valiRules } = argObj\r\n    const property = column.field\r\n    const errorRules = []\r\n    const syncVailds = []\r\n    if (property && valiRules) {\r\n      const rules = self.$XEUtils.get(valiRules, property)\r\n      if (rules) {\r\n        const cellValue = val\r\n        // const cellValue = self.$XEUtils.isUndefined(val) ? self.$XEUtils.get(row, property) : val\r\n        rules.forEach(rule => {\r\n          if (type === 'all') {\r\n            if (self.$XEUtils.isFunction(rule.validator)) {\r\n              let customValid\r\n              customValid = rule.validator({\r\n                cellValue,\r\n                rule,\r\n                rules,\r\n                row,\r\n                rowIndex: row.index,\r\n                column,\r\n                $table: this\r\n              })\r\n              if (customValid) {\r\n                if (self.$XEUtils.isError(customValid)) {\r\n                  this.validRuleErr = true\r\n                  errorRules.push(self.newRule({ type: 'custom', message: customValid.message, rule: self.newRule(rule) }))\r\n                } else if (customValid.catch) {\r\n                  // 如果为异步校验（注：异步校验是并发无序的）\r\n                  syncVailds.push(\r\n                    customValid.catch(e => {\r\n                      this.validRuleErr = true\r\n                      errorRules.push(self.newRule({ type: 'custom', message: e ? e.message : rule.message, rule: self.newRule(rule) }))\r\n                    })\r\n                  )\r\n                }\r\n              }\r\n            } else {\r\n              const isNumber = rule.type === 'number'\r\n              const numVal = isNumber ? self.$XEUtils.toNumber(cellValue) : self.$XEUtils.getSize(cellValue)\r\n              if (rule.required && (cellValue === null || cellValue === undefined || cellValue === '')) {\r\n                this.validRuleErr = true\r\n                errorRules.push(self.newRule(rule))\r\n              } else if (\r\n                (isNumber && isNaN(cellValue)) ||\r\n                (!isNaN(rule.min) && numVal < parseFloat(rule.min)) ||\r\n                (!isNaN(rule.max) && numVal > parseFloat(rule.max)) ||\r\n                (rule.pattern && !(rule.pattern.test ? rule.pattern : new RegExp(rule.pattern)).test(cellValue))\r\n              ) {\r\n                this.validRuleErr = true\r\n                errorRules.push(self.newRule(rule))\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return Promise.all(syncVailds).then(() => {\r\n      if (errorRules.length) {\r\n        const rest = { rules: errorRules, rule: errorRules[0] }\r\n        return Promise.reject(rest)\r\n      }\r\n    })\r\n  },\r\n  exportByTempalte(obj = {\r\n    data: [], // 模版数据，只拿第一行导出列配置\r\n    conlums: [] // 所有表头\r\n  }) {\r\n    // 按模版导出\r\n    let exportConlums = []\r\n    let exportConlumsTitle = obj.data[0]\r\n    const { tableColumnsTitleMap } = this.generateColumnsAllMap(obj.conlums)\r\n    exportConlumsTitle.forEach((item, index) => {\r\n      tableColumnsTitleMap[item] && exportConlums.push(tableColumnsTitleMap[item])\r\n    })\r\n    const fullData = this.getTableData().fullData\r\n    const selection = this.selection\r\n    this.$Export.exportExcel({\r\n      isExportTree: true,\r\n      saveType: '.xlsx',\r\n      fileName: 'export', // 文件名\r\n      dataType: 'fullData',\r\n      isExportHead: true, // 是否导出表头\r\n      isExportFooter: false, // 是否导出表尾部\r\n      isExportOnlySourceField: false, // 是否只导出数据源表头字段，\r\n      isExportOnlyViewTitle: false, // 是否只导出数据表头名称，\r\n      isExportOriginalData: false, // 是否导出源数据\r\n      isExportData: true, // 是否导出数据\r\n      columns: exportConlums, // 表头配置\r\n      fullData: fullData,\r\n      datas: [], // 源数据,\r\n      selection: selection, // 选中数据\r\n      index: true // 是否添加序号,\r\n    }, this)\r\n  },\r\n  downLoadImportTemplate(obj, tabPanal) {\r\n    // 下载导入模版\r\n    const tableColumnsConfig = this.tableColumnsConfig\r\n    this.$Export.exportExcel({\r\n      saveType: '.xlsx',\r\n      fileName: '导入模版', // 文件名\r\n      dataType: 'fullData',\r\n      isExportOnlyViewTitle: true, // 是否只导出数据源表头字段，\r\n      columns: tableColumnsConfig, // 表头配置\r\n      index: false // 是否添加序号,\r\n    }, this)\r\n  },\r\n  triggerImportOption(config = {}) {\r\n    // 触发导入\r\n    this.importConfig = config\r\n    this.importModalVisible = true\r\n  },\r\n  triggerDownloadTemplate(obj) {\r\n    this.onDownloadTemplateClick(obj)\r\n  },\r\n  onDownloadTemplateClick(obj) {\r\n    // 下载模版\r\n    if (typeof (this.importConfig.downloadTemplateCallback) === 'function') {\r\n      this.importConfig.downloadTemplateCallback(this.importData)\r\n    } else {\r\n      this.importData = []\r\n      const columns = this.tableColumnsConfig\r\n      const selection = this.selection\r\n      let defaultConfig = {\r\n        isExportTree: !!self.treeConfigIn,\r\n        saveType: '.xlsx',\r\n        fileName: 'importTempplate', // 文件名\r\n        dataType: 'fullData',\r\n        isExportOnlySourceField: true, // 是否只导出数据源表头字段，\r\n        isExportOnlyViewTitle: false, // 是否只导出数据表头名称，\r\n        isExportHead: true, // 是否导出表头\r\n        exportViewTitleType: 'nestTitle',\r\n        isExportFooter: false, // 是否导出表尾部\r\n        isExportOriginalData: true, // 是否导出源数据\r\n        isExportData: true, // 是否导出数据\r\n        columns: columns, // 表头配置\r\n        datas: [], // 源数据,\r\n        selection: selection, // 选中数据\r\n        index: true, // 是否添加序号,\r\n        ignoreColsTypes: [\r\n          'dragSort',\r\n          'seq',\r\n          'checkbox',\r\n          'radio',\r\n          'optionRow',\r\n          'expand',\r\n          'attach',\r\n          'ach',\r\n          'list',\r\n          'attachlist'\r\n        ] // 忽略导出的列类型\r\n      }\r\n      this.$Export.exportExcel(obj ? Object.assign(defaultConfig, obj) : obj, this)\r\n    }\r\n  },\r\n  async onImportFileClick() {\r\n    // 导入文件\r\n    let self = this\r\n    await this.$Import.importExcel({\r\n    }, (result, filename) => {\r\n      // this.tableDataIn = result\r\n      self.importData = result\r\n      self.fileConfig.fileName = filename\r\n    })\r\n  },\r\n  onImportClick() {\r\n    // 导入提交\r\n    if (!this.importData.length) {\r\n      this.$XModal.message({ status: 'error', message: '无数据导入请重新导入数据！' })\r\n    } else {\r\n      this.importModalVisible = false\r\n      if (typeof (this.importConfig.importSuccessCallback) === 'function') {\r\n        this.importConfig.importSuccessCallback(this.importData)\r\n      } else {\r\n        this.$emit('importSuccessCallback', this.importData)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 设置column金额过滤\r\nconst useMoneyFilter = {\r\n  setColumnMoneyFilter (columns) {\r\n    columns?.forEach(column => {\r\n      const flag = column.cellRender?.name === '$vxeMoney' || column.type === 'money'\r\n        ? (this.tableConfig.globalConfig?.useMoneyFilter && column.useMoneyFilter !== false) || column.useMoneyFilter\r\n        : false\r\n\r\n      if (flag) {\r\n        Object.assign(column, getColumnMoneyFilterConfig(column))\r\n      }\r\n      column.children && this.setColumnMoneyFilter(column.children)\r\n    })\r\n  }\r\n}\r\n\r\nexport default {\r\n  ...util, // 工具类\r\n  ...sortMethods, // 排序\r\n  ...axiosEvent, // 请求\r\n  ...initMethods, // prop更新方法以及初始化函数\r\n  ...registFn, // 渲染注册函数\r\n  ...tableEventFn, // 表格事件\r\n  ...toolBarEvent, // toolbar事件\r\n  ...pageEvent, // 分页事件\r\n  ...formatters, // 全局formatter函数\r\n  ...tableOptionFn, // 表格操作函数\r\n  ...proxyFn, // 代理函数\r\n  ...tableEvent, // 表格事件\r\n  ...otherFn, // 其他函数\r\n  ...batchModify, // 批量修改\r\n  ...calculateTool, // 单元格计算\r\n  ...calcAndConstraint, // 计算约束部分\r\n  ...constraintTool, // 约束解析\r\n  ...exportAndImportFn, // 导入导出工具类\r\n  ...useMoneyFilter // 金额筛选\r\n}\r\n"],"mappings":"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"}]}